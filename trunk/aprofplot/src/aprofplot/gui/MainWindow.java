package aprofplot.gui;

import aprofplot.*;
import static aprofplot.gui.GraphPanel.Type.*;
import aprofplot.gui.RoutinesTableModel.COLUMN;
import java.awt.Color;
import java.awt.Component;
import javax.swing.*;
import javax.swing.table.TableModel;
import javax.swing.text.BadLocationException;
import javax.swing.tree.*;
import java.util.*;
import java.io.*;
import static javax.swing.UIManager.getSystemLookAndFeelClassName;
import static javax.swing.UIManager.setLookAndFeel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableRowSorter;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

public final class MainWindow extends javax.swing.JFrame {

    private Routine rtn_info = null;
    private int graph_visible = 0;

    // add graph at the end of the list or wrt the "priority" order
    boolean append_graph = false;

    // Perfomance monitor
    PerformanceMonitor perf = new PerformanceMonitor();

    // Used for adapt correctly layout
    private JPanel fake = null;
    private JPanel fake2 = null;

    // Are we loading a new report?
    private boolean loading = false;

    // is a routine with context with a click mouse event?
    private boolean loading_routine = false;

    // Is the editor visible ?
    private boolean editor_visible = false;

    // source code directory
    private String source_dir = null;

    // Symbol table
    private HashMap<String, Symbol> sym = null;

    // source directory files
    private ArrayList<String> files = null;

    // index search function source code
    private int source_index = 0;

    // load function code of the selected entry in routine table in the editor?
    private boolean linked_editor = true;

    private boolean fitting_mode = false;
    
    // graphs
    ArrayList<GraphPanel> graphs = new ArrayList<GraphPanel>();
    ArrayList<Boolean> graphs_enabled = new ArrayList<Boolean>();
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {

        try {
            //setSize(875, 615);
            setLookAndFeel(getSystemLookAndFeelClassName());
            initComponents();
            setExtendedState(MAXIMIZED_BOTH);
            initGraph();
            refreshRecentFiles();
            resetRoutineTableFilter();
            resetContextsTableFilter();
            checkEditor();
            //setSize(875, 615);

        } catch (ClassNotFoundException e) {
            System.out.println("Fatal error during start of MainWindow");
            e.printStackTrace();
            System.exit(1);
        } catch (InstantiationException e) {
            System.out.println("Fatal error during start of MainWindow");
            e.printStackTrace();
            System.exit(1);
        } catch (IllegalAccessException e) {
            System.out.println("Fatal error during start of MainWindow");
            e.printStackTrace();
            System.exit(1);
        } catch (UnsupportedLookAndFeelException e) {
            System.out.println("Fatal error during start of MainWindow");
            e.printStackTrace();
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FilterRoutinesButton = new javax.swing.JButton();
        FilterTuplesButton = new javax.swing.JButton();
        GraphMenu = new javax.swing.JPopupMenu();
        CostPlotButton = new javax.swing.JCheckBoxMenuItem();
        AmortizedPlotButton = new javax.swing.JCheckBoxMenuItem();
        FrequencyPlotButton = new javax.swing.JCheckBoxMenuItem();
        MMMPlotButton = new javax.swing.JCheckBoxMenuItem();
        TotalCostPlotButton = new javax.swing.JCheckBoxMenuItem();
        VarPlotButton = new javax.swing.JCheckBoxMenuItem();
        RatioPlotButton = new javax.swing.JCheckBoxMenuItem();
        FilterContextsButton = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        NewWindowButton = new javax.swing.JButton();
        OpenButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        SourceDirectoryButton = new javax.swing.JButton();
        ReloadButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        GraphButton = new javax.swing.JToggleButton();
        SourceButton = new javax.swing.JToggleButton();
        FitButton = new javax.swing.JToggleButton();
        LinkButton = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        SettingButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        SearchField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        RoutineLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel9 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jToggleButton2 = new javax.swing.JToggleButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        jTextField2 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jComboBox1 = new javax.swing.JComboBox<String>();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSplitPane5 = new javax.swing.JSplitPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable3 = new JTable(new RoutinesTableModel(this.report, this, false)) {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column)
            {
                try {
                    if (renderer == null) {
                        System.out.println("Renderer is null");
                        System.out.println("row: " + row + " col: " + column);
                        return null;
                    }
                    Component c = super.prepareRenderer(renderer, row, column);
                    if (c != null && !c.getBackground().equals(getSelectionBackground())) {
                        c.setBackground(java.awt.Color.WHITE);
                    }
                    return c;
                } catch(NullPointerException e) {
                    System.out.println("row: " + row + " col: " + column);
                    return null;
                }
            }
        };
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new JTable(new RoutinesTableModel(this.report, this, ((RoutinesTableModel)jTable3.getModel()))) {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column)
            {
                try {
                    if (renderer == null) {
                        System.out.println("Renderer is null");
                        return null;
                    }
                    Component c = super.prepareRenderer(renderer, row, column);
                    if (c != null && !c.getBackground().equals(getSelectionBackground())) {
                        c.setBackground(java.awt.Color.WHITE);
                    }
                    return c;
                } catch(NullPointerException e) {
                    System.out.println("row: " + row + " col: " + column);
                    return null;
                }
            }
        };
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewWindowMenuEntry = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        OpenFileMenuEntry = new javax.swing.JMenuItem();
        SetSourceDirMenuEntry = new javax.swing.JMenuItem();
        RecentMenu = new javax.swing.JMenu();
        RecentEntry1 = new javax.swing.JMenuItem();
        RecentEntry2 = new javax.swing.JMenuItem();
        RecentEntry3 = new javax.swing.JMenuItem();
        RecentEntry4 = new javax.swing.JMenuItem();
        RecentEntry5 = new javax.swing.JMenuItem();
        RecentEntry6 = new javax.swing.JMenuItem();
        SaveMenuEntry = new javax.swing.JMenuItem();
        FitMenuEntry = new javax.swing.JMenuItem();
        ExportMenu = new javax.swing.JMenu();
        ExportRoutineProfileEntry = new javax.swing.JMenuItem();
        ExportProgramProfileEntry = new javax.swing.JMenuItem();
        ExportProgramStatsEntry = new javax.swing.JMenuItem();
        ExportInputVolumeEntry = new javax.swing.JMenuItem();
        ExportRichnessEntry = new javax.swing.JMenuItem();
        ExportThreadInputEntry = new javax.swing.JMenuItem();
        ExportSyscallInputEntry = new javax.swing.JMenuItem();
        ExportInducedAccessEntry = new javax.swing.JMenuItem();
        ExportSelfInducedAccessEntry = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        ExitMenuEntry = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        SettingsMenuEntry = new javax.swing.JMenuItem();
        ViewMenu = new javax.swing.JMenu();
        CostPlotMenuEntry = new javax.swing.JCheckBoxMenuItem();
        AmortizedPlotMenuEntry = new javax.swing.JCheckBoxMenuItem();
        FrequencyPlotMenuEntry = new javax.swing.JCheckBoxMenuItem();
        MMMPlotMenuEntry = new javax.swing.JCheckBoxMenuItem();
        TotalCostPlotMenuEntry = new javax.swing.JCheckBoxMenuItem();
        VarianceCostPlotMenuEntry = new javax.swing.JCheckBoxMenuItem();
        RatioPlotMenuEntry = new javax.swing.JCheckBoxMenuItem();
        SourceMenuEntry = new javax.swing.JCheckBoxMenuItem();
        HelpMenu = new javax.swing.JMenu();
        AboutMenuEntry = new javax.swing.JMenuItem();

        FilterRoutinesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Filter-icon.png"))); // NOI18N
        FilterRoutinesButton.setToolTipText("Filter routines");
        FilterRoutinesButton.setBorder(null);
        FilterRoutinesButton.setMaximumSize(new java.awt.Dimension(28, 28));
        FilterRoutinesButton.setMinimumSize(new java.awt.Dimension(28, 28));
        FilterRoutinesButton.setPreferredSize(new java.awt.Dimension(28, 28));
        jScrollPane1.setCorner(javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER, FilterRoutinesButton);
        FilterRoutinesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterRoutinesButtonActionPerformed(evt);
            }
        });

        FilterTuplesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Filter-icon.png"))); // NOI18N
        FilterTuplesButton.setToolTipText("Filter rms");
        FilterTuplesButton.setBorder(null);
        FilterTuplesButton.setMaximumSize(new java.awt.Dimension(28, 28));
        FilterTuplesButton.setMinimumSize(new java.awt.Dimension(28, 28));
        FilterTuplesButton.setPreferredSize(new java.awt.Dimension(28, 28));
        jScrollPane2.setCorner(javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER, FilterTuplesButton);
        FilterTuplesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterTuplesButtonActionPerformed(evt);
            }
        });

        GraphMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                GraphMenuPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        CostPlotButton.setText("Cost plot");
        CostPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CostPlotButtonActionPerformed(evt);
            }
        });
        GraphMenu.add(CostPlotButton);

        AmortizedPlotButton.setText("Amortized cost plot");
        AmortizedPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmortizedPlotButtonActionPerformed(evt);
            }
        });
        GraphMenu.add(AmortizedPlotButton);

        FrequencyPlotButton.setText("Rms frequency plot");
        FrequencyPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FrequencyPlotButtonActionPerformed(evt);
            }
        });
        GraphMenu.add(FrequencyPlotButton);

        MMMPlotButton.setText("Best/Avg/Worst cost plot");
        MMMPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MMMPlotButtonActionPerformed(evt);
            }
        });
        GraphMenu.add(MMMPlotButton);

        TotalCostPlotButton.setText("Total cost plot");
        TotalCostPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalCostPlotButtonActionPerformed(evt);
            }
        });
        GraphMenu.add(TotalCostPlotButton);

        VarPlotButton.setText("Cost variance plot");
        VarPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VarPlotButtonActionPerformed(evt);
            }
        });
        GraphMenu.add(VarPlotButton);

        RatioPlotButton.setText("Curve bounding plot");
        RatioPlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RatioPlotButtonActionPerformed(evt);
            }
        });
        GraphMenu.add(RatioPlotButton);

        FilterContextsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Filter-icon.png"))); // NOI18N
        FilterContextsButton.setToolTipText("Filter routines");
        FilterContextsButton.setBorder(null);
        FilterContextsButton.setMaximumSize(new java.awt.Dimension(28, 28));
        FilterContextsButton.setMinimumSize(new java.awt.Dimension(28, 28));
        FilterContextsButton.setPreferredSize(new java.awt.Dimension(28, 28));
        jScrollPane6.setCorner(javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER, FilterContextsButton);
        FilterContextsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterContextsButtonActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("aprof-plot");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/App-icon.png"))).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setMargin(new java.awt.Insets(0, 3, 0, 0));

        NewWindowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/NewWindow-icon.png"))); // NOI18N
        NewWindowButton.setToolTipText("open a new window");
        NewWindowButton.setBorder(null);
        NewWindowButton.setFocusable(false);
        NewWindowButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NewWindowButton.setMinimumSize(new java.awt.Dimension(28, 28));
        NewWindowButton.setPreferredSize(new java.awt.Dimension(28, 28));
        NewWindowButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        NewWindowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewWindowButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(NewWindowButton);

        OpenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Open-icon.png"))); // NOI18N
        OpenButton.setToolTipText("open an Aprof report file");
        OpenButton.setBorder(null);
        OpenButton.setFocusable(false);
        OpenButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OpenButton.setMaximumSize(new java.awt.Dimension(28, 28));
        OpenButton.setPreferredSize(new java.awt.Dimension(28, 28));
        OpenButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(OpenButton);

        SaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Save-icon.png"))); // NOI18N
        SaveButton.setToolTipText("save report changes");
        SaveButton.setBorder(null);
        SaveButton.setEnabled(false);
        SaveButton.setFocusable(false);
        SaveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SaveButton.setMaximumSize(new java.awt.Dimension(28, 28));
        SaveButton.setMinimumSize(new java.awt.Dimension(28, 28));
        SaveButton.setPreferredSize(new java.awt.Dimension(28, 28));
        SaveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(SaveButton);

        SourceDirectoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/fs-directory.png"))); // NOI18N
        SourceDirectoryButton.setToolTipText("Set source code directory");
        SourceDirectoryButton.setBorder(null);
        SourceDirectoryButton.setEnabled(false);
        SourceDirectoryButton.setFocusable(false);
        SourceDirectoryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SourceDirectoryButton.setMaximumSize(new java.awt.Dimension(28, 28));
        SourceDirectoryButton.setMinimumSize(new java.awt.Dimension(28, 28));
        SourceDirectoryButton.setPreferredSize(new java.awt.Dimension(28, 28));
        SourceDirectoryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SourceDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceDirectoryButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(SourceDirectoryButton);

        ReloadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/refresh.png"))); // NOI18N
        ReloadButton.setToolTipText("Reload last recent report");
        ReloadButton.setBorder(null);
        ReloadButton.setEnabled(false);
        ArrayList<File> r = Main.getRecentFiles();
        if (r.size() > 0) {
            ReloadButton.setEnabled(true);
        }
        ReloadButton.setFocusable(false);
        ReloadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ReloadButton.setMaximumSize(new java.awt.Dimension(28, 28));
        ReloadButton.setMinimumSize(new java.awt.Dimension(28, 28));
        ReloadButton.setPreferredSize(new java.awt.Dimension(28, 28));
        ReloadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ReloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReloadButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(ReloadButton);
        jToolBar1.add(jSeparator2);

        GraphButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/statistics.png"))); // NOI18N
        GraphButton.setToolTipText("Select graphs to be shown");
        GraphButton.setFocusable(false);
        GraphButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        GraphButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        GraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraphButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(GraphButton);

        SourceButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/editor.png"))); // NOI18N
        SourceButton.setToolTipText("Show source code editor");
        SourceButton.setEnabled(false);
        SourceButton.setFocusable(false);
        SourceButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SourceButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(SourceButton);

        FitButton.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        FitButton.setText(" F ");
        FitButton.setToolTipText("Enable fitting mode");
        FitButton.setEnabled(false);
        FitButton.setFocusable(false);
        FitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FitButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FitButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(FitButton);

        LinkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Unlink-icon.png"))); // NOI18N
        LinkButton.setSelected(true);
        LinkButton.setToolTipText("link/unlink plots");
        LinkButton.setFocusable(false);
        LinkButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LinkButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Unlink-icon.png"))); // NOI18N
        LinkButton.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Link-icon.png"))); // NOI18N
        LinkButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Link-icon.png"))); // NOI18N
        LinkButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LinkButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(LinkButton);
        jToolBar1.add(jSeparator3);

        SettingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Settings-icon.png"))); // NOI18N
        SettingButton.setToolTipText("settings");
        SettingButton.setBorder(null);
        SettingButton.setFocusable(false);
        SettingButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SettingButton.setMaximumSize(new java.awt.Dimension(28, 28));
        SettingButton.setMinimumSize(new java.awt.Dimension(28, 28));
        SettingButton.setPreferredSize(new java.awt.Dimension(28, 28));
        SettingButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SettingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(SettingButton);
        jToolBar1.add(jSeparator6);

        SearchField.setMaximumSize(new java.awt.Dimension(150, 27));
        SearchField.setMinimumSize(new java.awt.Dimension(100, 27));
        SearchField.setPreferredSize(new java.awt.Dimension(150, 27));
        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });
        //jToolBar1.add(javax.swing.Box.createHorizontalGlue());
        jToolBar1.add(SearchField);

        SearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Search-icon.png"))); // NOI18N
        SearchButton.setToolTipText("find in routines");
        SearchButton.setBorder(null);
        SearchButton.setFocusable(false);
        SearchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SearchButton.setMaximumSize(new java.awt.Dimension(28, 28));
        SearchButton.setMinimumSize(new java.awt.Dimension(28, 28));
        SearchButton.setPreferredSize(new java.awt.Dimension(28, 28));
        SearchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(SearchButton);
        jToolBar1.add(jSeparator7);

        RoutineLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jToolBar1.add(RoutineLabel);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setText(" Routines: 0 ");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel1);

        jLabel4.setText(" Contexts: 0 ");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel4);

        jLabel5.setText(" Total cost: 0 ");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel5);

        jLabel6.setText(" Total calls: 0 ");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel6);
        jPanel1.add(jLabel9);
        jPanel1.add(jLabel8);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setDividerLocation(0.8);
        jSplitPane1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jSplitPane1AncestorResized(evt);
            }
        });

        jPanel3.setLayout(new java.awt.BorderLayout());

        //jSplitPane4.setDividerLocation(0.75);
        jSplitPane4.setDividerSize(5);

        jPanel9.setLayout(new java.awt.GridLayout(6, 1));
        jScrollPane5.setViewportView(jPanel9);

        jSplitPane4.setLeftComponent(jScrollPane5);

        jPanel11.setBackground(new java.awt.Color(38, 26, 14));
        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.Y_AXIS));

        jToolBar2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);
        jToolBar2.setMaximumSize(new java.awt.Dimension(32767, 30));
        jToolBar2.add(jSeparator9);

        jToggleButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/chain_pencil.png"))); // NOI18N
        jToggleButton2.setSelected(true);
        jToggleButton2.setToolTipText("Load the source of the function selected in the routine table");
        jToggleButton2.setEnabled(false);
        jToggleButton2.setFocusable(false);
        jToggleButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton2.setMaximumSize(new java.awt.Dimension(26, 26));
        jToggleButton2.setMinimumSize(new java.awt.Dimension(26, 26));
        jToggleButton2.setPreferredSize(new java.awt.Dimension(26, 26));
        jToggleButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        jToolBar2.add(jToggleButton2);
        jToolBar2.add(jSeparator11);

        jTextField2.setEnabled(false);
        jTextField2.setMaximumSize(new java.awt.Dimension(150, 26));
        jTextField2.setMinimumSize(new java.awt.Dimension(150, 26));
        jTextField2.setPreferredSize(new java.awt.Dimension(150, 26));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jToolBar2.add(jTextField2);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Search-icon.png"))); // NOI18N
        jButton11.setEnabled(false);
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setMargin(new java.awt.Insets(0, 2, 0, 2));
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton11);
        jToolBar2.add(jSeparator8);

        jComboBox1.setMaximumRowCount(10);
        jComboBox1.setEnabled(false);
        jComboBox1.setMaximumSize(new java.awt.Dimension(32767, 26));
        jComboBox1.setMinimumSize(new java.awt.Dimension(300, 26));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jToolBar2.add(jComboBox1);
        jToolBar2.add(jSeparator10);

        jPanel11.add(jToolBar2);

        /*
        jSplitPane4.setRightComponent(jPanel11);
        */
        jSplitPane4.setRightComponent(null);

        jPanel3.add(jSplitPane4, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel3);

        jSplitPane2.setResizeWeight(0.9);
        jSplitPane2.setPreferredSize(new java.awt.Dimension(300, 300));
        jSplitPane2.setDividerLocation(0.65);
        jSplitPane2.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jSplitPane2AncestorResized(evt);
            }
        });

        jPanel6.setLayout(new java.awt.BorderLayout());

        jLabel3.setBackground(new java.awt.Color(36, 29, 21));
        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(" ");
        jPanel6.add(jLabel3, java.awt.BorderLayout.NORTH);

        jSplitPane5.setDividerSize(0);
        jSplitPane5.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane6.setVisible(false);
        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane6.setEnabled(false);

        jTable3.setRowHeight(52);
        jTable3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(jTable3);
        restoreSortingContextsTable();
        jTable3.setDefaultRenderer(Routine.class, new PlotThumbRenderer());

        jTable3.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable3ValueChanged(evt);
            }
        });

        jSplitPane5.setBottomComponent(jScrollPane6);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setDoubleBuffered(true);
        //jTable1.setAutoCreateColumnsFromModel(false);
        jTable1.setRowHeight(52);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        restoreSortingRoutinesTable();
        jTable1.setDefaultRenderer(Routine.class, new PlotThumbRenderer());
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable1ValueChanged(evt);
            }
        });
        /*
        jTable1.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                jTable1TableChanged(evt);
            }
        });
        */
        jScrollPane1.setViewportView(jTable1);

        jSplitPane5.setTopComponent(jScrollPane1);

        jPanel6.add(jSplitPane5, java.awt.BorderLayout.CENTER);

        jSplitPane2.setLeftComponent(jPanel6);

        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane3.setDividerSize(0);

        jPanel4.setMinimumSize(new java.awt.Dimension(26, 100));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(550, 450));

        jTable2.setModel(new RmsTableModel(this));
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        restoreSortingRmsTable();
        jTable2.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane3.setTopComponent(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Stack trace");
        jPanel5.add(jLabel2, java.awt.BorderLayout.NORTH);

        jList1.setModel(new StackTraceListModel());
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jSplitPane3.setRightComponent(jPanel5);
        jPanel5.setVisible(false);

        jTabbedPane1.addTab("Routine profile", jSplitPane3);

        jPanel8.setPreferredSize(new java.awt.Dimension(164, 362));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jTree1.setModel(new DefaultTreeModel(null));
        jTree1.setRootVisible(false);
        jScrollPane4.setViewportView(jTree1);

        jPanel8.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        if (report != null && report.hasContexts()) {
            jTabbedPane1.addTab("Context tree", jPanel8);
        }

        jSplitPane2.setRightComponent(jTabbedPane1);

        jSplitPane1.setBottomComponent(jSplitPane2);

        jPanel2.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        FileMenu.setMnemonic('f');
        FileMenu.setText("File");

        NewWindowMenuEntry.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewWindowMenuEntry.setMnemonic('n');
        NewWindowMenuEntry.setText("New window");
        NewWindowMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewWindowMenuEntryActionPerformed(evt);
            }
        });
        FileMenu.add(NewWindowMenuEntry);
        FileMenu.add(jSeparator1);

        OpenFileMenuEntry.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        OpenFileMenuEntry.setMnemonic('o');
        OpenFileMenuEntry.setText("Open file...");
        OpenFileMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileMenuEntryActionPerformed(evt);
            }
        });
        FileMenu.add(OpenFileMenuEntry);

        SetSourceDirMenuEntry.setText("Set source directory");
        SetSourceDirMenuEntry.setEnabled(false);
        SetSourceDirMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetSourceDirMenuEntryActionPerformed(evt);
            }
        });
        FileMenu.add(SetSourceDirMenuEntry);

        RecentMenu.setMnemonic('r');
        RecentMenu.setText("Open recent file");

        RecentEntry1.setText("recent file");
        RecentEntry1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecentEntry1ActionPerformed(evt);
            }
        });
        RecentMenu.add(RecentEntry1);
        recentMenuItems[0] = RecentEntry1;

        RecentEntry2.setText("recent file");
        RecentEntry2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecentEntry2ActionPerformed(evt);
            }
        });
        RecentMenu.add(RecentEntry2);
        recentMenuItems[1] = RecentEntry2;

        RecentEntry3.setText("recent file");
        RecentEntry3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecentEntry3ActionPerformed(evt);
            }
        });
        RecentMenu.add(RecentEntry3);
        recentMenuItems[2] = RecentEntry3;

        RecentEntry4.setText("recent file");
        RecentEntry4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecentEntry4ActionPerformed(evt);
            }
        });
        RecentMenu.add(RecentEntry4);
        recentMenuItems[3] = RecentEntry4;

        RecentEntry5.setText("recent file");
        RecentEntry5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecentEntry5ActionPerformed(evt);
            }
        });
        RecentMenu.add(RecentEntry5);
        recentMenuItems[4] = RecentEntry5;

        RecentEntry6.setText("recent file");
        RecentEntry6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecentEntry6ActionPerformed(evt);
            }
        });
        RecentMenu.add(RecentEntry6);
        recentMenuItems[5] = RecentEntry6;

        FileMenu.add(RecentMenu);

        SaveMenuEntry.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenuEntry.setText("Save");
        SaveMenuEntry.setEnabled(false);
        SaveMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuEntryActionPerformed(evt);
            }
        });
        FileMenu.add(SaveMenuEntry);

        FitMenuEntry.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        FitMenuEntry.setText("Run curve fitter");
        FitMenuEntry.setEnabled(false);
        FitMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FitMenuEntryActionPerformed(evt);
            }
        });
        FileMenu.add(FitMenuEntry);

        ExportMenu.setText("Export");
        ExportMenu.setEnabled(false);

        ExportRoutineProfileEntry.setText("Routine profile...");
        ExportRoutineProfileEntry.setEnabled(false);
        ExportRoutineProfileEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportRoutineProfileEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportRoutineProfileEntry);

        ExportProgramProfileEntry.setText("Program profile...");
        ExportProgramProfileEntry.setEnabled(false);
        ExportProgramProfileEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportProgramProfileEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportProgramProfileEntry);

        ExportProgramStatsEntry.setText("Program statistics...");
        ExportProgramStatsEntry.setEnabled(false);
        ExportProgramStatsEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportProgramStatsEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportProgramStatsEntry);

        ExportInputVolumeEntry.setText("Input volume...");
        ExportInputVolumeEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportInputVolumeEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportInputVolumeEntry);

        ExportRichnessEntry.setText("Routine profile richness...");
        ExportRichnessEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportRichnessEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportRichnessEntry);

        ExportThreadInputEntry.setText("Thread input...");
        ExportThreadInputEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportThreadInputEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportThreadInputEntry);

        ExportSyscallInputEntry.setText("External input...");
        ExportSyscallInputEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportSyscallInputEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportSyscallInputEntry);

        ExportInducedAccessEntry.setText("Induced accesses...");
        ExportInducedAccessEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportInducedAccessEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportInducedAccessEntry);

        ExportSelfInducedAccessEntry.setText("Self induced accesses...");
        ExportSelfInducedAccessEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportSelfInducedAccessEntryActionPerformed(evt);
            }
        });
        ExportMenu.add(ExportSelfInducedAccessEntry);

        FileMenu.add(ExportMenu);
        FileMenu.add(jSeparator4);

        ExitMenuEntry.setMnemonic('x');
        ExitMenuEntry.setText("Exit");
        ExitMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuEntryActionPerformed(evt);
            }
        });
        FileMenu.add(ExitMenuEntry);

        MenuBar.add(FileMenu);

        EditMenu.setMnemonic('e');
        EditMenu.setText("Edit");

        SettingsMenuEntry.setMnemonic('s');
        SettingsMenuEntry.setText("Settings...");
        SettingsMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsMenuEntryActionPerformed(evt);
            }
        });
        EditMenu.add(SettingsMenuEntry);

        MenuBar.add(EditMenu);

        ViewMenu.setMnemonic('v');
        ViewMenu.setText("View");

        CostPlotMenuEntry.setText("Cost plot");
        CostPlotMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CostPlotMenuEntryActionPerformed(evt);
            }
        });
        ViewMenu.add(CostPlotMenuEntry);

        AmortizedPlotMenuEntry.setText("Amortized cost plot");
        AmortizedPlotMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmortizedPlotMenuEntryActionPerformed(evt);
            }
        });
        ViewMenu.add(AmortizedPlotMenuEntry);

        FrequencyPlotMenuEntry.setText("Frequency plot");
        FrequencyPlotMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FrequencyPlotMenuEntryActionPerformed(evt);
            }
        });
        ViewMenu.add(FrequencyPlotMenuEntry);

        MMMPlotMenuEntry.setText("Best/Avg/Worst cost plot");
        MMMPlotMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MMMPlotMenuEntryActionPerformed(evt);
            }
        });
        ViewMenu.add(MMMPlotMenuEntry);

        TotalCostPlotMenuEntry.setText("Total cost plot");
        TotalCostPlotMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalCostPlotMenuEntryActionPerformed(evt);
            }
        });
        ViewMenu.add(TotalCostPlotMenuEntry);

        VarianceCostPlotMenuEntry.setText("Cost variance plot");
        VarianceCostPlotMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VarianceCostPlotMenuEntryActionPerformed(evt);
            }
        });
        ViewMenu.add(VarianceCostPlotMenuEntry);

        RatioPlotMenuEntry.setText("Curve bounding plot");
        RatioPlotMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RatioPlotMenuEntryActionPerformed(evt);
            }
        });
        ViewMenu.add(RatioPlotMenuEntry);

        SourceMenuEntry.setText("Source code editor");
        SourceMenuEntry.setEnabled(false);
        SourceMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SourceMenuEntryActionPerformed(evt);
            }
        });
        ViewMenu.add(SourceMenuEntry);

        MenuBar.add(ViewMenu);

        HelpMenu.setMnemonic('h');
        HelpMenu.setText("Help");

        AboutMenuEntry.setMnemonic('a');
        AboutMenuEntry.setText("About");
        AboutMenuEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuEntryActionPerformed(evt);
            }
        });
        HelpMenu.add(AboutMenuEntry);

        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void postStart() {
        contexts_divider = jSplitPane5.getSize().height / 2;
    }

    private boolean isContextPanelVisible() {
        return jScrollPane6.isVisible();
    }

    public boolean setVisibleContextsTable(boolean visible) {

        //System.out.println("Set visible");
        //Thread.dumpStack();
        boolean old = isContextPanelVisible();
        if (old) {
            contexts_divider = jSplitPane5.getDividerLocation();
        }

        if (visible) {

            jSplitPane5.setDividerSize(6);
            jSplitPane5.setDividerLocation(contexts_divider);
            jScrollPane6.setVisible(visible);
            //scrollToVisibleRoutinesTable();

        } else {

            jScrollPane6.setVisible(visible);
            jSplitPane5.setDividerSize(0);
            jSplitPane5.setDividerLocation(1.0);
        }

        return old;
    }

    public boolean isVisibleContextsTable() {
        return jScrollPane6.isVisible();
    }

    public void checkEditor() {

        if (isCtagsInstalled()) {

            SetSourceDirMenuEntry.setEnabled(true);
            SourceDirectoryButton.setEnabled(true);
            SourceMenuEntry.setEnabled(true);
            SourceButton.setEnabled(true);
            createTextEditor();
            if (Main.getEditorVisible()) {
                showTextEditor(true);
            }

        } else {

            SetSourceDirMenuEntry.setEnabled(false);
            SourceDirectoryButton.setEnabled(false);
            SourceMenuEntry.setEnabled(false);
            SourceButton.setEnabled(false);
            if (Main.getEditorVisible()) {
                showTextEditor(false);
            }
        }
    }

    public AprofReport getCurrentReport() {
        return report;
    }

    private void setVisibleStackTrace(boolean show) {

        if (jPanel5.isVisible()) {
            stack_trace_divider = jSplitPane3.getDividerLocation();
        }

        if (show) {

            jSplitPane3.setDividerSize(6);
            if (stack_trace_divider > 0) {
                jSplitPane3.setDividerLocation(stack_trace_divider);
            } else {
                jSplitPane3.setDividerLocation(0.5);
            }

            jPanel5.setVisible(true);

        } else {

            jPanel5.setVisible(false);
            jSplitPane3.setDividerSize(0);

        }
    }

    protected final void refreshRecentFiles() {
        hideRecentMenuItems();
        ArrayList<File> recent = Main.getRecentFiles();
        if (recent.isEmpty()) {
            RecentMenu.setEnabled(false);
        } else {
            RecentMenu.setEnabled(true);
            for (int i = 0; i < recent.size(); i++) {
                recentMenuItems[i].setText(recent.get(i).getName());
                recentMenuItems[i].setVisible(true);
            }
        }
    }

    private void hideRecentMenuItems() {
        RecentMenu.setEnabled(false);
        RecentEntry1.setVisible(false);
        RecentEntry2.setVisible(false);
        RecentEntry3.setVisible(false);
        RecentEntry4.setVisible(false);
        RecentEntry5.setVisible(false);
        RecentEntry6.setVisible(false);
    }

    private void updateGUI(File file) {

        this.setTitle(file.toString() + " - aprof-plot");
        jLabel3.setText("Profile report for " + report.getAppName() + " (" + report.getCommandLine() + ")");
        jLabel1.setText(" Routines: " + report.getRoutineCount() + " ");
        jLabel4.setText(" Contexts: " + report.getContextsCount() + " ");
        String tcos = String.format(" Total cost: %d ", (long) report.getTotalCost());
        jLabel5.setText(tcos);
        jLabel6.setText(" Calls: " + report.getTotalCalls() + " ");
        RoutineLabel.setText("");

        if (this.isInputMetricRms()) {
            FrequencyPlotMenuEntry.setText("RMS frequency plot");
            FrequencyPlotButton.setText("RMS frequency plot");
        } else {
            FrequencyPlotMenuEntry.setText("DRMS frequency plot");
            FrequencyPlotButton.setText("DRMS frequency plot");
        }
    }

    protected void loadReport(final File file) {

        //System.out.println("Loading[1]: " + file);
        loading = true;
        final ProgressDialog p = new ProgressDialog(this, true);

        SwingWorker worker;
        worker = new SwingWorker<AprofReport, Void>() {
            
            @Override
            public AprofReport doInBackground() {

                boolean failed = false;

                try {
                    setReport(new AprofReport(file), file);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    failed = true;
                }

                p.setVisible(false);
                
                if (failed || report.hasFatalError()) {
                    failLoadReport(file);
                    return null;
                }

                if (report.hasWarnings()) {
                    showWanrnings(report.getWarnings());
                }

                return report;
            }

        };
        worker.execute();
        p.setVisible(true);
    }

    private void showWanrnings(String warnings) {
        JOptionPane.showMessageDialog(this,
            warnings, "Warning",
            JOptionPane.INFORMATION_MESSAGE);
    }

    public boolean isInputMetricRms() {

        if (report == null) 
            return true;

        if (report.getInputMetric() == AprofReport.InputMetric.DRMS)
            return false;

        return true;
    }

    private void failLoadReport(File file) {
       JOptionPane.showMessageDialog(this,
            "Couldn't open the chosen file", "Error",
            JOptionPane.ERROR_MESSAGE);
    }

    @SuppressWarnings("unchecked")
    public void saveSortingRoutinesTable() {
        routines_sort = (List<RowSorter.SortKey>) routines_table_sorter.getSortKeys();
    }

    public void restoreSortingRoutinesTable() {

        if (routines_table_sorter == null) {

            routines_table_sorter = new TableRowSorter<TableModel>(jTable1.getModel());
            jTable1.setRowSorter(routines_table_sorter);

        }

        /* default: sort by RMS */
        if (routines_sort == null) {

            routines_sort = new ArrayList<RowSorter.SortKey>();
            routines_sort.add(new RowSorter.SortKey(3, SortOrder.DESCENDING));

        }

        routines_table_sorter.setSortKeys(routines_sort);
        routines_table_sorter.setSortable(5, false);
    }

    @SuppressWarnings("unchecked")
    public void saveSortingRmsTable() {
        rms_sort = (List<RowSorter.SortKey>) rms_table_sorter.getSortKeys();
    }

    public void restoreSortingRmsTable() {

        if (rms_table_sorter == null) {

            rms_table_sorter = new TableRowSorter<TableModel>(jTable2.getModel());
            jTable2.setRowSorter(rms_table_sorter);

        }

        /* default: sort by RMS */
        if (rms_sort == null) {

            rms_sort = new ArrayList<RowSorter.SortKey>();
            rms_sort.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));

        }

        rms_table_sorter.setSortKeys(rms_sort);
    }

    @SuppressWarnings("unchecked")
    public void saveSortingContextsTable() {
        contexts_sort = (List<RowSorter.SortKey>) contexts_table_sorter.getSortKeys();
    }

    public void restoreSortingContextsTable() {

        if (contexts_table_sorter == null) {

            contexts_table_sorter = new TableRowSorter<TableModel>(jTable3.getModel());
            jTable3.setRowSorter(contexts_table_sorter);

        }

        setComparatorContexts();

        /* default: sort by RMS */
        if (contexts_sort == null) {

            contexts_sort = new ArrayList<RowSorter.SortKey>();
            contexts_sort.add(new RowSorter.SortKey(3, SortOrder.DESCENDING));

        }

        contexts_table_sorter.setSortKeys(contexts_sort);
        contexts_table_sorter.setSortable(5, false);
    }

    private void setComparatorContexts() {

        if (report == null) {
            return;
        }

        if (report.hasContexts()) {

            final Comparator<String> contextOrder = new Comparator<String>() {

                @Override
                public int compare(String t, String t1) {

                    if (t == null && t1 == null) {
                        return 0;
                    }
                    if (t == null) {
                        return 1;
                    }
                    if (t1 == null) {
                        return -1;
                    }

                    int i1 = t.indexOf("/");
                    int i2 = t1.indexOf("/");

                    int c1;
                    int c1_n = 0;
                    int c2;
                    int c2_n = 0;

                    if (i1 < 0) {

                        if (t.equals("")) {
                            c1 = 0;
                        } else {
                            c1 = Integer.parseInt(t);
                        }

                    } else {

                        c1_n = Integer.parseInt(t.substring(0, i1));
                        c1 = Integer.parseInt(t.substring(i1 + 1));

                    }

                    if (i2 < 0) {

                        if (t1.equals("")) {
                            c2 = 0;
                        } else {
                            c2 = Integer.parseInt(t1);
                        }

                    } else {

                        //System.out.println(t1 + " " + t1.substring(0, i2) + " / " + t1.substring(i2 + 1));
                        c2_n = Integer.parseInt(t1.substring(0, i2));
                        c2 = Integer.parseInt(t1.substring(i2 + 1));

                    }

                    if (c1 != c2) {
                        return c1 - c2;
                    }

                    return c1_n - c2_n;

                }

            };

            contexts_table_sorter.setComparator(8, contextOrder);

        }
    }

    private void setReport(AprofReport report, File file) throws Exception {

        this.report = report;
        Main.addRecentFile(file);
        refreshRecentFiles();

        // reload button
        ReloadButton.setEnabled(true);
        ReloadButton.setToolTipText("Reload this report");

        // enable entries in export menu
        ExportMenu.setEnabled(true);
        ExportProgramProfileEntry.setEnabled(true);
        ExportProgramStatsEntry.setEnabled(true);

        // enable add fit
        FitMenuEntry.setEnabled(true);
        FitButton.setEnabled(false);
        FitButton.setSelected(false);
        if (this.fitting_mode) {
            this.showFittingData(false);
        }

        resetRoutineTableFilter();

        // Update some labels in the GUI
        updateGUI(file);

        // Clear all graphs
        for (GraphPanel g : graphs)
            g.clearData();

        // Update routine table: we change data in table, this must be done by swing thread
        final AprofReport final_report = report;
        final ProgressDialog p = new ProgressDialog(this, true);
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {

                RoutinesTableModel m = (RoutinesTableModel) jTable1.getModel();
                saveSortingRoutinesTable();
                m.setData(final_report);
                restoreSortingRoutinesTable();

                // reset scrolling
                jScrollPane1.getVerticalScrollBar().setValue(0);

                RoutinesTableModel m2 = (RoutinesTableModel) jTable3.getModel();
                saveSortingContextsTable();
                m2.setData(final_report);
                restoreSortingContextsTable();

                // Clear routinr profile
                ((RmsTableModel) jTable2.getModel()).setData(null);
                ((RmsTableModel) jTable2.getModel()).refreshStructure();

                graphs.get(FREQ_PLOT.ordinal()).updateGraphTitle();

                p.setVisible(false);
                loading = false;

            }

        });

    }

    public void updateRoutineTableConfig(COLUMN[] config) {
        RoutinesTableModel m = (RoutinesTableModel) jTable1.getModel();
        m.setColumnConfig(config);
    }

    private boolean saveForm() {

        if (SaveButton.isEnabled()) {
            int choice = javax.swing.JOptionPane.showConfirmDialog(this,
                "Do you want to save changes to this report?",
                "Unsaved changes",
                javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE);
            if (choice == javax.swing.JOptionPane.CANCEL_OPTION) {
                return false;
            }
            if (choice == javax.swing.JOptionPane.OK_OPTION) {
                try {
                    report.save();
                } catch (Exception e) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Can't save report", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }

        }
        return true;
    }

    private void openFile() {

        saveForm();
        disableSaveCommand();

        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        String lastReportPath = Main.getLastReportPath();
        if (lastReportPath != null) {
            while (!lastReportPath.equals("")) {

                File f = new File(lastReportPath);
                if (f.exists()) {
                    chooser.setCurrentDirectory(f);
                    break;
                } else {
                    lastReportPath = f.getParent();
                }

            }
        }

        javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter("Aprof report files (*.aprof)", "aprof");
        chooser.setFileFilter(filter);
        chooser.setAcceptAllFileFilterUsed(false);
        int choice = chooser.showOpenDialog(this);
        if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = chooser.getSelectedFile();
            Main.setLastReportPath(file.getParent());
            loadReport(file);
        }

    }

    protected void refreshTables() {

        int viewIndex = jTable1.getSelectedRow();
        int viewIndex2 = jTable2.getSelectedRow();
        ((RmsTableModel) jTable2.getModel()).setData(rtn_info);
        if (viewIndex2 >= 0) {
            int modelIndex2 = jTable1.convertRowIndexToModel(viewIndex2);
            viewIndex2 = jTable1.convertRowIndexToView(modelIndex2);
            jTable2.setRowSelectionInterval(viewIndex2, viewIndex2);
            if (jTable2.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
                javax.swing.JViewport viewport = (javax.swing.JViewport) jTable2.getParent();
                java.awt.Rectangle rect = jTable2.getCellRect(viewIndex2, 0, true);
                java.awt.Point pos = viewport.getViewPosition();
                rect.translate(-pos.x, -pos.y);
                viewport.scrollRectToVisible(rect);
            }
        }
    }

    public void refreshRoutinesTable() {
        saveSortingRoutinesTable();
        ((RoutinesTableModel) jTable1.getModel()).setData(report);
        setRoutinesTableFilter(routines_filter_criteria);
        restoreSortingRoutinesTable();
    }

    public void refreshContextsTable() {

        if (isVisibleContextsTable()) {

            if (rtn_info instanceof RoutineContext) {
                ((RoutinesTableModel) jTable1.getModel()).loadContexts(
                    ((RoutineContext) rtn_info).getOverallRoutine(), true);
            } else {
                ((RoutinesTableModel) jTable1.getModel()).loadContexts(rtn_info, true);
            }
        }
        //setRoutinesTableFilter(routines_filter_criteria);

    }

    public void refreshRmsTable(boolean skip_refresh_plot) {
        saveSortingRmsTable();
        ((RmsTableModel) jTable2.getModel()).setData(rtn_info);
        ((RmsTableModel) jTable2.getModel()).refreshStructure();
        if (skip_refresh_plot) {
            refreshRmsTableFilter();
        }
        restoreSortingRmsTable();
    }

    protected boolean arePlotsLinked() {
        return this.linked_plots;
    }

    protected void setXLogScaleAll(GraphPanel.Type graph_type, boolean log) {
        // this method is called by one graph, we notify to all others...
        for (GraphPanel g : graphs)
            if (g.getGraphType() != graph_type)
                g.setXLogScale(log);
    }

    protected void setYLogScaleAll(GraphPanel.Type graph_type, boolean log) {
        // this method is called by one graph, we notify to all others...
        for (GraphPanel g : graphs)
            if (g.getGraphType() != graph_type)
                g.setYLogScale(log);
    }

    protected void setGroupThresholdAll(GraphPanel.Type graph_type, int threshold) {
        // this method is called by one graph, we notify to all others...
        for (GraphPanel g : graphs)
            if (g.getGraphType() != graph_type)
                g.setGroupThreshold(threshold);
    }

    protected void setSmoothThresholdAll(GraphPanel.Type graph_type, int threshold) {
        // this method is called by one graph, we notify to all others...
        for (GraphPanel g : graphs)
            if (g.getGraphType() != graph_type)
                g.setSmoothThreshold(threshold);
    }

    protected void setGroupCostAll(GraphPanel.Type graph_type, Input.CostKind cost_type) {
        // this method is called by one graph, we notify to all others..
        for (GraphPanel g : graphs)
            if (g.getGraphType() != graph_type)
                g.setGroupCost(cost_type);
    }

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        if (!saveForm()) {
            return;
        }
        Main.removeWindow(this);
        this.dispose();

	}//GEN-LAST:event_formWindowClosing

	private void NewWindowMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewWindowMenuEntryActionPerformed
        Main.newWindow();
	}//GEN-LAST:event_NewWindowMenuEntryActionPerformed

	private void ExitMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuEntryActionPerformed
        formWindowClosing(null);
	}//GEN-LAST:event_ExitMenuEntryActionPerformed

	private void OpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenButtonActionPerformed

        openFile();

	}//GEN-LAST:event_OpenButtonActionPerformed

    public void inhibit_selection(boolean inhibit) {

        loading = inhibit;

    }

    private void loadRoutine(Routine r) {

        this.rtn_info = r;

        if (r == null) {

            ((RmsTableModel) jTable2.getModel()).setData(null);

            if (isVisibleContextsTable()) {
                ((RoutinesTableModel) jTable1.getModel()).loadContexts(null, false);
            }

            ((StackTraceListModel) jList1.getModel()).setData(null);

            //System.out.println("Reset routine");
            //Thread.dumpStack();
            RoutineLabel.setText("");

            for (GraphPanel g : graphs)
                g.clearData();

            ExportRoutineProfileEntry.setEnabled(false);
            ExportMenu.setEnabled(false);
            
            //updateContextTree(null);
            // Initially hide stack trace panel
            setVisibleStackTrace(false);
            return;
        }

        //System.out.println("Refresh routine");
        String name = r.getName();

        if (r instanceof RoutineContext) {
            name += (" (" + ((RoutineContext) r).getContextId() + "/"
                + ((RoutineContext) r).getOverallRoutine().getContextCount()
                + ")");
        }
        RoutineLabel.setText(name);

        // Load function source code in the editor
        if (linked_editor) {
            loadFunctionInTextEditor(name);
        }

        perf.start(this, PerformanceMonitor.ELABORATE);

        ArrayList<GraphPanel> active_graphs = new ArrayList<GraphPanel>();
        for (int i = 0; i < graphs_enabled.size(); i++)
            if (graphs_enabled.get(i))
                active_graphs.add(graphs.get(i));
                
        for (GraphPanel g : active_graphs)     
            g.setRoutine(r);
        
        /*
        if (isVisibleFittingData() && jCheckBoxMenuItem4.isSelected()) {
            Fit f = report.getFit(r.getID());
            double[] p = f.getParams();
            CostGraphPanel.addFittedLine(p[0], p[1], p[2]);
        }
        */
        
        r.sortInputTuplesByInput();
        for (Input i : r)
            for (GraphPanel g : active_graphs)     
                g.addPoint(i);
    
        for (GraphPanel g : active_graphs) {
            g.maximize();
        }
        
        if (graphs_enabled.get(AMORTIZED_PLOT.ordinal()))
            graphs.get(AMORTIZED_PLOT.ordinal()).updateGraphTitle();

        // enable/disable entries in export menu related to routine
        ExportRoutineProfileEntry.setEnabled(true);
        ExportMenu.setEnabled(true);
        
        // Update routine profile panel
        ((RmsTableModel) jTable2.getModel()).setData(r);

        if (r instanceof ContextualizedRoutineInfo) {
            ((RoutinesTableModel) jTable1.getModel()).loadContexts(r, true);
            refreshContextsTableFilter();
        }

        // Update stack trace panel
        if (r instanceof RoutineContext) {

            ((StackTraceListModel) jList1.getModel()).setData(((RoutineContext) r).getStackTrace());
            setVisibleStackTrace(true);

        } else {

            ((StackTraceListModel) jList1.getModel()).setData(null);
            setVisibleStackTrace(false);

        }

        perf.stop(this, PerformanceMonitor.ELABORATE);
        System.gc();
        //updateContextTree(r);
    }

    private void jTable1ValueChanged(javax.swing.event.ListSelectionEvent evt) {

        if (loading) {
            return;
        }
        loading_routine = true;

        int viewIndex = jTable1.getSelectedRow();
        if (viewIndex >= 0) {

            int modelIndex = jTable1.convertRowIndexToModel(viewIndex);
            Routine r = ((RoutinesTableModel) jTable1.getModel()).getRoutine(modelIndex);

            if (rtn_info == r) {
                return;
            }
            //System.out.println("Selected row in routine table");
            loadRoutine(r);

        } else {

            if (rtn_info == null) {
                return;
            }
            //System.out.println("Invalid selectin in routine table");
            setVisibleContextsTable(false);
            loadRoutine(null);

        }

        scrollToVisibleRoutinesTable();
        loading_routine = false;

    }

    public void scrollToVisibleRoutinesTable() {

        int viewIndex = jTable1.getSelectedRow();
        // Scroll routine table to visible; thanks to fiontan
        if (jTable1.getParent() instanceof javax.swing.JViewport) {
            javax.swing.JViewport viewport = (javax.swing.JViewport) jTable1.getParent();
            java.awt.Rectangle rect = jTable1.getCellRect(viewIndex, 0, true);
            java.awt.Point pos = viewport.getViewPosition();
            rect.translate(-pos.x, -pos.y);
            viewport.scrollRectToVisible(rect);
        }

    }

    private void jTable3ValueChanged(javax.swing.event.ListSelectionEvent evt) {

        if (loading) {
            return;
        }

        int viewIndex = jTable3.getSelectedRow();
        if (viewIndex >= 0) {

            if (viewIndex >= jTable3.getRowCount()) {
                //System.out.println("Invalid row index:" + viewIndex);
            }

            int modelIndex = jTable3.convertRowIndexToModel(viewIndex);
            Routine r = ((RoutinesTableModel) jTable3.getModel()).getRoutine(modelIndex);

            if (this.rtn_info == r) {
                return;
            }
            //System.out.println("Selected row in context table");
            loadRoutine(r);

        } else {

            if (true) {
                return;
            }
            if (!isVisibleContextsTable()) {
                return;
            }
            if (!loading_routine) {
                //System.out.println("Selected invalid row in context table");
                loadRoutine(null);
            }

        }

        // Scroll routine table to visible; thanks to fiontan
        if (jTable1.getParent() instanceof javax.swing.JViewport) {
            javax.swing.JViewport viewport = (javax.swing.JViewport) jTable3.getParent();
            java.awt.Rectangle rect = jTable3.getCellRect(viewIndex, 0, true);
            java.awt.Point pos = viewport.getViewPosition();
            rect.translate(-pos.x, -pos.y);
            viewport.scrollRectToVisible(rect);
        }
    }

    private void jTable2ValueChanged(javax.swing.event.ListSelectionEvent evt) {

        // Scroll routine profile panel to visible; thanks to fiontan
        int viewIndex = jTable2.getSelectedRow();
        if (jTable2.getParent() instanceof javax.swing.JViewport) {
            javax.swing.JViewport viewport = (javax.swing.JViewport) jTable2.getParent();
            java.awt.Rectangle rect = jTable2.getCellRect(viewIndex, 0, true);
            java.awt.Point pos = viewport.getViewPosition();
            rect.translate(-pos.x, -pos.y);
            viewport.scrollRectToVisible(rect);
        }

    }

	private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // search button
        findRoutineByName();
	}//GEN-LAST:event_SearchButtonActionPerformed

	private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        // search text field
        findRoutineByName();
	}//GEN-LAST:event_SearchFieldActionPerformed

	private void FilterTuplesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterTuplesButtonActionPerformed
        // Routine profile filter button (corner routine profile panel)
        if (((RmsTableModel) jTable2.getModel()).getRowCount() > 0) {
            (new RmsFilterDialog(this, true, rms_filter_criteria)).setVisible(true);
        }
	}//GEN-LAST:event_FilterTuplesButtonActionPerformed

	private void OpenFileMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileMenuEntryActionPerformed
        // Menu: File > Open file
        openFile();
	}//GEN-LAST:event_OpenFileMenuEntryActionPerformed

	private void NewWindowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewWindowButtonActionPerformed
        // Menu: File > New window
        Main.newWindow();
	}//GEN-LAST:event_NewWindowButtonActionPerformed

	private void AboutMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuEntryActionPerformed
        // Menu: Help > About
        (new AboutDialog(this, true)).setVisible(true);
	}//GEN-LAST:event_AboutMenuEntryActionPerformed

	private void LinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LinkButtonActionPerformed
        // Link plots button
        if (LinkButton.isSelected()) {
            linked_plots = true;
        } else {
            linked_plots = false;
        }
	}//GEN-LAST:event_LinkButtonActionPerformed

    public void enableSaveCommand() {
        SaveButton.setEnabled(true);
        SaveMenuEntry.setEnabled(true);
    }

    public void disableSaveCommand() {
        SaveButton.setEnabled(false);
        SaveMenuEntry.setEnabled(false);
    }

	private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // Save button
        try {
            report.save();
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Can't save report", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            //System.out.println(e.getMessage());
            //e.printStackTrace();
        } finally {
            disableSaveCommand();
        }
	}//GEN-LAST:event_SaveButtonActionPerformed

	private void SaveMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuEntryActionPerformed
        // Menu: File > Save
        SaveButtonActionPerformed(null);
	}//GEN-LAST:event_SaveMenuEntryActionPerformed

	private void SettingsMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsMenuEntryActionPerformed
        // Menu: Edit > Settings
        (new SettingsDialog(this, true)).setVisible(true);
	}//GEN-LAST:event_SettingsMenuEntryActionPerformed

	private void SettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingButtonActionPerformed
        // Settings button
        (new SettingsDialog(this, true)).setVisible(true);
	}//GEN-LAST:event_SettingButtonActionPerformed

    private void loadRecentFile(int entry) {

        ArrayList<File> r = Main.getRecentFiles();
        if (entry < 0 || entry >= r.size()) {
            return;
        }

        File f = Main.getRecentFiles().get(entry);
        saveForm();
        disableSaveCommand();
        loadReport(f);

        if (f.exists()) {
            Main.setLastReportPath(f.getParent());
        }

    }

	private void RecentEntry1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecentEntry1ActionPerformed
        // Menu: File > Open recent file > (first entry)
        loadRecentFile(0);
	}//GEN-LAST:event_RecentEntry1ActionPerformed

	private void RecentEntry2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecentEntry2ActionPerformed
        // Menu: File > Open recent file > (second entry)
        loadRecentFile(1);
	}//GEN-LAST:event_RecentEntry2ActionPerformed

	private void RecentEntry3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecentEntry3ActionPerformed
        // Menu: File > Open recent file > (third entry)
        loadRecentFile(2);
	}//GEN-LAST:event_RecentEntry3ActionPerformed

	private void RecentEntry4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecentEntry4ActionPerformed
        // Menu: File > Open recent file > (fourth entry)
        loadRecentFile(3);
	}//GEN-LAST:event_RecentEntry4ActionPerformed

	private void RecentEntry5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecentEntry5ActionPerformed
        // Menu: File > Open recent file > (fifth entry)
        loadRecentFile(4);
	}//GEN-LAST:event_RecentEntry5ActionPerformed

	private void RecentEntry6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecentEntry6ActionPerformed
        // Menu: File > Open recent file > (sixth entry)
        loadRecentFile(5);
	}//GEN-LAST:event_RecentEntry6ActionPerformed

	private void jSplitPane1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jSplitPane1AncestorResized
        // Moved divider btw graphs and routine panels
        jSplitPane1.setDividerLocation(0.5);
	}//GEN-LAST:event_jSplitPane1AncestorResized

	private void jSplitPane2AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jSplitPane2AncestorResized
        // Moved divider btw routine table and routine profile panel
        jSplitPane2.setDividerLocation(0.75);
	}//GEN-LAST:event_jSplitPane2AncestorResized

	private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // Clicked on an entry inside stack trace panel
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            int previousSelectedIndex = jTable1.getSelectedRow();
            Routine previousSelectedRtn = ((RoutinesTableModel) jTable1.getModel()).getRoutine(jTable1.convertRowIndexToModel(previousSelectedIndex));
            int index = jList1.getSelectedIndex();
            if (index < 0) {
                return;
            }
            //System.out.println("jList1 double-clicked: selected index: " + index);
            Routine r = ((StackTraceListModel) jList1.getModel()).getContext(index);
            int modelIndex = ((RoutinesTableModel) jTable1.getModel()).getIndex(r);
            if (modelIndex < 0) {
                //routine is collapsed
                ContextualizedRoutineInfo urtn = ((RoutineContext) r).getOverallRoutine();
                if (urtn.getCollapsed()) {
                    ((RoutinesTableModel) jTable1.getModel()).expandRoutine(urtn);
                }
                modelIndex = ((RoutinesTableModel) jTable1.getModel()).getIndex(r);
                if (modelIndex < 0) {
                    modelIndex = ((RoutinesTableModel) jTable1.getModel()).getIndex(previousSelectedRtn);
                    int viewIndex = jTable1.convertRowIndexToView(modelIndex);
                    jTable1.setRowSelectionInterval(viewIndex, viewIndex);
                    JOptionPane.showMessageDialog(this, "The selected routine is filtererd or blacklisted\nand cannot be displayed");
                    return;
                }
            }
            int viewIndex = jTable1.convertRowIndexToView(modelIndex);
            if (viewIndex < 0) {
                resetRoutineTableFilter();
                viewIndex = jTable1.convertRowIndexToView(modelIndex);
                if (viewIndex < 0) {
                    modelIndex = ((RoutinesTableModel) jTable1.getModel()).getIndex(previousSelectedRtn);
                    viewIndex = jTable1.convertRowIndexToView(modelIndex);
                    jTable1.setRowSelectionInterval(viewIndex, viewIndex);
                    JOptionPane.showMessageDialog(this, "The selected routine is blacklisted\nand cannot be displayed");
                    return;
                }
            }
            jTable1.setRowSelectionInterval(viewIndex, viewIndex);
        }
	}//GEN-LAST:event_jList1MouseClicked

	private void ReloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReloadButtonActionPerformed
        // Reload button
        try {
            File file;
            if (report == null) { // Reload last recent report
                ArrayList<File> r = Main.getRecentFiles();
                if (r.size() <= 0) {
                    return;
                }
                file = r.get(0);
            } else { // Reload current report
                file = new File(this.report.getName());
            }
            loadReport(file);
            Main.addRecentFile(file);
            this.refreshRecentFiles();
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Couldn't open the selected file", "Error",
                javax.swing.JOptionPane.ERROR_MESSAGE);
            //e.printStackTrace();
        }

	}//GEN-LAST:event_ReloadButtonActionPerformed

	private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setExtendedState(MAXIMIZED_BOTH);
	}//GEN-LAST:event_formWindowOpened

	private void ExportRoutineProfileEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportRoutineProfileEntryActionPerformed

        // Menu: File > Export > Routine profile 
        if (this.rtn_info == null) {
            return;
        }

        Iterator it = rtn_info.getInputTuplesIterator();
        try {

            File tmp = new File(this.report.getName() + "-"
                + this.rtn_info.getName() + ".dat");

            JFileChooser chooser = new javax.swing.JFileChooser();
            String lastReportPath = Main.getLastReportPath();
            if (!lastReportPath.equals("")) {
                chooser.setCurrentDirectory(new File(lastReportPath));
            }

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Routine profile", "dat");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setSelectedFile(tmp);
            int choice = chooser.showSaveDialog(this);

            if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {

                tmp = chooser.getSelectedFile();
                tmp.createNewFile();
                PrintWriter out = new PrintWriter(new FileWriter(tmp));

                out.println("# RMS CUMUL_MIN CUMUL_MAX CUMUL_SUM "
                    + "REAL_SUM OCC SELF_SUM SELF_MIN SELF_MAX AM");

                while (it.hasNext()) {

                    Input s = (Input) it.next();
                    out.print(s.getSize() + " " + (int) s.getMinCumulativeCost()
                        + " " + (int) s.getMaxCumulativeCost()
                        + " " + (long) s.getSumCumulativeCost()
                        + " " + (long) s.getSumCumulativeRealCost()
                        + " " + (long) s.getCalls()
                        + " " + (int) s.getMinSelfCost()
                        + " " + (int) s.getMaxSelfCost()
                        + " " + (long) s.getSumSelfCost()
                    );
                    out.format(" %.5f%n", rtn_info.getAmortizedValue(s));

                }
                out.close();

            }

        } catch (java.io.IOException e) {

            JOptionPane.showMessageDialog(this, "Error during export :(",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        }
	}//GEN-LAST:event_ExportRoutineProfileEntryActionPerformed

	private void ExportProgramProfileEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportProgramProfileEntryActionPerformed

        // Menu: File > Export > Program profile
        ArrayList<Routine> els = this.report.getRoutines();
        try {

            File tmp = new File(this.report.getName() + ".dat");

            JFileChooser chooser = new javax.swing.JFileChooser();
            String lastReportPath = Main.getLastReportPath();
            if (!lastReportPath.equals("")) {
                chooser.setCurrentDirectory(new File(lastReportPath));
            }

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Program profile", "dat");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setSelectedFile(tmp);
            int choice = chooser.showSaveDialog(this.getParent());

            if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {

                tmp = chooser.getSelectedFile();
                tmp.createNewFile();
                PrintWriter out = new PrintWriter(new FileWriter(tmp));

                out.println("# N_TUPLES TOTAL_CALLS INPUT_MIN INPUT_MAX COST_BALANCE_POINT \"NAME\"");

                for (Routine el : els) {
                    out.println(el.getInputTuplesCount() + " "
                        + el.getTotalCalls() + " "
                        + el.getMinInput() + " "
                        + el.getMaxInput() + " "
                        + el.getCostBalancePoint() + " \""
                        + el.getName() + "\""
                    );
                }
                out.close();
            }

        } catch (java.io.IOException e) {

            JOptionPane.showMessageDialog(this, "Error during export :(",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

	}//GEN-LAST:event_ExportProgramProfileEntryActionPerformed

	private void ExportProgramStatsEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportProgramStatsEntryActionPerformed

	}//GEN-LAST:event_ExportProgramStatsEntryActionPerformed

	private void GraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraphButtonActionPerformed
        // Graph button
        if (GraphButton.isSelected()) {
            GraphMenu.show(GraphButton, 0, GraphButton.getHeight());
        } else {
            GraphMenu.setVisible(false);
        }
	}//GEN-LAST:event_GraphButtonActionPerformed

	private void GraphMenuPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_GraphMenuPopupMenuWillBecomeInvisible
        GraphButton.setSelected(false);
	}//GEN-LAST:event_GraphMenuPopupMenuWillBecomeInvisible

	private void CostPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CostPlotButtonActionPerformed
        // Graph menu button: cost plot
        editGraph(COST_PLOT, CostPlotButton.isSelected());
	}//GEN-LAST:event_CostPlotButtonActionPerformed

	private void MMMPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MMMPlotButtonActionPerformed
        // Graph menu button: MMM plot
        editGraph(MMM_PLOT, MMMPlotButton.isSelected());
	}//GEN-LAST:event_MMMPlotButtonActionPerformed

	private void TotalCostPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalCostPlotButtonActionPerformed
        // Graph menu button: total cost plot
        editGraph(TOTALCOST_PLOT, TotalCostPlotButton.isSelected());
	}//GEN-LAST:event_TotalCostPlotButtonActionPerformed

	private void AmortizedPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmortizedPlotButtonActionPerformed
        // Graph menu button: amortized plot
        editGraph(AMORTIZED_PLOT, AmortizedPlotButton.isSelected());
	}//GEN-LAST:event_AmortizedPlotButtonActionPerformed

	private void RatioPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RatioPlotButtonActionPerformed
        // Graph menu button: ratio plot
        editGraph(RATIO_PLOT, RatioPlotButton.isSelected());
	}//GEN-LAST:event_RatioPlotButtonActionPerformed

	private void VarPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VarPlotButtonActionPerformed
        // Graph menu button: var plot
        editGraph(VAR_PLOT, VarPlotButton.isSelected());
	}//GEN-LAST:event_VarPlotButtonActionPerformed

	private void FrequencyPlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FrequencyPlotButtonActionPerformed
        // Graph menu button: freq plot
        editGraph(FREQ_PLOT, FrequencyPlotButton.isSelected());
	}//GEN-LAST:event_FrequencyPlotButtonActionPerformed

	private void CostPlotMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CostPlotMenuEntryActionPerformed
        // Graph menu button: cost plot
        editGraph(COST_PLOT, CostPlotMenuEntry.isSelected());
	}//GEN-LAST:event_CostPlotMenuEntryActionPerformed

	private void MMMPlotMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MMMPlotMenuEntryActionPerformed
        // Graph menu button: MMM plot
        editGraph(MMM_PLOT, MMMPlotMenuEntry.isSelected());
	}//GEN-LAST:event_MMMPlotMenuEntryActionPerformed

	private void TotalCostPlotMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalCostPlotMenuEntryActionPerformed
        // Graph menu button: total cost plot
        editGraph(TOTALCOST_PLOT, TotalCostPlotMenuEntry.isSelected());
	}//GEN-LAST:event_TotalCostPlotMenuEntryActionPerformed

	private void AmortizedPlotMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmortizedPlotMenuEntryActionPerformed
        // Graph menu button: amortized plot
        editGraph(AMORTIZED_PLOT, AmortizedPlotMenuEntry.isSelected());
	}//GEN-LAST:event_AmortizedPlotMenuEntryActionPerformed

	private void RatioPlotMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RatioPlotMenuEntryActionPerformed
        // Graph menu button: ratio plot
        editGraph(RATIO_PLOT, RatioPlotMenuEntry.isSelected());
	}//GEN-LAST:event_RatioPlotMenuEntryActionPerformed

	private void VarianceCostPlotMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VarianceCostPlotMenuEntryActionPerformed
        // Graph menu button: var plot
        editGraph(VAR_PLOT, VarianceCostPlotMenuEntry.isSelected());
	}//GEN-LAST:event_VarianceCostPlotMenuEntryActionPerformed

	private void FrequencyPlotMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FrequencyPlotMenuEntryActionPerformed
        // Graph menu button: freq plot
        editGraph(FREQ_PLOT, FrequencyPlotMenuEntry.isSelected());
	}//GEN-LAST:event_FrequencyPlotMenuEntryActionPerformed

    private void chooseSourceDirectory() {

        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Set source code directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        String lastSourceDir = Main.getLastSourceDir();
        if (lastSourceDir != null && !lastSourceDir.equals("")) {
            chooser.setCurrentDirectory((new java.io.File(lastSourceDir)));
        }

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            loading = true;

            source_dir = chooser.getSelectedFile().getPath();
            Main.setLastSourceDir(chooser.getSelectedFile().getPath());
            //System.out.println("Selected directory: " + source_dir);
            final ctagsParser c = new ctagsParser(chooser.getSelectedFile());
            final ProgressDialog p = new ProgressDialog(this, true);
            SwingWorker worker = new SwingWorker<Boolean, Void>() {

                @Override
                public Boolean doInBackground() {

                    sym = c.getSymbols();
                    files = c.getFiles();
                    jTextField2.setEnabled(true);
                    jButton11.setEnabled(true);
                    p.setVisible(false);
                    jToggleButton2.setEnabled(true);
                    loading = false;

                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {

                            jComboBox1.setModel(new ListFilesEditorModel<String>(files));
                            jComboBox1.setEnabled(true);

                            if (!RoutineLabel.getText().equals("")) {
                                //System.out.println("Function selected " + jLabel7.getText());
                                loadFunctionInTextEditor(RoutineLabel.getText());
                            } else {

                                try {
                                    textArea.read(new StringReader(""), null);
                                } catch (IOException ex) {
                                    //
                                }

                            }

                        }
                    });

                    return true;

                }

            };
            worker.execute();
            p.setVisible(true);
        }

    }

	private void SetSourceDirMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetSourceDirMenuEntryActionPerformed
        chooseSourceDirectory();
	}//GEN-LAST:event_SetSourceDirMenuEntryActionPerformed

	private void SourceDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceDirectoryButtonActionPerformed
        chooseSourceDirectory();
	}//GEN-LAST:event_SourceDirectoryButtonActionPerformed

	private void SourceMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceMenuEntryActionPerformed
        if (SourceMenuEntry.isSelected()) {
            showTextEditor(true);
        } else {
            showTextEditor(false);
        }
	}//GEN-LAST:event_SourceMenuEntryActionPerformed

	private void SourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SourceButtonActionPerformed

        if (LinkButton.isSelected()) {
            if (!editor_visible) {
                showTextEditor(true);
            } else {
                showTextEditor(false);
            }
        }

	}//GEN-LAST:event_SourceButtonActionPerformed

	private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        if (loading) {
            return;
        }
        String file = (String) jComboBox1.getSelectedItem();
        //System.out.println(file);

        File f = new File(file);
        try {

            BufferedReader r = new BufferedReader(new FileReader(f));
            textArea.read(r, null);
            r.close();

        } catch (Exception ex) {
            //
        }

        if (highlight_line != null) {
            textArea.removeLineHighlight(highlight_line);
        }
        textArea.setCaretPosition(0);

	}//GEN-LAST:event_jComboBox1ActionPerformed

	private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        // Search routine in source code
        findRoutineByNameInSource();

	}//GEN-LAST:event_jButton11ActionPerformed

	private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed

        // Search routine in source code
        findRoutineByNameInSource();

	}//GEN-LAST:event_jTextField2ActionPerformed

	private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed

        // Load function code selected in the routine table
        if (jToggleButton2.isSelected()) {
            linked_editor = true;
            if (!RoutineLabel.getText().equals("")) {
                loadFunctionInTextEditor(RoutineLabel.getText());
            }
        } else {
            linked_editor = false;
        }

	}//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        loading_routine = true;
        jTable1ValueChanged(null);
        loading_routine = false;
    }//GEN-LAST:event_jTable1MouseClicked

    private void FilterContextsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterContextsButtonActionPerformed
        // Contexts filter button (corner contexts table)
        if (rtn_info != null) {
            RoutinesTableModel m = (RoutinesTableModel) jTable1.getModel();
            ArrayList<String> liblist = report.getLibList();
            (new RoutinesFilterDialog(this, true, liblist,
                contexts_filter_criteria, false, m.getColumnConfig()))
                .setVisible(true);
        }
    }//GEN-LAST:event_FilterContextsButtonActionPerformed

    private void ExportInputVolumeEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportInputVolumeEntryActionPerformed

        // Menu: File > Export > Input volume...
        if (report == null) {
            return;
        }
        report.sortRoutinesByExternalInput();
        ArrayList<Routine> rr = report.getRoutines();

        try {

            File tmp = new File(this.report.getName() + "_input_volume.dat");

            JFileChooser chooser = new javax.swing.JFileChooser();
            String lastReportPath = Main.getLastReportPath();
            if (!lastReportPath.equals("")) {
                chooser.setCurrentDirectory(new File(lastReportPath));
            }

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Program profile", "dat");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setSelectedFile(tmp);
            int choice = chooser.showSaveDialog(this.getParent());

            if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {

                tmp = chooser.getSelectedFile();
                tmp.createNewFile();
                PrintWriter out = new PrintWriter(new FileWriter(tmp));

                out.format("# Percent Input_Volume*100 %n");
                for (int i = 0; i < rr.size(); i++) {

                    Routine r = rr.get(i);
                    double x = ((double) i + 1) / (((double) rr.size()) / 100);
                    double y = (1 - r.getRatioSumRmsRvms()) * 100;

                    out.format("%.1f %.1f%n", x, y);
                }
                out.close();

            }

        } catch (java.io.IOException e) {

            JOptionPane.showMessageDialog(this, "Error during export :(",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_ExportInputVolumeEntryActionPerformed

    private void ExportRichnessEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportRichnessEntryActionPerformed

        // Menu: File > Export > profile routine richness...
        if (report == null) {
            return;
        }
        report.sortRoutinesByRatioTuples();
        ArrayList<Routine> rr = report.getRoutines();

        try {

            File tmp = new File(this.report.getName() + "_profile_richness.dat");

            JFileChooser chooser = new javax.swing.JFileChooser();
            String lastReportPath = Main.getLastReportPath();
            if (!lastReportPath.equals("")) {
                chooser.setCurrentDirectory(new File(lastReportPath));
            }

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Program profile", "dat");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setSelectedFile(tmp);
            int choice = chooser.showSaveDialog(this.getParent());

            if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {

                tmp = chooser.getSelectedFile();
                tmp.createNewFile();
                PrintWriter out = new PrintWriter(new FileWriter(tmp));

                out.format("# Percent Routine_Profile_Richness%n");
                //out.format("0 100%n");
                for (int i = 0; i < rr.size(); i++) {

                    Routine r = rr.get(i);
                    double x = ((double) i + 1) / (((double) rr.size()) / 100);
                    double y = r.getRatioRvmsRms() * 100;

                    out.format("%.1f %.1f%n", x, y);
                }
                out.close();

            }

        } catch (java.io.IOException e) {

            JOptionPane.showMessageDialog(this, "Error during export :(",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_ExportRichnessEntryActionPerformed

    private void ExportThreadInputEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportThreadInputEntryActionPerformed

        // Menu: File > Export > thread input...
        if (report == null) {
            return;
        }
        report.sortRoutinesByThreadInput();
        ArrayList<Routine> rr = report.getRoutines();

        try {

            File tmp = new File(this.report.getName() + "_thread_input.dat");

            JFileChooser chooser = new javax.swing.JFileChooser();
            String lastReportPath = Main.getLastReportPath();
            if (!lastReportPath.equals("")) {
                chooser.setCurrentDirectory(new File(lastReportPath));
            }

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Program profile", "dat");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setSelectedFile(tmp);
            int choice = chooser.showSaveDialog(this.getParent());

            if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {

                tmp = chooser.getSelectedFile();
                tmp.createNewFile();
                PrintWriter out = new PrintWriter(new FileWriter(tmp));

                out.format("# Percent Thread_Input%n");
                out.format("0 100%n");
                for (int i = 0; i < rr.size(); i++) {

                    Routine r = rr.get(i);
                    double x = ((double) i + 1) / (((double) rr.size()) / 100);
                    double y = r.getRatioThreadInput() * 100;

                    out.format("%.1f %.1f%n", x, y);
                }
                out.close();

            }

        } catch (java.io.IOException e) {

            JOptionPane.showMessageDialog(this, "Error during export :(",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_ExportThreadInputEntryActionPerformed

    private void extractInputStats() {

    }

    private void ExportSyscallInputEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportSyscallInputEntryActionPerformed

        // Menu: File > Export > external input...
        if (report == null) {
            return;
        }
        report.sortRoutinesBySyscallInput();
        ArrayList<Routine> rr = report.getRoutines();

        try {

            File tmp = new File(this.report.getName() + "_external_input.dat");

            JFileChooser chooser = new javax.swing.JFileChooser();
            String lastReportPath = Main.getLastReportPath();
            if (!lastReportPath.equals("")) {
                chooser.setCurrentDirectory(new File(lastReportPath));
            }

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Program profile", "dat");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setSelectedFile(tmp);
            int choice = chooser.showSaveDialog(this.getParent());

            if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {

                tmp = chooser.getSelectedFile();
                tmp.createNewFile();
                PrintWriter out = new PrintWriter(new FileWriter(tmp));

                out.format("# Percent External_input%n");
                out.format("0 100%n");
                for (int i = 0; i < rr.size(); i++) {

                    Routine r = rr.get(i);
                    double x = ((double) i + 1) / (((double) rr.size()) / 100);
                    double y = r.getRatioSyscallInput() * 100;

                    out.format("%.1f %.1f%n", x, y);
                }
                out.close();

            }

        } catch (java.io.IOException e) {

            JOptionPane.showMessageDialog(this, "Error during export :(",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_ExportSyscallInputEntryActionPerformed

    private void ExportInducedAccessEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportInducedAccessEntryActionPerformed

        // Menu: File > Export > induced accesses...
        if (report == null) {
            return;
        }
        report.sortRoutinesByDynamicInput();
        ArrayList<Routine> rr = report.getRoutines();

        try {

            File tmp = new File(this.report.getName() + "_induced_accesses.dat");

            JFileChooser chooser = new javax.swing.JFileChooser();
            String lastReportPath = Main.getLastReportPath();
            if (!lastReportPath.equals("")) {
                chooser.setCurrentDirectory(new File(lastReportPath));
            }

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Program profile", "dat");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setSelectedFile(tmp);
            int choice = chooser.showSaveDialog(this.getParent());

            if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {

                tmp = chooser.getSelectedFile();
                tmp.createNewFile();
                PrintWriter out = new PrintWriter(new FileWriter(tmp));

                out.format("# Percent External_input Thread_input%n");

                int k = 1;
                for (Routine r : rr) {
                    if (r.getInputTuplesCount() < 5) {
                        continue;
                    }
 
                    double x = k++;
                    double y = r.getRatioSyscallInput() * 100;
                    double z = r.getRatioThreadInput() * 100;

                    out.format("%.1f %.1f %.1f%n", x, y, z);
                }
                out.close();

            }

        } catch (java.io.IOException e) {

            JOptionPane.showMessageDialog(this, "Error during export :(",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_ExportInducedAccessEntryActionPerformed

    private void ExportSelfInducedAccessEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportSelfInducedAccessEntryActionPerformed

        // Menu: File > Export > self induced accesses...
        if (report == null) {
            return;
        }

        try {

            File tmp = new File(this.report.getName() + "_self_induced_accesses.dat");

            JFileChooser chooser = new javax.swing.JFileChooser();
            String lastReportPath = Main.getLastReportPath();
            if (!lastReportPath.equals("")) {
                chooser.setCurrentDirectory(new File(lastReportPath));
            }

            FileNameExtensionFilter filter = new FileNameExtensionFilter("Program profile", "dat");
            chooser.setFileFilter(filter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.setSelectedFile(tmp);
            int choice = chooser.showSaveDialog(this.getParent());

            if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {

                tmp = chooser.getSelectedFile();
                tmp.createNewFile();
                PrintWriter out = new PrintWriter(new FileWriter(tmp));

                out.format("#Self_External_input Self_Thread_input%n");

                out.println(report.getTotalSelfSyscallInput() + " "
                    + report.getTotalSelfThreadInput());

                double x = report.getTotalSelfSyscallInput() + report.getTotalSelfThreadInput();
                double y = (report.getTotalSelfSyscallInput() / x) * 100;
                double z = (report.getTotalSelfThreadInput() / x) * 100;

                out.format("%.1f %.1f%n", y, z);

                out.close();

            }

        } catch (java.io.IOException e) {

            JOptionPane.showMessageDialog(this, "Error during export :(",
                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_ExportSelfInducedAccessEntryActionPerformed

    private void FitMenuEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FitMenuEntryActionPerformed

        // add fitting log
        if (this.report == null) {
            return;
        }

        loading = true;
        final ProgressDialog p = new ProgressDialog(this, true);
        SwingWorker worker;
        worker = new SwingWorker<Boolean, Void>() {
            
            @Override
            public Boolean doInBackground() {

                boolean failed = false;

                try {
                    report.addFitter(null);
                    if (report.hasFitter()) {
                        FitButton.setEnabled(true);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    failed = true;
                }

                p.setVisible(false);
                loading = false;

                if (failed || report.hasFatalError()) {
                    return false;
                }

                return true;
            }

        };
        worker.execute();
        p.setVisible(true);
    }//GEN-LAST:event_FitMenuEntryActionPerformed

    private void FitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FitButtonActionPerformed
        showFittingData(!this.fitting_mode);
    }//GEN-LAST:event_FitButtonActionPerformed

    private void FilterRoutinesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterRoutinesButtonActionPerformed
        // Routine filter button (corner routine table)
        if (report != null) {
            RoutinesTableModel m = (RoutinesTableModel) jTable1.getModel();
            ArrayList<String> liblist = report.getLibList();
            (new RoutinesFilterDialog(this, true, liblist, routines_filter_criteria,
                m.getColumnConfig())).setVisible(true);
        }
    }//GEN-LAST:event_FilterRoutinesButtonActionPerformed

    public boolean isVisibleFittingData() {
        return this.fitting_mode;
    }

    private void showFittingData(boolean enable) {

        this.fitting_mode = enable;

        if (enable) {

            jSplitPane2.setRightComponent(null);
            RoutinesTableModel m = (RoutinesTableModel) jTable1.getModel();
            m.updateColumns();
            m.refresh();

            routines_filter_criteria[4] = "0.1";
            routines_filter_criteria[5] = "100";
            routines_filter_criteria[6] = "0.92";
            routines_filter_criteria[7] = "Hide";
            refreshRoutinesTableFilter();

        } else {
            RoutinesTableModel m = (RoutinesTableModel) jTable1.getModel();
            m.updateColumns();
            m.refresh();
            jSplitPane2.setRightComponent(jTabbedPane1);
            jSplitPane2.setResizeWeight(0.9);
            jSplitPane2.setPreferredSize(new java.awt.Dimension(300, 300));
            jSplitPane2.setDividerLocation(0.75);

            routines_filter_criteria[4] = null;
            routines_filter_criteria[5] = null;
            routines_filter_criteria[6] = null;
            routines_filter_criteria[7] = null;
            refreshRoutinesTableFilter();
        }

    }

    private void resetRoutineTableFilter() {

        // reset filter over routine table
        routines_filter_criteria = new String[8];
        routines_filter_criteria[0] = null;
        routines_filter_criteria[1] = null;
        routines_filter_criteria[2] = null;
        routines_filter_criteria[3] = "5";
        routines_filter_criteria[4] = null;
        routines_filter_criteria[5] = null;
        routines_filter_criteria[6] = null;
        routines_filter_criteria[7] = null;

        refreshRoutinesTableFilter();

    }

    private void resetContextsTableFilter() {

        // reset filter over routine table
        contexts_filter_criteria = new String[4];
        contexts_filter_criteria[0] = null;
        contexts_filter_criteria[1] = null;
        contexts_filter_criteria[2] = null;
        contexts_filter_criteria[3] = "5";
        refreshContextsTableFilter();

    }

    protected void refreshRoutinesTableFilter() {
        setRoutinesTableFilter(routines_filter_criteria);
    }

    protected void refreshContextsTableFilter() {
        setContextsTableFilter(contexts_filter_criteria);
    }

    protected void setRoutinesTableFilter(String[] criteria) {

        routines_filter_criteria = criteria;
        java.util.ArrayList<String> blacklist = Main.getBlackList();

        List<RowFilter<TableModel, Integer>> filters = new ArrayList<RowFilter<TableModel, Integer>>();

        RoutinesTableModel m = (RoutinesTableModel) jTable1.getModel();

        // Filtering based on blacklist
        if (Main.getBlackListEnabled() && blacklist.size() > 0) {

            List<RowFilter<TableModel, Integer>> blacklist_filters = new ArrayList<RowFilter<TableModel, Integer>>();
            for (String blacklist1 : blacklist) {
                RowFilter<TableModel, Integer> blacklist_filter;
                try {
                    blacklist_filter = RowFilter.regexFilter(blacklist1.replace(".", "\\."), 0);
                }catch (java.util.regex.PatternSyntaxException e) {
                    return;
                }
                blacklist_filters.add(RowFilter.notFilter(blacklist_filter));
            }

            RowFilter<TableModel, Integer> f = RowFilter.andFilter(blacklist_filters);
            filters.add(f);
        }

        // Filtering based on % time
        int index = m.getIndexOfColumn(COLUMN.P_COST);
        if (criteria[0] != null && index >= 0) {

            List<RowFilter<TableModel, Integer>> timeperc_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> timeperc_equal_filter;
            RowFilter<TableModel, Integer> timeperc_greater_filter;
            try {
                timeperc_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[0]), index);
                timeperc_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[0]), index);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            timeperc_filters.add(timeperc_equal_filter);
            timeperc_filters.add(timeperc_greater_filter);
            RowFilter<TableModel, Integer> f = javax.swing.RowFilter.orFilter(timeperc_filters);
            filters.add(f);
        }

        // Filtering based on library name
        index = m.getIndexOfColumn(COLUMN.LIB);
        if (criteria[1] != null && index >= 0) {

            List<RowFilter<TableModel, Integer>> lib_filters = new ArrayList<RowFilter<TableModel, Integer>>(1);
            RowFilter<TableModel, Integer> lib_filter;
            try {
                lib_filter = javax.swing.RowFilter.regexFilter(criteria[1], index);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            lib_filters.add(lib_filter);
            RowFilter<TableModel, Integer> f4 = RowFilter.andFilter(lib_filters);
            filters.add(f4);
        }

        // Filtering based on % of calls
        index = m.getIndexOfColumn(COLUMN.P_CALL);
        if (criteria[2] != null && index >= 0) {

            List<RowFilter<TableModel, Integer>> callsperc_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            javax.swing.RowFilter<TableModel, Integer> callsperc_equal_filter;
            javax.swing.RowFilter<TableModel, Integer> callsperc_greater_filter;
            try {
                callsperc_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[2]), index);
                callsperc_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[2]), index);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            callsperc_filters.add(callsperc_equal_filter);
            callsperc_filters.add(callsperc_greater_filter);
            RowFilter<TableModel, Integer> f5 = RowFilter.orFilter(callsperc_filters);
            filters.add(f5);
        }

        // Filtering based on # rms
        index = m.getIndexOfColumn(COLUMN.N_INPUT);
        if (criteria[3] != null && index >= 0) {

            List<RowFilter<TableModel, Integer>> avgratio_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> avgratio_equal_filter;
            RowFilter<TableModel, Integer> avgratio_greater_filter;
            try {
                avgratio_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[3]), index);
                avgratio_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[3]), index);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            avgratio_filters.add(avgratio_equal_filter);
            avgratio_filters.add(avgratio_greater_filter);
            RowFilter<TableModel, Integer> f6 = RowFilter.orFilter(avgratio_filters);
            filters.add(f6);
        }

        // Filtering based b bound values
        index = m.getIndexOfColumn(COLUMN.FIT_B);
        if (criteria[4] != null && criteria[5] != null && index >= 0) {

            List<RowFilter<TableModel, Integer>> avgratio_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> avgratio_equal_filter;
            RowFilter<TableModel, Integer> avgratio_greater_filter;
            RowFilter<TableModel, Integer> avgratio_lesser_filter;
            try {

                avgratio_lesser_filter = RowFilter
                    .numberFilter(RowFilter.ComparisonType.AFTER,
                        Double.parseDouble(criteria[4]), index);
                avgratio_greater_filter = RowFilter
                    .numberFilter(RowFilter.ComparisonType.BEFORE,
                        Double.parseDouble(criteria[5]), index);

            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }

            avgratio_filters.add(avgratio_greater_filter);
            avgratio_filters.add(avgratio_lesser_filter);
            RowFilter<TableModel, Integer> f = RowFilter.andFilter(avgratio_filters);
            filters.add(f);
        }

        // Filtering fitting quality
        index = m.getIndexOfColumn(COLUMN.FIT_R2);
        if (criteria[6] != null && index >= 0) {

            List<RowFilter<TableModel, Integer>> avgratio_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> avgratio_equal_filter;
            RowFilter<TableModel, Integer> avgratio_greater_filter;
            try {

                avgratio_equal_filter = RowFilter
                    .numberFilter(RowFilter.ComparisonType.EQUAL,
                        Double.parseDouble(criteria[6]), index);
                avgratio_greater_filter = RowFilter
                    .numberFilter(RowFilter.ComparisonType.AFTER,
                        Double.parseDouble(criteria[6]), index);

            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            avgratio_filters.add(avgratio_equal_filter);
            avgratio_filters.add(avgratio_greater_filter);
            RowFilter<TableModel, Integer> f = RowFilter.orFilter(avgratio_filters);
            filters.add(f);
        }

        // Filtering unfitted routine
        index = m.getIndexOfColumn(COLUMN.FIT_A);
        if (criteria[7] != null && index >= 0) {

            List<RowFilter<TableModel, Integer>> avgratio_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> avgratio_equal_filter;
            try {

                avgratio_equal_filter = RowFilter
                    .numberFilter(RowFilter.ComparisonType.NOT_EQUAL,
                        0.0, index);

            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            avgratio_filters.add(avgratio_equal_filter);
            RowFilter<TableModel, Integer> f = RowFilter.orFilter(avgratio_filters);
            filters.add(f);
        }

        routines_table_sorter.setRowFilter(RowFilter.andFilter(filters));
    }

    protected void setContextsTableFilter(String[] criteria) {

        contexts_filter_criteria = criteria;
        java.util.ArrayList<String> blacklist = Main.getBlackList();

        List<RowFilter<TableModel, Integer>> filters = new ArrayList<RowFilter<TableModel, Integer>>(4);

        // Filtering based on blacklist
        if (Main.getBlackListEnabled() && blacklist.size() > 0) {

            List<RowFilter<TableModel, Integer>> blacklist_filters = new ArrayList<RowFilter<TableModel, Integer>>();
            for (String blacklist1 : blacklist) {
                RowFilter<TableModel, Integer> blacklist_filter;
                try {
                    blacklist_filter = RowFilter.regexFilter(blacklist1.replace(".", "\\."), 0);
                }catch (java.util.regex.PatternSyntaxException e) {
                    return;
                }
                blacklist_filters.add(RowFilter.notFilter(blacklist_filter));
            }

            RowFilter<TableModel, Integer> f = RowFilter.andFilter(blacklist_filters);
            filters.add(f);
        }

        // Filtering based on % time
        if (criteria[0] != null) {

            List<RowFilter<TableModel, Integer>> timeperc_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> timeperc_equal_filter;
            RowFilter<TableModel, Integer> timeperc_greater_filter;
            try {
                timeperc_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[0]), 4);
                timeperc_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[0]), 4);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            timeperc_filters.add(timeperc_equal_filter);
            timeperc_filters.add(timeperc_greater_filter);
            RowFilter<TableModel, Integer> f = javax.swing.RowFilter.orFilter(timeperc_filters);
            filters.add(f);
        }

        // Filtering based on library name
        if (criteria[1] != null) {

            List<RowFilter<TableModel, Integer>> lib_filters = new ArrayList<RowFilter<TableModel, Integer>>(1);
            RowFilter<TableModel, Integer> lib_filter;
            try {
                lib_filter = javax.swing.RowFilter.regexFilter(criteria[1], 1);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            lib_filters.add(lib_filter);
            RowFilter<TableModel, Integer> f4 = RowFilter.andFilter(lib_filters);
            filters.add(f4);
        }

        // Filtering based on % of calls
        if (criteria[2] != null) {

            List<RowFilter<TableModel, Integer>> callsperc_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            javax.swing.RowFilter<TableModel, Integer> callsperc_equal_filter;
            javax.swing.RowFilter<TableModel, Integer> callsperc_greater_filter;
            try {
                callsperc_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[2]), 7);
                callsperc_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[2]), 7);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            callsperc_filters.add(callsperc_equal_filter);
            callsperc_filters.add(callsperc_greater_filter);
            RowFilter<TableModel, Integer> f5 = RowFilter.orFilter(callsperc_filters);
            filters.add(f5);
        }

        // Filtering based on # rms
        if (criteria[3] != null) {

            List<RowFilter<TableModel, Integer>> avgratio_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> avgratio_equal_filter;
            RowFilter<TableModel, Integer> avgratio_greater_filter;
            try {
                avgratio_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[3]), 3);
                avgratio_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[3]), 3);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            avgratio_filters.add(avgratio_equal_filter);
            avgratio_filters.add(avgratio_greater_filter);
            RowFilter<TableModel, Integer> f6 = RowFilter.orFilter(avgratio_filters);
            filters.add(f6);
        }

        contexts_table_sorter.setRowFilter(RowFilter.andFilter(filters));

    }

    protected String[] getRmsTableFilter() {
        return rms_filter_criteria;
    }

    private void refreshPlotFilter() {
        for (GraphPanel g : graphs)
            g.refreshFilter();
    }

    protected void refreshRmsTableFilter() {
        setRmsTableFilter(rms_filter_criteria);
    }

    protected void setRmsTableFilter(String[] criteria) {

        this.rms_filter_criteria = criteria;
        refreshPlotFilter();
        if (criteria == null) {
            rms_table_sorter.setRowFilter(null); // no filters
        }
        ArrayList<RowFilter<TableModel, Integer>> filters = new ArrayList<RowFilter<TableModel, Integer>>(3);
        if (criteria[0] != null) {

            List<javax.swing.RowFilter<javax.swing.table.TableModel, Integer>> time_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel, Integer>>(2);
            RowFilter<javax.swing.table.TableModel, Integer> time_equal_filter;
            RowFilter<javax.swing.table.TableModel, Integer> time_greater_filter;
            try {
                time_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[0]), 3);
                time_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[0]), 3);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            time_filters.add(time_equal_filter);
            time_filters.add(time_greater_filter);
            RowFilter<TableModel, Integer> f = RowFilter.orFilter(time_filters);
            filters.add(f);

        }
        if (criteria[1] != null) {

            List<javax.swing.RowFilter<TableModel, Integer>> ratio_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> rms_equal_filter;
            RowFilter<TableModel, Integer> rms_greater_filter;
            try {
                rms_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[1]), 0);
                rms_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[1]), 0);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            ratio_filters.add(rms_equal_filter);
            ratio_filters.add(rms_greater_filter);
            RowFilter<TableModel, Integer> f = RowFilter.orFilter(ratio_filters);
            filters.add(f);
        }
        if (criteria[2] != null) {
            List<RowFilter<TableModel, Integer>> freq_filters = new ArrayList<RowFilter<TableModel, Integer>>(2);
            RowFilter<TableModel, Integer> freq_equal_filter;
            RowFilter<TableModel, Integer> freq_greater_filter;
            try {
                freq_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.parseDouble(criteria[2]), 4);
                freq_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, Double.parseDouble(criteria[2]), 4);
            } catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            freq_filters.add(freq_equal_filter);
            freq_filters.add(freq_greater_filter);
            RowFilter<TableModel, Integer> f = RowFilter.orFilter(freq_filters);
            filters.add(f);
        }
        rms_table_sorter.setRowFilter(javax.swing.RowFilter.andFilter(filters));
    }

    private void findRoutineByName() {
        String query = SearchField.getText().toLowerCase();
        if (jTable1.getRowCount() > 0 && !query.equals("")) {
            int i = jTable1.getSelectedRow();
            if (i < 0) {
                i = 0;
            }
            int size = jTable1.getRowCount();
            i++;
            if (i >= size) {
                i = 0;
            }
            int start = i;
            while (true) {
                Routine rtn = ((RoutinesTableModel) jTable1.getModel()).getRoutine(jTable1.convertRowIndexToModel(i));
                if (rtn.getName().toLowerCase().contains(query)) {
                    jTable1.setRowSelectionInterval(i, i);
                    if (jTable1.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
                        javax.swing.JViewport viewport = (javax.swing.JViewport) jTable1.getParent();
                        java.awt.Rectangle rect = jTable1.getCellRect(i, 0, true);
                        java.awt.Point pos = viewport.getViewPosition();
                        rect.translate(-pos.x, -pos.y);
                        viewport.scrollRectToVisible(rect);
                    }
                    return;
                }
                i++;
                if (i >= size) {
                    i = 0;
                }
                if (i == start) {
                    //not found
                    javax.swing.JOptionPane.showMessageDialog(this, "text not found");
                    return;
                }
            }
        }
    }

    private void findRoutineByNameInSource() {

        if (sym == null) {
            return;
        }
        String query = jTextField2.getText().toLowerCase();

        if (query.equals("")) {
            return;
        }

        Set s = sym.keySet();
        Object[] a = s.toArray();
        int index = source_index;

        //System.out.println(source_index);
        while (index < a.length) {

            String name = (String) a[index++];
            if (name.toLowerCase().contains(query)) {
                source_index = index;
                loadFunctionInTextEditor(name);
                return;
            }

        }

        if (source_index > 0) {

            index = 0;
            while (index < a.length && index < source_index) {

                String name = (String) a[index++];
                if (name.contains(query)) {
                    source_index = index;
                    loadFunctionInTextEditor(name);
                    return;
                }

            }
            source_index = 0;

        }

        javax.swing.JOptionPane.showMessageDialog(this, "text not found");

    }

    private void initGraph() {

        // Init graphs:
        for (GraphPanel.Type t : GraphPanel.Type.values()) {
            GraphPanel g = new GraphPanel(t, this);
            g.setPerformanceMonitor(perf);
            graphs.add(g);
            graphs_enabled.add(false);
        }

        ArrayList<GraphPanel.Type> graph_order = Main.getGraphOrder();
        // Reset graph order (addGraph will set this later)
        Main.setGraphOrder(new ArrayList<GraphPanel.Type>());
        for (GraphPanel.Type t : graph_order) {
            addGraph(t);
        }
    }

    private void editGraph(GraphPanel.Type t, boolean enable) {
        if (enable) 
            addGraph(t);
        else
            removeGraph(t);
    }
    
    private void addGraph(GraphPanel.Type t) {

        GraphPanel g = graphs.get(t.ordinal());
        graphs_enabled.set(t.ordinal(), true);
        switch (g.getGraphType()) {

            case COST_PLOT:
                CostPlotButton.setSelected(true);
                CostPlotMenuEntry.setSelected(true);
                break;

            case MMM_PLOT:
                MMMPlotButton.setSelected(true);
                MMMPlotMenuEntry.setSelected(true);
                break;

            case TOTALCOST_PLOT:
                TotalCostPlotButton.setSelected(true);
                TotalCostPlotMenuEntry.setSelected(true);
                break;

            case AMORTIZED_PLOT:
                AmortizedPlotButton.setSelected(true);
                AmortizedPlotMenuEntry.setSelected(true);
                break;

            case RATIO_PLOT:
                RatioPlotButton.setSelected(true);
                RatioPlotMenuEntry.setSelected(true);
                break;

            case VAR_PLOT:
                VarPlotButton.setSelected(true);
                VarianceCostPlotMenuEntry.setSelected(true);
                break;

            case FREQ_PLOT:
                FrequencyPlotButton.setSelected(true);
                FrequencyPlotMenuEntry.setSelected(true);
                break;
        }

        graph_visible++;

        ArrayList<GraphPanel.Type> go = Main.getGraphOrder();

        if (append_graph) {

            jPanel9.add(g);
            go.add(g.getGraphType());

        } else {

            Component[] l = jPanel9.getComponents();
            int i;
            for (i = 0; i < l.length; i++) {

                if (!(l[i] instanceof GraphPanel)) {
                    continue;
                }
                GraphPanel cg = (GraphPanel) l[i];
                if (cg.getGraphPriority() > g.getGraphPriority()) {
                    break;
                }

            }

            if (i >= l.length) {
                jPanel9.add(g);
            } else {
                jPanel9.add(g, i);
            }

            // Update graph order
            if (i >= go.size()) {
                go.add(g.getGraphType());
            } else {
                go.add(i, g.getGraphType());
            }

        }

        g.setVisible(true);
        g.setData(this.rtn_info);
        Main.setGraphOrder(go);
        adjustGraphLayout();

    }
    
    private void removeGraph(GraphPanel.Type t) {

        GraphPanel g = graphs.get(t.ordinal());
        graphs_enabled.set(t.ordinal(), false);
        switch (g.getGraphType()) {

            case COST_PLOT:
                jPanel9.remove(g);
                CostPlotButton.setSelected(false);
                CostPlotMenuEntry.setSelected(false);
                break;

            case MMM_PLOT:
                MMMPlotButton.setSelected(false);
                MMMPlotMenuEntry.setSelected(false);
                break;

            case TOTALCOST_PLOT:
                TotalCostPlotButton.setSelected(false);
                TotalCostPlotMenuEntry.setSelected(false);
                break;

            case AMORTIZED_PLOT:
                AmortizedPlotButton.setSelected(false);
                AmortizedPlotMenuEntry.setSelected(false);
                break;

            case RATIO_PLOT:
                TotalCostPlotButton.setSelected(false);
                RatioPlotMenuEntry.setSelected(false);
                break;

            case VAR_PLOT:
                VarPlotButton.setSelected(false);
                VarianceCostPlotMenuEntry.setSelected(false);
                break;

            case FREQ_PLOT:
                FrequencyPlotButton.setSelected(false);
                FrequencyPlotMenuEntry.setSelected(false);
                break;
        }

        // This does not work...
        //jPanel9.remove(g);
        // So:
        Component[] l = jPanel9.getComponents();
        ArrayList<GraphPanel.Type> graph_order = new ArrayList<GraphPanel.Type>();
        for (int i = 0; i < l.length; i++) {

            if (l[i] instanceof GraphPanel) {
                if (g.getGraphType() == ((GraphPanel) l[i]).getGraphType()) {
                    jPanel9.remove(i);
                } else {
                    graph_order.add(((GraphPanel) l[i]).getGraphType());
                }
            }

        }

        graph_visible--;
        adjustGraphLayout();
        g.setVisible(false);
        Main.setGraphOrder(graph_order);

    }

    private void adjustGraphLayout() {

        if (editor_visible) {

            jPanel9.setLayout(new BoxLayout(jPanel9, BoxLayout.Y_AXIS));
            jPanel9.revalidate();
            return;

        }

        if (graph_visible == 4) {
            if (fake == null) {
                fake = new JPanel();
            }
            jPanel9.add(fake);
        } else if (graph_visible == 7) {
            if (fake == null) {
                fake = new JPanel();
            }
            if (fake2 == null) {
                fake2 = new JPanel();
            }
            jPanel9.add(fake);
            jPanel9.add(fake2);
        } else {
            if (fake != null) {
                jPanel9.remove(fake);
            }
            if (fake2 != null) {
                jPanel9.remove(fake2);
            }
            fake = null;
            fake2 = null;
        }

        if (graph_visible <= 3) {
            jPanel9.setLayout(new java.awt.GridLayout(1, 3));
        } else if (graph_visible <= 6) {
            jPanel9.setLayout(new java.awt.GridLayout(2, 3));
        } else if (graph_visible <= 9) {
            jPanel9.setLayout(new java.awt.GridLayout(3, 3));
        }

        jPanel9.revalidate();

    }

    private boolean isCtagsInstalled() {

        ProcessBuilder pb = new ProcessBuilder(Main.getCtagsPath(), "--version");
        try {

            Process p = pb.start();
            p.waitFor();
            int exit = p.exitValue();
            if (exit == 0) {
                return true;
            }

        } catch (IOException ex) {
            System.out.println("Fail: error during check ctags");
        } catch (IllegalThreadStateException i) {
            System.out.println("Fail: error checking ctags [1]");
        } catch (InterruptedException ex) {
            System.out.println("Fail: error checking ctags [2]");
        }

        return false;

    }

    private void showTextEditor(boolean show) {

        if (show) {

            if (!editor_visible) {

                //System.out.println("Show editor");
                Main.setEditorVisible(true);
                SourceMenuEntry.setSelected(true);
                SourceButton.setSelected(true);
                jSplitPane4.setRightComponent(jPanel11);
                //jSplitPane4.setDividerLocation(0.3);
                editor_visible = true;
                adjustGraphLayout();

                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {

                        if (!RoutineLabel.getText().equals("")) {
                            System.out.println("Function selected " + RoutineLabel.getText());
                            loadFunctionInTextEditor(RoutineLabel.getText());
                        }

                    }
                });

            }

        } else {

            if (editor_visible) {

                //System.out.println("Hide editor");
                Main.setEditorVisible(false);
                SourceMenuEntry.setSelected(false);
                SourceButton.setSelected(false);
                jSplitPane4.setRightComponent(null);
                editor_visible = false;
                adjustGraphLayout();

            }

        }

    }

    private void createTextEditor() {

        if (textArea != null) {
            return;
        }

        textArea = new RSyntaxTextArea(10, 10);
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_CPLUSPLUS);
        //textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_C);
        textArea.setCodeFoldingEnabled(true);
        textArea.setAntiAliasingEnabled(true);
        textArea.setEditable(false);

        JPopupMenu popup = textArea.getPopupMenu();
        popup.addSeparator();
        ActionEditor a = new ActionEditor();
        a.setMainWindow(this);
        popup.add(new JMenuItem(a));

        RTextScrollPane sp = new RTextScrollPane(textArea);
        sp.setFoldIndicatorEnabled(true);
        //Gutter gutter = sp.getGutter();
        //gutter.setBookmarkingEnabled(true);
        //gutter.setBookmarkIcon(new ImageIcon(getClass().getResource("/aprofplot/gui/resources/bookmark.png")));
        jPanel11.add(sp);

        /*
         SwingUtilities.invokeLater(new Runnable() {
			
         @Override
         public void run() { 
         textArea.setCaretPosition(textArea.getText().length() / 2);
         }
         });
         */
    }

    private String cleanCPPSignature(String sig) {

        int index = sig.indexOf("(");
        if (index >= 0) {
            sig = sig.substring(0, index);
        }

        index = sig.indexOf("<");
        while (index >= 0) {

            int index2 = sig.indexOf(">", index);
            if (index2 < 0) { // fail :( 
                System.out.println("I need to clean function name " + sig
                    + " but I failed... BUG");
                break;
            }
            String sig_a = sig.substring(0, index);
            String sig_b = sig.substring(index2 + 1);
            sig = sig_a + sig_b;

            index = sig.indexOf("<");

        }

        index = sig.lastIndexOf(" ");
        if (index >= 0) {
            sig = sig.substring(index + 1);
        }

        //System.out.println(sig);
        return sig;
    }

    public void loadFunctionInTextEditor(String name) {

        if (sym == null) {
            return;
        }
        if (!editor_visible) {
            return;
        }

        name = cleanCPPSignature(name);

        loading = true;
        Symbol s = sym.get(name);

        if (s == null) {

            //System.out.println("Function " + name + " was not found in the symbol table");
            try {
                /*
                 final String error = "Source code of this function not found\n";
                 textArea.read(new StringReader(error + "\n"), null);
                 if (highlight_line != null) textArea.removeLineHighlight(highlight_line);
                 highlight_line = textArea.addLineHighlight(0, Color.RED);
                 */
                final JFrame m = this;
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {

                        javax.swing.JOptionPane.showMessageDialog(m, "Source code of the function not found");
                        //textArea.setCaretPosition(error.length());
                        loading = false;
                    }
                });

            } catch (Exception ex) {
                //
            }
            /*
             jComboBox1.setSelectedIndex(-1);
             jComboBox1.repaint();
             */
            return;

        }

        Iterator i = files.iterator();
        int k = 0;
        while (i.hasNext()) {

            String file = (String) i.next();
            if (file.equals(s.getFile())) {
                break;
            }
            k++;
        }
        final int selected = k;
        //System.out.println("K is " + k);

        File f = new File(s.getFile());
        int count = s.getLine() - 1;
        int offset = 0;
        try {

            BufferedReader r = new BufferedReader(new FileReader(f));
            textArea.read(r, null);
            r.close();

            // calculate offset
            r = new BufferedReader(new FileReader(f));
            String line = null;

            while (count > 0 && (line = r.readLine()) != null) {

                offset += line.length() + 1;
                count--;

            }

            r.close();

        } catch (Exception ex) {
            //System.out.println(ex);
        }

        final int f_offset = offset;
        try {

            if (highlight_line != null) {
                textArea.removeLineHighlight(highlight_line);
            }
            highlight_line = textArea.addLineHighlight(s.getLine() - 1, Color.ORANGE);

        } catch (BadLocationException ex) {
            //
        }

        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                textArea.setCaretPosition(f_offset);
                jComboBox1.setSelectedIndex(selected);
                jComboBox1.repaint();
                loading = false;
            }
        });

    }

    public boolean isDisplayCumulativeTotalCost() {

        if (Main.getRtnCostMode() == Input.CostType.CUMULATIVE) {
            return true;
        }
        return false;

    }

    public boolean isChartCumulativeCost() {

        if (Main.getChartCostMode() == Input.CostType.CUMULATIVE) {
            return true;
        }
        return false;

    }

    public void refreshRoutine() {
        //System.out.println("Refreshing...");
        loadRoutine(this.rtn_info);
    }

    public boolean hasDistinctRms() {

        if (report != null && report.hasDistinctRms()) {
            return true;
        }

        return false;
    }

    public boolean hasDrmsStats() {

        if (isInputMetricRms()) {
            return false;
        }

        if (report != null && report.hasInputStats()) {
            return true;
        }

        return false;
    }

	// For now we decide to disable context tree panel 
	/*
     private void expandContextTree() {
     for (int i = 0; i < jTree1.getRowCount(); i++) {
     jTree1.expandRow(i);
     }
     }

     private void addBranchToTree(DefaultMutableTreeNode root, ArrayList<RoutineContext> branch) {
     if (root.getChildCount() == 0) {
     DefaultMutableTreeNode currentNode = root;
     for (int i = branch.size() - 1; i >= 0; i--) {
     DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(branch.get(i));
     currentNode.add(newNode);
     currentNode = newNode;
     }
     }
     else {
     DefaultMutableTreeNode currentNode = root;
     int i = branch.size() - 1;
     for (; i >= 0; i--) {
     boolean pathFound = false;
     for (int j = 0; j < currentNode.getChildCount(); j++) {
     DefaultMutableTreeNode child = (DefaultMutableTreeNode)currentNode.getChildAt(j);
     if (child.getUserObject().equals(branch.get(i))) {
     currentNode = child;
     pathFound = true;
     break;
     }
     }
     if (!pathFound) break;
     }
     for (; i >= 0; i--) {
     DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(branch.get(i));
     currentNode.add(newNode);
     currentNode = newNode;
     }
     }
     }

     private void updateContextTree(Routine rtn) {
     DefaultTreeModel treeModel = (DefaultTreeModel)jTree1.getModel();
     if (rtn instanceof ContextualizedRoutineInfo){
     DefaultMutableTreeNode root = new DefaultMutableTreeNode("context trees:");
     ContextualizedRoutineInfo urtn = (ContextualizedRoutineInfo)rtn;
     for (int i = 0; i < urtn.getContextCount(); i++) {
     RoutineContext crtn = urtn.getContexts().get(i);
     ArrayList<RoutineContext> branch = new ArrayList<RoutineContext>();
     while (crtn != null) {
     branch.add(crtn);
     crtn = crtn.getParent();
     }
     addBranchToTree(root, branch);
     }
     treeModel.setRoot(root);
     expandContextTree();
     } else treeModel.setRoot(null);
     }
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenuEntry;
    private javax.swing.JCheckBoxMenuItem AmortizedPlotButton;
    private javax.swing.JCheckBoxMenuItem AmortizedPlotMenuEntry;
    private javax.swing.JCheckBoxMenuItem CostPlotButton;
    private javax.swing.JCheckBoxMenuItem CostPlotMenuEntry;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem ExitMenuEntry;
    private javax.swing.JMenuItem ExportInducedAccessEntry;
    private javax.swing.JMenuItem ExportInputVolumeEntry;
    private javax.swing.JMenu ExportMenu;
    private javax.swing.JMenuItem ExportProgramProfileEntry;
    private javax.swing.JMenuItem ExportProgramStatsEntry;
    private javax.swing.JMenuItem ExportRichnessEntry;
    private javax.swing.JMenuItem ExportRoutineProfileEntry;
    private javax.swing.JMenuItem ExportSelfInducedAccessEntry;
    private javax.swing.JMenuItem ExportSyscallInputEntry;
    private javax.swing.JMenuItem ExportThreadInputEntry;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JButton FilterContextsButton;
    private javax.swing.JButton FilterRoutinesButton;
    private javax.swing.JButton FilterTuplesButton;
    private javax.swing.JToggleButton FitButton;
    private javax.swing.JMenuItem FitMenuEntry;
    private javax.swing.JCheckBoxMenuItem FrequencyPlotButton;
    private javax.swing.JCheckBoxMenuItem FrequencyPlotMenuEntry;
    private javax.swing.JToggleButton GraphButton;
    private javax.swing.JPopupMenu GraphMenu;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JToggleButton LinkButton;
    private javax.swing.JCheckBoxMenuItem MMMPlotButton;
    private javax.swing.JCheckBoxMenuItem MMMPlotMenuEntry;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton NewWindowButton;
    private javax.swing.JMenuItem NewWindowMenuEntry;
    private javax.swing.JButton OpenButton;
    private javax.swing.JMenuItem OpenFileMenuEntry;
    private javax.swing.JCheckBoxMenuItem RatioPlotButton;
    private javax.swing.JCheckBoxMenuItem RatioPlotMenuEntry;
    private javax.swing.JMenuItem RecentEntry1;
    private javax.swing.JMenuItem RecentEntry2;
    private javax.swing.JMenuItem RecentEntry3;
    private javax.swing.JMenuItem RecentEntry4;
    private javax.swing.JMenuItem RecentEntry5;
    private javax.swing.JMenuItem RecentEntry6;
    private javax.swing.JMenu RecentMenu;
    private javax.swing.JButton ReloadButton;
    private javax.swing.JLabel RoutineLabel;
    private javax.swing.JButton SaveButton;
    private javax.swing.JMenuItem SaveMenuEntry;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchField;
    private javax.swing.JMenuItem SetSourceDirMenuEntry;
    private javax.swing.JButton SettingButton;
    private javax.swing.JMenuItem SettingsMenuEntry;
    private javax.swing.JToggleButton SourceButton;
    private javax.swing.JButton SourceDirectoryButton;
    private javax.swing.JCheckBoxMenuItem SourceMenuEntry;
    private javax.swing.JCheckBoxMenuItem TotalCostPlotButton;
    private javax.swing.JCheckBoxMenuItem TotalCostPlotMenuEntry;
    private javax.swing.JCheckBoxMenuItem VarPlotButton;
    private javax.swing.JCheckBoxMenuItem VarianceCostPlotMenuEntry;
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JButton jButton11;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables


    private TableRowSorter<TableModel> routines_table_sorter = null;
    private List<RowSorter.SortKey> routines_sort = null;

    private TableRowSorter<TableModel> rms_table_sorter = null;
    private List<RowSorter.SortKey> rms_sort = null;

    private TableRowSorter<TableModel> contexts_table_sorter = null;
    private List<javax.swing.RowSorter.SortKey> contexts_sort = null;

    private RSyntaxTextArea textArea = null;
    private Object highlight_line = null;

    private int stack_trace_divider = -1;
    private int contexts_divider = -1;
    private String[] contexts_filter_criteria = null;
    private String[] routines_filter_criteria = null;
    private String[] rms_filter_criteria = new String[4];
    private AprofReport report = null;
    private boolean linked_plots = true;
    private JMenuItem[] recentMenuItems = new JMenuItem[6];

}
