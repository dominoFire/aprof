/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on 22-apr-2010, 12.45.36
 */

package aprofplot.gui;

import aprofplot.*;
import java.util.ArrayList;
import java.awt.ComponentOrientation;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.util.*;
import java.io.*;
import javax.swing.JPanel;

/**
 *
 * @author bruno
 */
public class MainWindow extends javax.swing.JFrame {

    private RoutineInfo rtn_info = null;
    private int graph_visible = 6;
    private JPanel fake = null;
    private JPanel fake2 = null;

    /** Creates new form MainWindow */
    public MainWindow() {
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            initComponents();
            refreshRecentFiles();
            java.awt.Toolkit tk = java.awt.Toolkit.getDefaultToolkit();
            java.awt.Dimension screenSize = tk.getScreenSize();
            int screenHeight = screenSize.height;
            int screenWidth = screenSize.width;
            setSize(screenWidth, screenHeight);
            routines_filter_criteria = new String[5];
            routines_filter_criteria[4] = "5";
            sms_filter_criteria = new String[3];
        }
        catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton6 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jToggleButton8 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButton8 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(new RoutinesTableModel(this.report)) {
            public java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer renderer, int row, int column)
            {
                java.awt.Component c = super.prepareRenderer(renderer, row, column);
                if (!c.getBackground().equals(getSelectionBackground())) {
                    //if (((String)getModel().getValueAt(convertRowIndexToModel(row), 10)).contains("/")) c.setBackground(new java.awt.Color(133, 244, 201)/*java.awt.Color.RED*/);
                    //else
                    c.setBackground(java.awt.Color.WHITE);
                }
                return c;
            }
        };
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel9 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        recentMenuItem1 = new javax.swing.JMenuItem();
        recentMenuItem2 = new javax.swing.JMenuItem();
        recentMenuItem3 = new javax.swing.JMenuItem();
        recentMenuItem4 = new javax.swing.JMenuItem();
        recentMenuItem5 = new javax.swing.JMenuItem();
        recentMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Filter-icon.png"))); // NOI18N
        jButton5.setToolTipText("Filter routines");
        jScrollPane1.setCorner(javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER, jButton5);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Filter-icon.png"))); // NOI18N
        jButton4.setToolTipText("Filter sms");
        jScrollPane2.setCorner(javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER, jButton4);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("aprof-plot");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/App-icon.png"))).getImage());
        setMinimumSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setRollover(true);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/NewWindow-icon.png"))); // NOI18N
        jButton3.setToolTipText("open a new window");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Open-icon.png"))); // NOI18N
        jButton1.setToolTipText("open an Aprof report file");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Save-icon.png"))); // NOI18N
        jButton7.setToolTipText("save report changes");
        jButton7.setEnabled(false);
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/refresh.png"))); // NOI18N
        jButton9.setToolTipText("Reload last recent report");
        jButton9.setEnabled(false);
        ArrayList<File> r = Main.getRecentFiles();
        if (r.size() > 0) {
            jButton9.setEnabled(true);
        }
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton9);
        jToolBar1.add(jSeparator2);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Merge-icon.png"))); // NOI18N
        jButton6.setToolTipText("merge two or more aprof report files");
        jButton6.setEnabled(false);
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);
        jToolBar1.add(jSeparator5);

        jToggleButton5.setFont(new java.awt.Font("Ubuntu", 1, 13));
        jToggleButton5.setSelected(true);
        jToggleButton5.setText("M");
        jToggleButton5.setToolTipText("Show/hide min/avg/max cost plot");
        jToggleButton5.setFocusable(false);
        jToggleButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton5.setMargin(new java.awt.Insets(0, 2, 0, 2));
        jToggleButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton5);

        jToggleButton1.setFont(new java.awt.Font("Ubuntu", 1, 13));
        jToggleButton1.setSelected(true);
        jToggleButton1.setText("T");
        jToggleButton1.setToolTipText("show/hide time plot");
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setMargin(new java.awt.Insets(0, 4, 0, 4));
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton1);

        jToggleButton2.setFont(new java.awt.Font("Ubuntu", 1, 13));
        jToggleButton2.setSelected(true);
        jToggleButton2.setText("R");
        jToggleButton2.setToolTipText("show/hide ratio plot");
        jToggleButton2.setFocusable(false);
        jToggleButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton2.setMargin(new java.awt.Insets(0, 4, 0, 4));
        jToggleButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton2);

        jToggleButton3.setFont(new java.awt.Font("Ubuntu", 1, 13));
        jToggleButton3.setSelected(true);
        jToggleButton3.setText("F");
        jToggleButton3.setToolTipText("show/hide frequency plot");
        jToggleButton3.setFocusable(false);
        jToggleButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton3.setMargin(new java.awt.Insets(0, 4, 0, 4));
        jToggleButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton3);

        jToggleButton6.setFont(new java.awt.Font("Ubuntu", 1, 13));
        jToggleButton6.setSelected(true);
        jToggleButton6.setText("V");
        jToggleButton6.setToolTipText("Show/hide variance plot");
        jToggleButton6.setFocusable(false);
        jToggleButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton6.setMargin(new java.awt.Insets(0, 4, 0, 4));
        jToggleButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton6);

        jToggleButton7.setFont(new java.awt.Font("Ubuntu", 1, 13));
        jToggleButton7.setSelected(true);
        jToggleButton7.setText("S");
        jToggleButton7.setToolTipText("Show/hide total cost plot");
        jToggleButton7.setFocusable(false);
        jToggleButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton7.setMargin(new java.awt.Insets(0, 4, 0, 4));
        jToggleButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton7);

        jToggleButton8.setFont(new java.awt.Font("Ubuntu", 1, 13));
        jToggleButton8.setText("C");
        jToggleButton8.setFocusable(false);
        jToggleButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton8.setMargin(new java.awt.Insets(0, 4, 0, 4));
        jToggleButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton8ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton8);

        jToggleButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Unlink-icon.png"))); // NOI18N
        jToggleButton4.setSelected(true);
        jToggleButton4.setToolTipText("link/unlink plots");
        jToggleButton4.setFocusable(false);
        jToggleButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Unlink-icon.png"))); // NOI18N
        jToggleButton4.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Link-icon.png"))); // NOI18N
        jToggleButton4.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Link-icon.png"))); // NOI18N
        jToggleButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton4);
        jToolBar1.add(jSeparator3);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Settings-icon.png"))); // NOI18N
        jButton8.setToolTipText("settings");
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton8);
        jToolBar1.add(jSeparator6);

        jTextField1.setMaximumSize(new java.awt.Dimension(150, 27));
        jTextField1.setMinimumSize(new java.awt.Dimension(100, 27));
        jTextField1.setPreferredSize(new java.awt.Dimension(150, 27));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        //jToolBar1.add(javax.swing.Box.createHorizontalGlue());
        jToolBar1.add(jTextField1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Search-icon.png"))); // NOI18N
        jButton2.setToolTipText("find in routines");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);
        jToolBar1.add(jSeparator7);

        jLabel7.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jToolBar1.add(jLabel7);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("Routines:");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel1);

        jLabel4.setText("Contexts:");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel4);

        jLabel5.setText("Total time:");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel5);

        jLabel6.setText("Calls:");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel6);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setDividerLocation(0.5);
        jSplitPane1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jSplitPane1AncestorResized(evt);
            }
        });

        jSplitPane2.setResizeWeight(0.8);
        jSplitPane2.setDividerLocation(0.75);
        jSplitPane2.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jSplitPane2AncestorResized(evt);
            }
        });

        jPanel6.setMinimumSize(new java.awt.Dimension(200, 120));
        jPanel6.setPreferredSize(new java.awt.Dimension(800, 400));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setDoubleBuffered(true);
        jTable1.setRowHeight(52);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        routines_table_sorter
        = new javax.swing.table.TableRowSorter<javax.swing.table.TableModel>(jTable1.getModel());
        jTable1.setRowSorter(routines_table_sorter);

        java.util.List <javax.swing.RowSorter.SortKey> routine_table_sortKeys
        = new java.util.ArrayList<javax.swing.RowSorter.SortKey>();
        routine_table_sortKeys.add(new javax.swing.RowSorter.SortKey(4, javax.swing.SortOrder.DESCENDING));
        //routine_table_sortKeys.add(new javax.swing.RowSorter.SortKey(2, javax.swing.SortOrder.DESCENDING));
        routines_table_sorter.setSortKeys(routine_table_sortKeys);

        routines_table_sorter.setSortable(6, false);

        jTable1.setDefaultRenderer(RoutineInfo.class, new TimePlotThumbRenderer());
        jTable1.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable1ValueChanged(evt);
            }
        });
        jTable1.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                jTable1TableChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(" ");
        jPanel7.add(jLabel3, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jSplitPane2.setLeftComponent(jPanel6);

        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane3.setDividerLocation(0.5);

        jPanel4.setMinimumSize(new java.awt.Dimension(26, 100));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable2.setModel(new SmsTableModel(null));
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        /*javax.swing.table.TableRowSorter<javax.swing.table.TableModel> */sms_table_sorter
        = new javax.swing.table.TableRowSorter<javax.swing.table.TableModel>(jTable2.getModel());
        jTable2.setRowSorter(sms_table_sorter);

        java.util.List <javax.swing.RowSorter.SortKey> sms_table_sortKeys
        = new java.util.ArrayList<javax.swing.RowSorter.SortKey>();
        sms_table_sortKeys.add(new javax.swing.RowSorter.SortKey(0, javax.swing.SortOrder.DESCENDING));
        sms_table_sorter.setSortKeys(sms_table_sortKeys);
        jTable2.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane3.setTopComponent(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Stack trace");
        jPanel5.add(jLabel2, java.awt.BorderLayout.NORTH);

        jList1.setModel(new StackTraceListModel());
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jSplitPane3.setRightComponent(jPanel5);

        //jSplitPane3.setDividerLocation(0.5);

        jTabbedPane1.addTab("SMS entries / Stack trace", jSplitPane3);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jTree1.setModel(new DefaultTreeModel(null));
        jTree1.setRootVisible(false);
        jScrollPane4.setViewportView(jTree1);

        jPanel8.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Context tree", jPanel8);

        jSplitPane2.setRightComponent(jTabbedPane1);

        jSplitPane1.setRightComponent(jSplitPane2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.GridLayout(2, 3));

        timeGraphPanel = new GraphPanel(GraphPanel.TIME_PLOT, this);
        ratioGraphPanel = new GraphPanel(GraphPanel.RATIO_PLOT, this);
        freqGraphPanel = new GraphPanel(GraphPanel.FREQ_PLOT, this);
        MMMGraphPanel = new GraphPanel(GraphPanel.MMM_PLOT, this);
        SumGraphPanel = new GraphPanel(GraphPanel.SUM_PLOT, this);
        VarGraphPanel = new GraphPanel(GraphPanel.VAR_PLOT, this);
        RtnGraphPanel = new GraphPanel(GraphPanel.RTN_PLOT, this);
        jPanel9.add(timeGraphPanel);
        jPanel9.add(ratioGraphPanel);
        jPanel9.add(freqGraphPanel);
        jPanel9.add(MMMGraphPanel);
        jPanel9.add(SumGraphPanel);
        jPanel9.add(VarGraphPanel);

        jScrollPane5.setViewportView(jPanel9);

        jPanel3.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel3);

        jPanel2.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setMnemonic('n');
        jMenuItem1.setText("New window");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setMnemonic('o');
        jMenuItem5.setText("Open file...");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenu5.setMnemonic('r');
        jMenu5.setText("Open recent file");

        recentMenuItem1.setText("recent file");
        recentMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem1);
        recentMenuItems[0] = recentMenuItem1;

        recentMenuItem2.setText("recent file");
        recentMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem2);
        recentMenuItems[1] = recentMenuItem2;

        recentMenuItem3.setText("recent file");
        recentMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem3);
        recentMenuItems[2] = recentMenuItem3;

        recentMenuItem4.setText("recent file");
        recentMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem4);
        recentMenuItems[3] = recentMenuItem4;

        recentMenuItem5.setText("recent file");
        recentMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem5);
        recentMenuItems[4] = recentMenuItem5;

        recentMenuItem6.setText("recent file");
        recentMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem6);
        recentMenuItems[5] = recentMenuItem6;

        jMenu1.add(jMenu5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Save");
        jMenuItem6.setEnabled(false);
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem8.setText("Export sms about selected routine");
        jMenuItem8.setEnabled(false);
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem9.setText("Export routine table");
        jMenuItem9.setEnabled(false);
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem10.setText("Export routine stats");
        jMenuItem10.setEnabled(false);
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuItem7.setText("Merge...");
        jMenuItem7.setEnabled(false);
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);
        jMenu1.add(jSeparator4);

        jMenuItem2.setMnemonic('x');
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('e');
        jMenu2.setText("Edit");

        jMenuItem4.setMnemonic('s');
        jMenuItem4.setText("Settings");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('v');
        jMenu3.setText("View");

        jCheckBoxMenuItem1.setMnemonic('t');
        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Time plot");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setMnemonic('r');
        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Ratio plot");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem2);

        jCheckBoxMenuItem3.setMnemonic('f');
        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("Freq plot");
        jCheckBoxMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem3);

        jMenuBar1.add(jMenu3);

        jMenu4.setMnemonic('h');
        jMenu4.setText("Help");

        jMenuItem3.setMnemonic('a');
        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void refreshRecentFiles() {
        hideRecentMenuItems();
        java.util.ArrayList<java.io.File> recent = Main.getRecentFiles();
        if (recent.size() == 0) jMenu5.setEnabled(false);
        else {
            jMenu5.setEnabled(true);
            for (int i = 0; i < recent.size(); i++) {
                recentMenuItems[i].setText(recent.get(i).getName());
                recentMenuItems[i].setVisible(true);
            }
        }
    }

    private void hideRecentMenuItems() {
        jMenu5.setEnabled(false);
        recentMenuItem1.setVisible(false);
        recentMenuItem2.setVisible(false);
        recentMenuItem3.setVisible(false);
        recentMenuItem4.setVisible(false);
        recentMenuItem5.setVisible(false);
        recentMenuItem6.setVisible(false);
    }

    private void updateGUI(java.io.File file) {
        this.setTitle(file.toString() + " - aprof-plot");
        jLabel3.setText("Profile report for " + report.getAppName() + " (" + report.getCommandLine() + ")");
        jLabel1.setText("Routines: " + report.getRoutineCount());
        jLabel4.setText("Contexts: " + report.getTotalContexts());
        jLabel5.setText("Total time: " + report.getTotalTime() / 1000000 + "s");
        jLabel6.setText("Calls: " + report.getTotalCalls());
    }

    protected void loadReport(java.io.File file) throws Exception {
        jButton9.setEnabled(true);
        jButton9.setToolTipText("Reload this report");
        jMenuItem9.setEnabled(true);
        jMenuItem10.setEnabled(true);
        report = new AprofReport(file);
        //routines_filter_criteria = new String[5];
        //routines_filter_criteria[4] = "5";
        routines_filter_criteria[0] = routines_filter_criteria[1] = routines_filter_criteria[2] = routines_filter_criteria[3] = null;
        setRoutinesTableFilter(routines_filter_criteria);
        //sms_filter_criteria = new String[3];
        //setSmsTableFilter(sms_filter_criteria);
        updateGUI(file);
        RtnGraphPanel.setReport(report);
        if (jToggleButton1.isSelected()) timeGraphPanel.clearData();
        if (jToggleButton2.isSelected()) ratioGraphPanel.clearData();
        if (jToggleButton3.isSelected()) freqGraphPanel.clearData();
        if (jToggleButton5.isSelected()) MMMGraphPanel.clearData();
        if (jToggleButton6.isSelected()) VarGraphPanel.clearData();
        if (jToggleButton7.isSelected()) SumGraphPanel.clearData();
        RtnGraphPanel.setData(null);
        ((RoutinesTableModel)jTable1.getModel()).setData(report);
        ((SmsTableModel)jTable2.getModel()).setData(null);
    }

    private void openFile() {
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        String lastReportPath = Main.getLastReportPath();
        if (!lastReportPath.equals("")) chooser.setCurrentDirectory(new java.io.File(lastReportPath));
        javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter("Aprof report files (*.aprof)", "aprof");
        chooser.setFileFilter(filter);
        chooser.setAcceptAllFileFilterUsed(false);
        int choice = chooser.showOpenDialog(this);
        if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = chooser.getSelectedFile();
            Main.storeLastReportPath(file.getParent());
            try {
                loadReport(file);
                Main.addRecentFile(file);
                this.refreshRecentFiles();
            }
            catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    protected void refreshTables() {
        int viewIndex = jTable1.getSelectedRow();
        int modelIndex = (viewIndex >= 0)? jTable1.convertRowIndexToModel(viewIndex) : -1;
        int viewIndex2 = jTable2.getSelectedRow();
        ((RoutinesTableModel)jTable1.getModel()).refresh();
        if (viewIndex >= 0) {
            viewIndex = jTable1.convertRowIndexToView(modelIndex);
            jTable1.setRowSelectionInterval(viewIndex, viewIndex);
            if (jTable1.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
                javax.swing.JViewport viewport = (javax.swing.JViewport)jTable1.getParent();
                java.awt.Rectangle rect = jTable1.getCellRect(viewIndex, 0, true);
                java.awt.Point pos = viewport.getViewPosition();
                rect.translate(-pos.x, -pos.y);
                viewport.scrollRectToVisible(rect);
            }
        }

        ((SmsTableModel)jTable2.getModel()).refresh();
        if (viewIndex2 >= 0) {
            int modelIndex2 = jTable1.convertRowIndexToModel(viewIndex2);
            viewIndex2 = jTable1.convertRowIndexToView(modelIndex2);
            jTable2.setRowSelectionInterval(viewIndex2, viewIndex2);
            if (jTable2.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
                javax.swing.JViewport viewport = (javax.swing.JViewport)jTable2.getParent();
                java.awt.Rectangle rect = jTable2.getCellRect(viewIndex2, 0, true);
                java.awt.Point pos = viewport.getViewPosition();
                rect.translate(-pos.x, -pos.y);
                viewport.scrollRectToVisible(rect);
            }
        }
    }

    protected boolean getLinkPlots() {
        return this.link_plots;
    }

    protected void setXLogScaleAll(int graph_type, boolean log) {
        if (graph_type != GraphPanel.TIME_PLOT) this.timeGraphPanel.setXLogScale(log);
        if (graph_type != GraphPanel.RATIO_PLOT) this.ratioGraphPanel.setXLogScale(log);
        if (graph_type != GraphPanel.FREQ_PLOT) this.freqGraphPanel.setXLogScale(log);
        if (graph_type != GraphPanel.MMM_PLOT) this.MMMGraphPanel.setXLogScale(log);
        if (graph_type != GraphPanel.VAR_PLOT) this.VarGraphPanel.setXLogScale(log);
        if (graph_type != GraphPanel.SUM_PLOT) this.SumGraphPanel.setXLogScale(log);
        if (graph_type != GraphPanel.RTN_PLOT) this.RtnGraphPanel.setXLogScale(log);
    }

    protected void setYLogScaleAll(int graph_type, boolean log) {
        if (graph_type != GraphPanel.TIME_PLOT) this.timeGraphPanel.setYLogScale(log);
        if (graph_type != GraphPanel.RATIO_PLOT) this.ratioGraphPanel.setYLogScale(log);
        if (graph_type != GraphPanel.FREQ_PLOT) this.freqGraphPanel.setYLogScale(log);
        if (graph_type != GraphPanel.MMM_PLOT) this.MMMGraphPanel.setYLogScale(log);
        if (graph_type != GraphPanel.SUM_PLOT) this.SumGraphPanel.setYLogScale(log);
        if (graph_type != GraphPanel.VAR_PLOT) this.VarGraphPanel.setYLogScale(log);
        if (graph_type != GraphPanel.RTN_PLOT) this.RtnGraphPanel.setYLogScale(log);
    }

    protected void maximizeAll(int graph_type) {
        if (graph_type != GraphPanel.TIME_PLOT) this.timeGraphPanel.maximize();
        if (graph_type != GraphPanel.RATIO_PLOT) this.ratioGraphPanel.maximize();
        if (graph_type != GraphPanel.FREQ_PLOT) this.freqGraphPanel.maximize();
        if (graph_type != GraphPanel.MMM_PLOT) this.MMMGraphPanel.maximize();
        if (graph_type != GraphPanel.SUM_PLOT) this.SumGraphPanel.maximize();
        if (graph_type != GraphPanel.VAR_PLOT) this.VarGraphPanel.maximize();
        if (graph_type != GraphPanel.RTN_PLOT) this.RtnGraphPanel.maximize();
    }

    protected void autoscaleAll(int graph_type) {
        if (graph_type != GraphPanel.TIME_PLOT) this.timeGraphPanel.autoscale();
        if (graph_type != GraphPanel.RATIO_PLOT) this.ratioGraphPanel.autoscale();
        if (graph_type != GraphPanel.FREQ_PLOT) this.freqGraphPanel.autoscale();
        if (graph_type != GraphPanel.MMM_PLOT) this.MMMGraphPanel.autoscale();
        if (graph_type != GraphPanel.SUM_PLOT) this.SumGraphPanel.autoscale();
        if (graph_type != GraphPanel.VAR_PLOT) this.VarGraphPanel.autoscale();
        if (graph_type != GraphPanel.RTN_PLOT) this.RtnGraphPanel.autoscale();
    }

    protected void setGroupThresholdAll(int graph_type, int threshold) {
        if (graph_type != GraphPanel.TIME_PLOT) this.timeGraphPanel.setGroupThreshold(threshold);
        if (graph_type != GraphPanel.RATIO_PLOT) this.ratioGraphPanel.setGroupThreshold(threshold);
        if (graph_type != GraphPanel.FREQ_PLOT) this.freqGraphPanel.setGroupThreshold(threshold);
        if (graph_type != GraphPanel.MMM_PLOT) this.MMMGraphPanel.setGroupThreshold(threshold);
        if (graph_type != GraphPanel.SUM_PLOT) this.SumGraphPanel.setGroupThreshold(threshold);
        if (graph_type != GraphPanel.VAR_PLOT) this.VarGraphPanel.setGroupThreshold(threshold);
        if (graph_type != GraphPanel.RTN_PLOT) this.RtnGraphPanel.setGroupThreshold(threshold);
    }

    protected void setGroupCostAll(int graph_type, int cost_type) {
        if (graph_type != GraphPanel.TIME_PLOT) this.timeGraphPanel.setGroupCost(cost_type);
        if (graph_type != GraphPanel.RATIO_PLOT) this.ratioGraphPanel.setGroupCost(cost_type);
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (jButton7.isEnabled()) {
            int choice = javax.swing.JOptionPane.showConfirmDialog(this,
                                                      "Do you want to save changes to this report?",
                                                      "Unsaved changes",
                                                      javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,
                                                      javax.swing.JOptionPane.QUESTION_MESSAGE);
            if (choice == javax.swing.JOptionPane.CANCEL_OPTION) return;
            if (choice == javax.swing.JOptionPane.OK_OPTION) {
                try {
                    report.save();
                }
                catch (Exception e) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Can't save report", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
            this.dispose();
        }
        else {
            this.dispose();
            Main.removeWindow(this);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Main.newWindow();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        Main.removeWindow(this);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
       
        if (jToggleButton1.isSelected()) {
            graph_visible++;
            jPanel9.add(timeGraphPanel);
            jCheckBoxMenuItem1.setSelected(true);
            timeGraphPanel.setVisible(true);
            timeGraphPanel.setData(this.rtn_info);
        }
        else {
            graph_visible--;
            jCheckBoxMenuItem1.setSelected(false);
            timeGraphPanel.setVisible(false);
            jPanel9.remove(timeGraphPanel);
        }

        adjustLayout();
        
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        
        if (jToggleButton2.isSelected()) {
            graph_visible++;
            jPanel9.add(ratioGraphPanel);
            jCheckBoxMenuItem2.setSelected(true);
            ratioGraphPanel.setVisible(true);
            ratioGraphPanel.setData(this.rtn_info);
        }
        else {
            graph_visible--;
            jCheckBoxMenuItem2.setSelected(false);
            ratioGraphPanel.setVisible(false);
            jPanel9.remove(ratioGraphPanel);
        }

        adjustLayout();
        
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        // TODO add your handling code here:
        if (jToggleButton3.isSelected()) {
            graph_visible++;
            jPanel9.add(freqGraphPanel);
            jCheckBoxMenuItem3.setSelected(true);
            freqGraphPanel.setVisible(true);
            freqGraphPanel.setData(this.rtn_info);
        }
        else {
            graph_visible--;
            jCheckBoxMenuItem3.setSelected(false);
            freqGraphPanel.setVisible(false);
            jPanel9.remove(freqGraphPanel);
        }

        
        adjustLayout();
        
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        openFile();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1ValueChanged(javax.swing.event.ListSelectionEvent evt) {
        int viewIndex = jTable1.getSelectedRow();
        if (viewIndex >= 0) {
            int modelIndex = jTable1.convertRowIndexToModel(viewIndex);
            RoutineInfo r = ((RoutinesTableModel)jTable1.getModel()).getRoutineInfo(modelIndex);
            String name = r.getName();
            if (r instanceof ContextualizedRoutineInfo) {
                name += (" (" +((ContextualizedRoutineInfo)r).getContextId() + "/" + ((ContextualizedRoutineInfo)r).getOverallRoutineInfo().getContextCount() + ")");
            }
            jLabel7.setText(name);
            //jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, r.getName(), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
            //jLabel2.setText(r.getName() + " - " + r.getImage() + " - " + r.getAddress());
            if (jToggleButton1.isSelected()) timeGraphPanel.setData(r);
            if (jToggleButton2.isSelected()) ratioGraphPanel.setData(r);
            if (jToggleButton3.isSelected()) freqGraphPanel.setData(r);
            if (jToggleButton5.isSelected()) MMMGraphPanel.setData(r);
            if (jToggleButton6.isSelected()) VarGraphPanel.setData(r);
            if (jToggleButton7.isSelected()) SumGraphPanel.setData(r);
            //if (jToggleButton8.isSelected()) RtnGraphPanel.setData(r);
            if (r == null) jMenuItem8.setEnabled(false);
            else jMenuItem8.setEnabled(true);
            this.rtn_info = r;
            ((SmsTableModel)jTable2.getModel()).setData(r);
            if (r instanceof ContextualizedRoutineInfo) ((StackTraceListModel)jList1.getModel()).setData(((ContextualizedRoutineInfo)r).getStackTrace());
            else ((StackTraceListModel)jList1.getModel()).setData(null);
            updateContextTree(r);
        }
        else {
            ((SmsTableModel)jTable2.getModel()).setData(null);
            ((StackTraceListModel)jList1.getModel()).setData(null);
            jLabel7.setText("");
            //jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "-", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
            if (jToggleButton1.isSelected()) timeGraphPanel.clearData();
            if (jToggleButton2.isSelected()) ratioGraphPanel.clearData();
            if (jToggleButton3.isSelected()) freqGraphPanel.clearData();
            if (jToggleButton5.isSelected()) MMMGraphPanel.clearData();
            if (jToggleButton6.isSelected()) VarGraphPanel.clearData();
            if (jToggleButton7.isSelected()) SumGraphPanel.clearData();
            //if (jToggleButton8.isSelected()) RtnGraphPanel.clearData();
            updateContextTree(null);
        }

        if (jTable1.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
            javax.swing.JViewport viewport = (javax.swing.JViewport)jTable1.getParent();
            java.awt.Rectangle rect = jTable1.getCellRect(viewIndex, 0, true);
            java.awt.Point pos = viewport.getViewPosition();
            rect.translate(-pos.x, -pos.y);
            viewport.scrollRectToVisible(rect);
        }
    }

    private void jTable2ValueChanged(javax.swing.event.ListSelectionEvent evt) {
        int viewIndex = jTable2.getSelectedRow();

        if (jTable2.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
            javax.swing.JViewport viewport = (javax.swing.JViewport)jTable2.getParent();
            java.awt.Rectangle rect = jTable2.getCellRect(viewIndex, 0, true);
            java.awt.Point pos = viewport.getViewPosition();
            rect.translate(-pos.x, -pos.y);
            viewport.scrollRectToVisible(rect);
        }
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        java.util.ArrayList<String> liblist = null;
        if (report != null) {
            liblist = report.getLibList();
            (new RoutinesFilterDialog(this, true, liblist, routines_filter_criteria)).setVisible(true);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        findRoutineByName();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        findRoutineByName();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (((SmsTableModel)jTable2.getModel()).getRowCount() > 0) {
            (new SmsFilterDialog(this, true, sms_filter_criteria)).setVisible(true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        openFile();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        Main.newWindow();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        (new AboutDialog(this, true)).setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxMenuItem1.isSelected()) {
            jToggleButton1.setSelected(true);
            timeGraphPanel.setVisible(true);
        }
        else {
            jToggleButton1.setSelected(false);
            timeGraphPanel.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxMenuItem2.isSelected()) {
            jToggleButton2.setSelected(true);
            ratioGraphPanel.setVisible(true);
        }
        else {
            jToggleButton2.setSelected(false);
            ratioGraphPanel.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

    private void jCheckBoxMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxMenuItem3.isSelected()) {
            jToggleButton3.setSelected(true);
            freqGraphPanel.setVisible(true);
        }
        else {
            jToggleButton3.setSelected(false);
            freqGraphPanel.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        // TODO add your handling code here:
        if (jToggleButton4.isSelected()) link_plots = true;
        else link_plots = false;
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        (new MergeReportsDialog(this, true)).setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void enableSaveCommand() {
        jButton7.setEnabled(true);
        jMenuItem6.setEnabled(true);
    }

    private void disableSaveCommand() {
        jButton7.setEnabled(false);
        jMenuItem6.setEnabled(false);
    }

    private void jTable1TableChanged(javax.swing.event.TableModelEvent evt) {
        if (evt.getType() == javax.swing.event.TableModelEvent.UPDATE
                && evt.getColumn() != javax.swing.event.TableModelEvent.ALL_COLUMNS) enableSaveCommand();
    }

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try {
            report.save();
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Can't save report", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            //System.out.println(e.getMessage());
            //e.printStackTrace();
        }
        finally {
            disableSaveCommand();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        try {
            report.save();
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Can't save report", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        finally {
            disableSaveCommand();
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        (new SettingsDialog(this, true)).setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        (new SettingsDialog(this, true)).setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        (new MergeReportsDialog(this, true)).setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void recentMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem1ActionPerformed
        // TODO add your handling code here:
        java.io.File f = Main.getRecentFiles().get(0);
        try {
            loadReport(f);
            Main.addRecentFile(f);
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            Main.removeRecentFile(f);
        }
        finally {
            this.refreshRecentFiles();
        }
    }//GEN-LAST:event_recentMenuItem1ActionPerformed

    private void recentMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem2ActionPerformed
        // TODO add your handling code here:
        java.io.File f = Main.getRecentFiles().get(1);
        try {
            loadReport(f);
            Main.addRecentFile(f);
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            Main.removeRecentFile(f);
        }
        finally {
            this.refreshRecentFiles();
        }
    }//GEN-LAST:event_recentMenuItem2ActionPerformed

    private void recentMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem3ActionPerformed
        // TODO add your handling code here:
        java.io.File f = Main.getRecentFiles().get(2);
        try {
            loadReport(f);
            Main.addRecentFile(f);
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            Main.removeRecentFile(f);
        }
        finally {
            this.refreshRecentFiles();
        }
    }//GEN-LAST:event_recentMenuItem3ActionPerformed

    private void recentMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem4ActionPerformed
        // TODO add your handling code here:
        java.io.File f = Main.getRecentFiles().get(3);
        try {
            loadReport(f);
            Main.addRecentFile(f);
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            Main.removeRecentFile(f);
        }
        finally {
            this.refreshRecentFiles();
        }
    }//GEN-LAST:event_recentMenuItem4ActionPerformed

    private void recentMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem5ActionPerformed
        // TODO add your handling code here:
        java.io.File f = Main.getRecentFiles().get(4);
        try {
            loadReport(f);
            Main.addRecentFile(f);
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            Main.removeRecentFile(f);
        }
        finally {
            this.refreshRecentFiles();
        }
    }//GEN-LAST:event_recentMenuItem5ActionPerformed

    private void recentMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem6ActionPerformed
        // TODO add your handling code here:
        java.io.File f = Main.getRecentFiles().get(5);
        try {
            loadReport(f);
            Main.addRecentFile(f);
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            Main.removeRecentFile(f);
        }
        finally {
            this.refreshRecentFiles();
        }
    }//GEN-LAST:event_recentMenuItem6ActionPerformed

    private void jSplitPane1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jSplitPane1AncestorResized
        // TODO add your handling code here:
        jSplitPane1.setDividerLocation(0.5);
    }//GEN-LAST:event_jSplitPane1AncestorResized

    private void jSplitPane2AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jSplitPane2AncestorResized
        // TODO add your handling code here:
        jSplitPane2.setDividerLocation(0.75);
    }//GEN-LAST:event_jSplitPane2AncestorResized

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            int previousSelectedIndex = jTable1.getSelectedRow();
            RoutineInfo previousSelectedRtn = ((RoutinesTableModel)jTable1.getModel()).getRoutineInfo(jTable1.convertRowIndexToModel(previousSelectedIndex));
            int index = jList1.getSelectedIndex();
            if (index < 0) return;
            //System.out.println("jList1 double-clicked: selected index: " + index);
            RoutineInfo r = ((StackTraceListModel)jList1.getModel()).getContextualizedoutineInfo(index);
            int modelIndex = ((RoutinesTableModel)jTable1.getModel()).getIndex(r);
            if (modelIndex < 0) {
                //routine is collapsed
                UncontextualizedRoutineInfo urtn = ((ContextualizedRoutineInfo)r).getOverallRoutineInfo();
                if (urtn.getCollapsed()) ((RoutinesTableModel)jTable1.getModel()).expandRoutine(urtn);
                modelIndex = ((RoutinesTableModel)jTable1.getModel()).getIndex(r);
                if (modelIndex < 0) {
                    modelIndex = ((RoutinesTableModel)jTable1.getModel()).getIndex(previousSelectedRtn);
                    int viewIndex = jTable1.convertRowIndexToView(modelIndex);
                    jTable1.setRowSelectionInterval(viewIndex, viewIndex);
                    JOptionPane.showMessageDialog(this, "The selected routine is blacklisted\nand cannot be displayed");
                    return;
                }
            }
            int viewIndex = jTable1.convertRowIndexToView(modelIndex);
            if (viewIndex < 0) {
                this.removeRoutineTableFilter();
                viewIndex = jTable1.convertRowIndexToView(modelIndex);
                if (viewIndex < 0) {
                    modelIndex = ((RoutinesTableModel)jTable1.getModel()).getIndex(previousSelectedRtn);
                    viewIndex = jTable1.convertRowIndexToView(modelIndex);
                    jTable1.setRowSelectionInterval(viewIndex, viewIndex);
                    JOptionPane.showMessageDialog(this, "The selected routine is blacklisted\nand cannot be displayed");
                    return;
                }
            }
            jTable1.setRowSelectionInterval(viewIndex, viewIndex);
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        if (this.rtn_info == null) return;
        ArrayList<SmsEntry> ss = this.rtn_info.getTimeEntries();
        try {
            File tmp = new File(this.report.getName() + "."
                                + this.rtn_info.getName() + ".sms");
            tmp.createNewFile();
            PrintWriter out = new PrintWriter(new FileWriter(tmp));
            for (int i = 0; i < ss.size(); i++) {
                SmsEntry s = ss.get(i);
                out.println(s.getSms() + " " + (int) s.getMinCost() + " " +
                                  (int) s.getMaxCost() + " " + (long) s.getSumCost()
                                    + " " + (long)s.getSumSquareCost()
                                    + " " + (long)s.getOcc());
            }
            out.close();
        } catch(java.io.IOException e) {
            System.out.println("Error file");
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        ArrayList<RoutineInfo> els = this.report.getRoutines();
        try {
            File tmp = new File(this.report.getName() + ".sms");
            tmp.createNewFile();
            PrintWriter out = new PrintWriter(new FileWriter(tmp));
            for (int i = 0; i < els.size(); i++) {
                RoutineInfo el = els.get(i);
                out.println(el.getID() + " " +
                            (int) el.getSizeTimeEntries() + " " +
                            (int) el.getTotalTime() + " " +
                            (int) el.getTotalCalls() + " " +
                            el.getName()
                            );
            }
            out.close();
        } catch(java.io.IOException e) {}
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            File file = null;
            if (report == null) {
                ArrayList<File> r = Main.getRecentFiles();
                if (r.size() <= 0) return;
                file = r.get(0);
            } else {
                file = new File(this.report.getName());
            }
            loadReport(file);
            Main.addRecentFile(file);
            this.refreshRecentFiles();
        }
        catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
        if (jToggleButton5.isSelected()) {
            graph_visible++;
            jPanel9.add(MMMGraphPanel);
            MMMGraphPanel.setVisible(true);
            MMMGraphPanel.setData(this.rtn_info);
        }
        else {
            graph_visible--;
            MMMGraphPanel.setVisible(false);
            jPanel9.remove(MMMGraphPanel);
        }

        adjustLayout();
        
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
        if (jToggleButton6.isSelected()) {
            graph_visible++;
            jPanel9.add(VarGraphPanel);
            VarGraphPanel.setVisible(true);
            VarGraphPanel.setData(this.rtn_info);
        }
        else {
            graph_visible--;
            VarGraphPanel.setVisible(false);
            jPanel9.remove(VarGraphPanel);
        }
        
        adjustLayout();
            
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
        if (jToggleButton7.isSelected()) {
            graph_visible++;
            jPanel9.add(SumGraphPanel);
            SumGraphPanel.setVisible(true);
            SumGraphPanel.setData(this.rtn_info);
        }
        else {
            graph_visible--;
            SumGraphPanel.setVisible(false);
            jPanel9.remove(SumGraphPanel);
        }
        
        adjustLayout();
            
    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void jToggleButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton8ActionPerformed
        if (jToggleButton8.isSelected()) {
            graph_visible++;
            jPanel9.add(RtnGraphPanel);
            RtnGraphPanel.setVisible(true);
            RtnGraphPanel.setData(null);
        }
        else {
            graph_visible--;
            RtnGraphPanel.setVisible(false);
            jPanel9.remove(RtnGraphPanel);
        }
        
        adjustLayout();
        
    }//GEN-LAST:event_jToggleButton8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        try {
            File tmp = new File(this.report.getName() + ".stats");
            tmp.createNewFile();
            PrintWriter out = new PrintWriter(new FileWriter(tmp));
            long[] num_class_sms = report.num_class_sms;
            int x = 0;
            double y1, y2, y3, y4;
            out.println("# SMS_CLASS_X PERC_TOTAL_CALLS PERC_AVG_CALLS PERC_MAX_CALLS PERC_NUMBER_OF_ROUTINE");
            for (int k = 0; k < report.num_class_sms.length; k++) {

                if (report.num_class_sms[k] == 0) continue;
                x = (int) Math.pow(2, k);
                y1 = (100 * ((double) report.tot_cost_class_sms[k] / (double) report.getTotalCalls()));
                y2 = (100 * ((double) ((double) report.tot_cost_class_sms[k] / (double) report.num_class_sms[k]) / (double) report.most_called));
                y4 = (100 * ((double) report.num_class_sms[k] / (double) report.getRoutineCount()));
                y3 = (100 * ((double) report.max_cost_class_sms[k] / (double) report.most_called));

                out.format("%d %.1f %.1f %.1f %.1f%n", x, y1, y2, y3, y4);
            }
            out.close();
        } catch(java.io.IOException e) {}
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void adjustLayout() {
        
        if (graph_visible == 4) {
            if (fake == null) fake = new JPanel();
            jPanel9.add(fake);
        } else if (graph_visible == 7) {
            if (fake == null) fake = new JPanel();
            if (fake2 == null) fake2 = new JPanel();
            jPanel9.add(fake);
            jPanel9.add(fake2);
        } else {
            if (fake != null) jPanel9.remove(fake);
            if (fake2 != null) jPanel9.remove(fake2);
            fake = null;
            fake2 = null;
        }
        
        if (graph_visible <= 3)
            jPanel9.setLayout(new java.awt.GridLayout(1, 3));
        else if (graph_visible <= 6)
            jPanel9.setLayout(new java.awt.GridLayout(2, 3));
        else if (graph_visible <= 9)
            jPanel9.setLayout(new java.awt.GridLayout(3, 3));
        
    }

    protected void removeRoutineTableFilter() {
        this.routines_filter_criteria = new String[5];
        refreshRoutinesTableFilter();
    }

    protected void refreshRoutinesTableFilter() {
        setRoutinesTableFilter(routines_filter_criteria);
    }

    protected void setRoutinesTableFilter(String[] criteria) {
        this.routines_filter_criteria = criteria;
        java.util.ArrayList<String> blacklist = Main.getBlackList();
        //if (Main.getBlackList().size() == 0 && criteria[0] == null && criteria[1] == null && criteria[2] == null && criteria[3] == null) routines_table_sorter.setRowFilter(null); // no filters
        List<RowFilter<TableModel, Integer>> filters = new ArrayList<RowFilter<TableModel, Integer>>(4);
        if (Main.getBlackListEnabled() && blacklist.size() > 0) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> blacklist_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>();
            for (int i = 0; i < blacklist.size(); i++) {
                javax.swing.RowFilter<javax.swing.table.TableModel, Integer> blacklist_filter = null;
                try {
                    blacklist_filter = javax.swing.RowFilter.regexFilter(blacklist.get(i).replace(".", "\\."), 0);
                }
                catch (java.util.regex.PatternSyntaxException e) {
                    return;
                }
                blacklist_filters.add(javax.swing.RowFilter.notFilter(blacklist_filter));
            }
            RowFilter<TableModel, Integer> f = RowFilter.andFilter(blacklist_filters);
            filters.add(f);
        }
        if (criteria[0] != null) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> timeperc_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(2);
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> timeperc_equal_filter = null;
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> timeperc_greater_filter = null;
            try {
                timeperc_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[0])), 4);
                timeperc_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[0])), 4);
            }
            catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            timeperc_filters.add(timeperc_equal_filter);
            timeperc_filters.add(timeperc_greater_filter);
            RowFilter<TableModel, Integer> f = javax.swing.RowFilter.orFilter(timeperc_filters);
            filters.add(f);
        }
        if (criteria[1] != null) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> lib_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(1);
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> lib_filter = null;
            try {
                lib_filter = javax.swing.RowFilter.regexFilter(criteria[1], 1);
            }
            catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            lib_filters.add(lib_filter);
            RowFilter<TableModel, Integer> f4 = RowFilter.andFilter(lib_filters);
            filters.add(f4);
        }
        if (criteria[2] != null) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> callsperc_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(2);
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> callsperc_equal_filter = null;
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> callsperc_greater_filter = null;
            try {
                callsperc_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[2])), 8);
                callsperc_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[2])), 8);
            }
            catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            callsperc_filters.add(callsperc_equal_filter);
            callsperc_filters.add(callsperc_greater_filter);
            RowFilter<TableModel, Integer> f5 = RowFilter.orFilter(callsperc_filters);
            filters.add(f5);
        }
        if (criteria[3] != null) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> avgratio_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(2);
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> avgratio_equal_filter = null;
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> avgratio_greater_filter = null;
            try {
                avgratio_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[3])), 5);
                avgratio_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[3])), 5);
            }
            catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            avgratio_filters.add(avgratio_equal_filter);
            avgratio_filters.add(avgratio_greater_filter);
            RowFilter<TableModel, Integer> f6 = RowFilter.orFilter(avgratio_filters);
            filters.add(f6);
        }
        if (criteria[4] != null) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> nsms_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(2);
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> nsms_equal_filter = null;
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> nsms_greater_filter = null;
            try {
                nsms_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[4])), 3);
                nsms_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[4])), 3);
            }
            catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            nsms_filters.add(nsms_equal_filter);
            nsms_filters.add(nsms_greater_filter);
            RowFilter<TableModel, Integer> f7 = RowFilter.orFilter(nsms_filters);
            filters.add(f7);
        }
        routines_table_sorter.setRowFilter(javax.swing.RowFilter.andFilter(filters));
    }

    protected String[] getSmsTableFilter() {
        return sms_filter_criteria;
    }

    private void refresPlotFilter() {
        if (timeGraphPanel != null) timeGraphPanel.refreshFilter();
        if (ratioGraphPanel != null) ratioGraphPanel.refreshFilter();
        if (freqGraphPanel != null) freqGraphPanel.refreshFilter();
        if (MMMGraphPanel != null) MMMGraphPanel.refreshFilter();
        if (SumGraphPanel != null) SumGraphPanel.refreshFilter();
        if (VarGraphPanel != null) VarGraphPanel.refreshFilter();
        if (RtnGraphPanel != null) RtnGraphPanel.refreshFilter();
    }

    protected void setSmsTableFilter(String[] criteria) {
        this.sms_filter_criteria = criteria;
        refresPlotFilter();
        if (criteria[0] == null && criteria[1] == null && criteria[2] == null) sms_table_sorter.setRowFilter(null); // no filters
        ArrayList<RowFilter<TableModel, Integer>> filters = new ArrayList<RowFilter<TableModel, Integer>>(3);
        if (criteria[0] != null) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> time_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(2);
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> time_equal_filter = null;
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> time_greater_filter = null;
            try {
                time_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[0])), 1);
                time_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[0])), 1);
            }
            catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            time_filters.add(time_equal_filter);
            time_filters.add(time_greater_filter);
            RowFilter<TableModel, Integer> f = RowFilter.orFilter(time_filters);
            filters.add(f);
        }
        if (criteria[1] != null) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> ratio_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(2);
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> ratio_equal_filter = null;
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> ratio_greater_filter = null;
            try {
                ratio_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[1])), 2);
                ratio_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[1])), 2);
            }
            catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            ratio_filters.add(ratio_equal_filter);
            ratio_filters.add(ratio_greater_filter);
            RowFilter<TableModel, Integer> f = RowFilter.orFilter(ratio_filters);
            filters.add(f);
        }
        if (criteria[2] != null) {
            java.util.List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> freq_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(2);
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> freq_equal_filter = null;
            javax.swing.RowFilter<javax.swing.table.TableModel, Integer> freq_greater_filter = null;
            try {
                freq_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[2])), 3);
                freq_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[2])), 3);
            }
            catch (java.util.regex.PatternSyntaxException e) {
                return;
            }
            freq_filters.add(freq_equal_filter);
            freq_filters.add(freq_greater_filter);
            RowFilter<TableModel, Integer> f = RowFilter.orFilter(freq_filters);
            filters.add(f);
        }
        sms_table_sorter.setRowFilter(javax.swing.RowFilter.andFilter(filters));
    }

    private void findRoutineByName() {
        String query = jTextField1.getText();
        if (jTable1.getRowCount() > 0 && !query.equals("")) {
            int i = jTable1.getSelectedRow();
            if (i < 0) i = 0;
            int size = jTable1.getRowCount();
            i++;
            if (i >= size) i = 0;
            int start = i;
            while (true) {
                RoutineInfo rtn_info = ((RoutinesTableModel)jTable1.getModel()).getRoutineInfo(jTable1.convertRowIndexToModel(i));
                if (rtn_info.getName().contains(query)) {
                    jTable1.setRowSelectionInterval(i,i);
                    if (jTable1.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
                        javax.swing.JViewport viewport = (javax.swing.JViewport)jTable1.getParent();
                        java.awt.Rectangle rect = jTable1.getCellRect(i, 0, true);
                        java.awt.Point pos = viewport.getViewPosition();
                        rect.translate(-pos.x, -pos.y);
                        viewport.scrollRectToVisible(rect);
                    }
                    return;
                }
                i++;
                if (i >= size) i = 0;
                if (i == start) {
                    //not found
                    javax.swing.JOptionPane.showMessageDialog(this, "text not found");
                    return;
                }
            }
        }
    }

    private void expandContextTree() {
        for (int i = 0; i < jTree1.getRowCount(); i++) {
            jTree1.expandRow(i);
        }
    }

    private void addBranchToTree(DefaultMutableTreeNode root, ArrayList<ContextualizedRoutineInfo> branch) {
        if (root.getChildCount() == 0) {
            DefaultMutableTreeNode currentNode = root;
            for (int i = branch.size() - 1; i >= 0; i--) {
                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(branch.get(i));
                currentNode.add(newNode);
                currentNode = newNode;
            }
        }
        else {
            DefaultMutableTreeNode currentNode = root;
            int i = branch.size() - 1;
            for (; i >= 0; i--) {
                boolean pathFound = false;
                for (int j = 0; j < currentNode.getChildCount(); j++) {
                    DefaultMutableTreeNode child = (DefaultMutableTreeNode)currentNode.getChildAt(j);
                    if (child.getUserObject().equals(branch.get(i))) {
                        currentNode = child;
                        pathFound = true;
                        break;
                    }
                }
                if (!pathFound) break;
            }
            for (; i >= 0; i--) {
                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(branch.get(i));
                currentNode.add(newNode);
                currentNode = newNode;
            }
        }
    }

    private void updateContextTree(RoutineInfo rtn) {
        DefaultTreeModel treeModel = (DefaultTreeModel)jTree1.getModel();
        if (rtn == null || rtn instanceof ContextualizedRoutineInfo) treeModel.setRoot(null);
        else {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("context trees:");
            UncontextualizedRoutineInfo urtn = (UncontextualizedRoutineInfo)rtn;
            for (int i = 0; i < urtn.getContextCount(); i++) {
                ContextualizedRoutineInfo crtn = urtn.getContexts().get(i);
                ArrayList<ContextualizedRoutineInfo> branch = new ArrayList<ContextualizedRoutineInfo>();
                while (crtn != null) {
                    branch.add(crtn);
                    crtn = crtn.getParent();
                }
                addBranchToTree(root, branch);
            }
            treeModel.setRoot(root);
            expandContextTree();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JToggleButton jToggleButton8;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem recentMenuItem1;
    private javax.swing.JMenuItem recentMenuItem2;
    private javax.swing.JMenuItem recentMenuItem3;
    private javax.swing.JMenuItem recentMenuItem4;
    private javax.swing.JMenuItem recentMenuItem5;
    private javax.swing.JMenuItem recentMenuItem6;
    // End of variables declaration//GEN-END:variables
    private GraphPanel timeGraphPanel, ratioGraphPanel, 
                        freqGraphPanel, MMMGraphPanel,
                        SumGraphPanel, VarGraphPanel,
                        RtnGraphPanel;
    private javax.swing.table.TableRowSorter<javax.swing.table.TableModel> routines_table_sorter;
    private javax.swing.table.TableRowSorter<javax.swing.table.TableModel> sms_table_sorter;
    private String[] routines_filter_criteria;
    private String[] sms_filter_criteria;
    private AprofReport report;
    private boolean link_plots = true;
    private javax.swing.JMenuItem[] recentMenuItems = new javax.swing.JMenuItem[6];
}
