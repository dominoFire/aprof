package aprofplot.gui;

import aprofplot.*;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.TableModel;
import javax.swing.tree.*;
import java.util.*;
import java.io.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;

public class MainWindow extends javax.swing.JFrame {

	private Routine rtn_info = null;
	private int graph_visible = 0;
	
	// add graph at the end of the list or wrt the "priority" order
	boolean append_graph = false;
	
	// Perfomance monitor
	PerfomanceMonitor perf = new PerfomanceMonitor();
	
	// Used for adapt correctly layout
	private JPanel fake = null;
	private JPanel fake2 = null;

	/** Creates new form MainWindow */
	public MainWindow() {
		
		try {
			
			setExtendedState(MAXIMIZED_BOTH);
			javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
			initComponents();
			initGraph();
			refreshRecentFiles();
			resetRoutineTableFilter();
		
		} catch (Exception e) {
		
			System.out.println("Fatal error during start of MainWindow [1]");
			//e.printStackTrace();
			System.exit(1);
		
		}
	
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem5 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem6 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem7 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem8 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem9 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem10 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem11 = new javax.swing.JCheckBoxMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton6 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jToggleButton10 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jButton8 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new JTable(new RoutinesTableModel(this.report)) {
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column)
            {
                try {
                    Component c = super.prepareRenderer(renderer, row, column);
                    if (c != null && !c.getBackground().equals(getSelectionBackground())) {
                        c.setBackground(java.awt.Color.WHITE);
                    }
                    return c;
                } catch(NullPointerException e) {
                    System.out.println("row: " + row + " col: " + column);
                    return null;
                }
            }
        };
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel9 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        recentMenuItem1 = new javax.swing.JMenuItem();
        recentMenuItem2 = new javax.swing.JMenuItem();
        recentMenuItem3 = new javax.swing.JMenuItem();
        recentMenuItem4 = new javax.swing.JMenuItem();
        recentMenuItem5 = new javax.swing.JMenuItem();
        recentMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem12 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem13 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem14 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem15 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem16 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem17 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem18 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem19 = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Filter-icon.png"))); // NOI18N
        jButton5.setToolTipText("Filter routines");
        jScrollPane1.setCorner(javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER, jButton5);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Filter-icon.png"))); // NOI18N
        jButton4.setToolTipText("Filter rms");
        jScrollPane2.setCorner(javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER, jButton4);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPopupMenu1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenu1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jCheckBoxMenuItem4.setText("Cost plot");
        jCheckBoxMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItem4);

        jCheckBoxMenuItem5.setText("Min/Avg/Max cost plot");
        jCheckBoxMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItem5);

        jCheckBoxMenuItem6.setText("Total cost plot");
        jCheckBoxMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem6ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItem6);

        jCheckBoxMenuItem7.setText("Mean cumulative cost plot");
        jCheckBoxMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem7ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItem7);

        jCheckBoxMenuItem8.setText("Curve bounding plot");
        jCheckBoxMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem8ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItem8);

        jCheckBoxMenuItem9.setText("Cost variance plot");
        jCheckBoxMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem9ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItem9);

        jCheckBoxMenuItem10.setText("Rms frequency plot");
        jCheckBoxMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem10ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItem10);

        jCheckBoxMenuItem11.setText("Program statistics plot");
        jCheckBoxMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem11ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItem11);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("aprof-plot");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/App-icon.png"))).getImage());
        setMinimumSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar1.setRollover(true);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/NewWindow-icon.png"))); // NOI18N
        jButton3.setToolTipText("open a new window");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Open-icon.png"))); // NOI18N
        jButton1.setToolTipText("open an Aprof report file");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Save-icon.png"))); // NOI18N
        jButton7.setToolTipText("save report changes");
        jButton7.setEnabled(false);
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/refresh.png"))); // NOI18N
        jButton9.setToolTipText("Reload last recent report");
        jButton9.setEnabled(false);
        ArrayList<File> r = Main.getRecentFiles();
        if (r.size() > 0) {
            jButton9.setEnabled(true);
        }
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton9);
        jToolBar1.add(jSeparator2);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Merge-icon.png"))); // NOI18N
        jButton6.setToolTipText("merge two or more aprof report files");
        jButton6.setEnabled(false);
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);
        jToolBar1.add(jSeparator5);

        jToggleButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/statistics.png"))); // NOI18N
        jToggleButton10.setToolTipText("Select graphs to be shown");
        jToggleButton10.setFocusable(false);
        jToggleButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton10ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton10);

        jToggleButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Unlink-icon.png"))); // NOI18N
        jToggleButton4.setSelected(true);
        jToggleButton4.setToolTipText("link/unlink plots");
        jToggleButton4.setFocusable(false);
        jToggleButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Unlink-icon.png"))); // NOI18N
        jToggleButton4.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Link-icon.png"))); // NOI18N
        jToggleButton4.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Link-icon.png"))); // NOI18N
        jToggleButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton4);
        jToolBar1.add(jSeparator3);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Settings-icon.png"))); // NOI18N
        jButton8.setToolTipText("settings");
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton8);
        jToolBar1.add(jSeparator6);

        jTextField1.setMaximumSize(new java.awt.Dimension(150, 27));
        jTextField1.setMinimumSize(new java.awt.Dimension(100, 27));
        jTextField1.setPreferredSize(new java.awt.Dimension(150, 27));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        //jToolBar1.add(javax.swing.Box.createHorizontalGlue());
        jToolBar1.add(jTextField1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/aprofplot/gui/resources/Search-icon.png"))); // NOI18N
        jButton2.setToolTipText("find in routines");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);
        jToolBar1.add(jSeparator7);

        jLabel7.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jToolBar1.add(jLabel7);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setText(" Routines: 0 ");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel1);

        jLabel4.setText(" Contexts: 0 ");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel4);

        jLabel5.setText(" Total cost: 0 ");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel5);

        jLabel6.setText(" Total calls: 0 ");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(jLabel6);
        jPanel1.add(jLabel9);
        jPanel1.add(jLabel8);

        jProgressBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        jProgressBar1.setBorderPainted(false);
        jProgressBar1.setEnabled(false);
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setMaximumSize(new java.awt.Dimension(150, 18));
        jProgressBar1.setVisible(false);
        jPanel1.add(jProgressBar1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setDividerLocation(0.5);
        jSplitPane1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jSplitPane1AncestorResized(evt);
            }
        });

        jSplitPane2.setResizeWeight(0.9);
        jSplitPane2.setDividerLocation(0.65);
        jSplitPane2.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jSplitPane2AncestorResized(evt);
            }
        });

        jPanel6.setMinimumSize(new java.awt.Dimension(200, 120));
        jPanel6.setPreferredSize(new java.awt.Dimension(750, 400));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setDoubleBuffered(true);
        jTable1.setAutoCreateColumnsFromModel(false);
        jTable1.setRowHeight(52);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        routines_table_sorter
        = new javax.swing.table.TableRowSorter<javax.swing.table.TableModel>(jTable1.getModel());
        jTable1.setRowSorter(routines_table_sorter);

        java.util.List <javax.swing.RowSorter.SortKey> routine_table_sortKeys
        = new java.util.ArrayList<javax.swing.RowSorter.SortKey>();
        routine_table_sortKeys.add(new javax.swing.RowSorter.SortKey(3, javax.swing.SortOrder.DESCENDING));
        routines_table_sorter.setSortKeys(routine_table_sortKeys);

        routines_table_sorter.setSortable(6, false);

        jTable1.setDefaultRenderer(Routine.class, new PlotThumbRenderer());
        jTable1.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable1ValueChanged(evt);
            }
        });
        jTable1.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                jTable1TableChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(" ");
        jPanel7.add(jLabel3, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jSplitPane2.setLeftComponent(jPanel6);

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(150, 207));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(650, 590));

        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane3.setDividerSize(0);

        jPanel4.setMinimumSize(new java.awt.Dimension(26, 100));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(550, 450));

        jTable2.setModel(new RmsTableModel(null));
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        /*javax.swing.table.TableRowSorter<javax.swing.table.TableModel> */sms_table_sorter
        = new javax.swing.table.TableRowSorter<javax.swing.table.TableModel>(jTable2.getModel());
        jTable2.setRowSorter(sms_table_sorter);

        java.util.List <javax.swing.RowSorter.SortKey> sms_table_sortKeys
        = new java.util.ArrayList<javax.swing.RowSorter.SortKey>();
        sms_table_sortKeys.add(new javax.swing.RowSorter.SortKey(0, javax.swing.SortOrder.ASCENDING));
        sms_table_sorter.setSortKeys(sms_table_sortKeys);
        jTable2.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane3.setTopComponent(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Stack trace");
        jPanel5.add(jLabel2, java.awt.BorderLayout.NORTH);

        jList1.setModel(new StackTraceListModel());
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        if(false) {
            jSplitPane3.setRightComponent(jPanel5);
        } else jSplitPane3.setRightComponent(null);

        jTabbedPane1.addTab("Routine profile", jSplitPane3);

        jPanel8.setPreferredSize(new java.awt.Dimension(164, 362));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jTree1.setModel(new DefaultTreeModel(null));
        jTree1.setRootVisible(false);
        jScrollPane4.setViewportView(jTree1);

        jPanel8.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        if (report != null && report.hasContexts()) {
            jTabbedPane1.addTab("Context tree", jPanel8);
        }

        jSplitPane2.setRightComponent(jTabbedPane1);

        jSplitPane1.setBottomComponent(jSplitPane2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.GridLayout(2, 3));
        jScrollPane5.setViewportView(jPanel9);

        jPanel3.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel3);

        jPanel2.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setMnemonic('n');
        jMenuItem1.setText("New window");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setMnemonic('o');
        jMenuItem5.setText("Open file...");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenu5.setMnemonic('r');
        jMenu5.setText("Open recent file");

        recentMenuItem1.setText("recent file");
        recentMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem1);
        recentMenuItems[0] = recentMenuItem1;

        recentMenuItem2.setText("recent file");
        recentMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem2);
        recentMenuItems[1] = recentMenuItem2;

        recentMenuItem3.setText("recent file");
        recentMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem3);
        recentMenuItems[2] = recentMenuItem3;

        recentMenuItem4.setText("recent file");
        recentMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem4);
        recentMenuItems[3] = recentMenuItem4;

        recentMenuItem5.setText("recent file");
        recentMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem5);
        recentMenuItems[4] = recentMenuItem5;

        recentMenuItem6.setText("recent file");
        recentMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(recentMenuItem6);
        recentMenuItems[5] = recentMenuItem6;

        jMenu1.add(jMenu5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Save");
        jMenuItem6.setEnabled(false);
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenu6.setText("Export");
        jMenu6.setEnabled(false);

        jMenuItem11.setText("Routine profile...");
        jMenuItem11.setEnabled(false);
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem11);

        jMenuItem12.setText("Program profile...");
        jMenuItem12.setEnabled(false);
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem12);

        jMenuItem13.setText("Program statistics...");
        jMenuItem13.setEnabled(false);
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem13);

        jMenu1.add(jMenu6);

        jMenuItem7.setText("Merge...");
        jMenuItem7.setEnabled(false);
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);
        jMenu1.add(jSeparator4);

        jMenuItem2.setMnemonic('x');
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('e');
        jMenu2.setText("Edit");

        jMenuItem4.setMnemonic('s');
        jMenuItem4.setText("Settings...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('v');
        jMenu3.setText("View");

        jCheckBoxMenuItem12.setText("Cost plot");
        jCheckBoxMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem12);

        jCheckBoxMenuItem13.setText("Min/Avg/Max cost plot");
        jCheckBoxMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem13);

        jCheckBoxMenuItem14.setText("Total cost plot");
        jCheckBoxMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem14ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem14);

        jCheckBoxMenuItem15.setText("Mean cumulative cost plot");
        jCheckBoxMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem15ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem15);

        jCheckBoxMenuItem16.setText("Curve bounding plot");
        jCheckBoxMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem16ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem16);

        jCheckBoxMenuItem17.setText("Cost variance plot");
        jCheckBoxMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem17ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem17);

        jCheckBoxMenuItem18.setText("Rms frequency plot");
        jCheckBoxMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem18ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem18);

        jCheckBoxMenuItem19.setText("Program statistics plot");
        jCheckBoxMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem19ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem19);

        jMenuBar1.add(jMenu3);

        jMenu4.setMnemonic('h');
        jMenu4.setText("Help");

        jMenuItem3.setMnemonic('a');
        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	public AprofReport getCurrentReport(){
		return report;
	}
	
	private void showStackTrace(boolean show) {
		if (show) {
			jSplitPane3.setDividerSize(6);
			jSplitPane3.setDividerLocation(0.5);
			jSplitPane3.setRightComponent(jPanel5);
		} else {
			jSplitPane3.setDividerSize(0);
			jSplitPane3.setRightComponent(null);
		}
	}
	
	protected final void refreshRecentFiles() {
		hideRecentMenuItems();
		java.util.ArrayList<java.io.File> recent = Main.getRecentFiles();
		if (recent.isEmpty()) jMenu5.setEnabled(false);
		else {
			jMenu5.setEnabled(true);
			for (int i = 0; i < recent.size(); i++) {
				recentMenuItems[i].setText(recent.get(i).getName());
				recentMenuItems[i].setVisible(true);
			}
		}
	}

	private void hideRecentMenuItems() {
		jMenu5.setEnabled(false);
		recentMenuItem1.setVisible(false);
		recentMenuItem2.setVisible(false);
		recentMenuItem3.setVisible(false);
		recentMenuItem4.setVisible(false);
		recentMenuItem5.setVisible(false);
		recentMenuItem6.setVisible(false);
	}

	private void updateGUI(java.io.File file) {
		
		this.setTitle(file.toString() + " - aprof-plot");
		jLabel3.setText("Profile report for " + report.getAppName() + " (" + report.getCommandLine() + ")");
		jLabel1.setText(" Routines: " + report.getRoutineCount() + " ");
		jLabel4.setText(" Contexts: " + report.getTotalContexts() + " ");
		jLabel5.setText(" Total cost: " + report.getTotalCost() + " ");
		jLabel6.setText(" Calls: " + report.getTotalCalls() + " ");
	
	}

	protected void loadReport(final File file) throws Exception {
		
		jProgressBar1.setVisible(true);
		jProgressBar1.setEnabled(true);
		
		SwingWorker worker = new SwingWorker<AprofReport, Void>() {
			
			@Override
			public AprofReport doInBackground() {
				try {
					setReport(new AprofReport(file), file);
				} catch (Exception ex) {
					System.out.println("Fail to load");
				}
				return report;
			}
			
		};
		worker.execute();
		
	}
		
	private void setReport(AprofReport report, File file) throws Exception {
		
		/*
		boolean oldReportHasContext = false;
		if (this.report != null && this.report.hasContexts())
			oldReportHasContext = true;
		*/
		
		this.report = report;
		
		// reload button
		jButton9.setEnabled(true);
		jButton9.setToolTipText("Reload this report");
		
		// enable entries in export menu
		jMenu6.setEnabled(true);
		jMenuItem12.setEnabled(true);
		jMenuItem13.setEnabled(true);
		
		resetRoutineTableFilter();
		
		// Update some labels in the GUI
		updateGUI(file);
		
		// Clear all graphs
		if (jCheckBoxMenuItem4.isSelected()) CostGraphPanel.clearData();
		if (jCheckBoxMenuItem8.isSelected()) ratioGraphPanel.clearData();
		if (jCheckBoxMenuItem11.isSelected()) freqGraphPanel.clearData();
		if (jCheckBoxMenuItem5.isSelected()) MMMGraphPanel.clearData();
		if (jCheckBoxMenuItem10.isSelected()) VarGraphPanel.clearData();
		if (jCheckBoxMenuItem6.isSelected()) TotalCostGraphPanel.clearData();
		if (jCheckBoxMenuItem7.isSelected()) MccGraphPanel.clearData();
		if (jCheckBoxMenuItem9.isSelected()) RtnGraphPanel.setData(null);
		
		// Update routine table
		RoutinesTableModel m = (RoutinesTableModel)jTable1.getModel();
		m.setData(report);
		
		// If routine table change structure, sorting by rms does not work anymore
		java.util.List <RowSorter.SortKey> routine_table_sortKeys 
			= new ArrayList<RowSorter.SortKey>();
		routine_table_sortKeys.add(new RowSorter.SortKey(3, SortOrder.DESCENDING));
		routines_table_sorter.setSortKeys(routine_table_sortKeys);

		routines_table_sorter.setSortable(6, false);
		
		// Clear routinr profile
		((RmsTableModel)jTable2.getModel()).setData(null);
		
		
		jProgressBar1.setVisible(false);
		jProgressBar1.setEnabled(false);
		
	}

	private void saveForm() {
	
		if (jButton7.isEnabled()) {
			int choice = javax.swing.JOptionPane.showConfirmDialog(this,
													  "Do you want to save changes to this report?",
													  "Unsaved changes",
													  javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,
													  javax.swing.JOptionPane.QUESTION_MESSAGE);
			if (choice == javax.swing.JOptionPane.CANCEL_OPTION) return;
			if (choice == javax.swing.JOptionPane.OK_OPTION) {
				try {
					report.save();
				} catch (Exception e) {
					javax.swing.JOptionPane.showMessageDialog(this, "Can't save report", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
				}
			}
			
		}
	
	}
	
	private void openFile() {
		
		saveForm();
		disableSaveCommand();
		
		javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
		String lastReportPath = Main.getLastReportPath();
		if (!lastReportPath.equals("")) chooser.setCurrentDirectory(new java.io.File(lastReportPath));
		javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter("Aprof report files (*.aprof)", "aprof");
		chooser.setFileFilter(filter);
		chooser.setAcceptAllFileFilterUsed(false);
		int choice = chooser.showOpenDialog(this);
		if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {
			java.io.File file = chooser.getSelectedFile();
			Main.storeLastReportPath(file.getParent());
			try {
				loadReport(file);
				Main.addRecentFile(file);
				refreshRecentFiles();
			} catch (Exception e) {
				e.printStackTrace();
				javax.swing.JOptionPane.showMessageDialog(this, 
						"Couldn't open the selected file", "Error", 
						javax.swing.JOptionPane.ERROR_MESSAGE);
			}
		}
	
	}

	protected void refreshTables() {
		
		int viewIndex = jTable1.getSelectedRow();
		int viewIndex2 = jTable2.getSelectedRow();
		((RmsTableModel)jTable2.getModel()).refresh();
		if (viewIndex2 >= 0) {
			int modelIndex2 = jTable1.convertRowIndexToModel(viewIndex2);
			viewIndex2 = jTable1.convertRowIndexToView(modelIndex2);
			jTable2.setRowSelectionInterval(viewIndex2, viewIndex2);
			if (jTable2.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
				javax.swing.JViewport viewport = (javax.swing.JViewport)jTable2.getParent();
				java.awt.Rectangle rect = jTable2.getCellRect(viewIndex2, 0, true);
				java.awt.Point pos = viewport.getViewPosition();
				rect.translate(-pos.x, -pos.y);
				viewport.scrollRectToVisible(rect);
			}
		}
	}

	protected boolean arePlotsLinked() {
		return this.linked_plots;
	}

	protected void setXLogScaleAll(int graph_type, boolean log) {
		
		// this method is called by one graph, we notify to all others...
		
		if (graph_type != GraphPanel.COST_PLOT) CostGraphPanel.setXLogScale(log);
		if (graph_type != GraphPanel.RATIO_PLOT) ratioGraphPanel.setXLogScale(log);
		if (graph_type != GraphPanel.FREQ_PLOT) freqGraphPanel.setXLogScale(log);
		if (graph_type != GraphPanel.MMM_PLOT) MMMGraphPanel.setXLogScale(log);
		if (graph_type != GraphPanel.VAR_PLOT) VarGraphPanel.setXLogScale(log);
		if (graph_type != GraphPanel.TOTALCOST_PLOT) TotalCostGraphPanel.setXLogScale(log);
		if (graph_type != GraphPanel.RTN_PLOT) RtnGraphPanel.setXLogScale(log);
		if (graph_type != GraphPanel.MCC_PLOT) MccGraphPanel.setXLogScale(log);
	
	}

	protected void setYLogScaleAll(int graph_type, boolean log) {
		
		// this method is called by one graph, we notify to all others...
		
		if (graph_type != GraphPanel.COST_PLOT) CostGraphPanel.setYLogScale(log);
		if (graph_type != GraphPanel.RATIO_PLOT) ratioGraphPanel.setYLogScale(log);
		if (graph_type != GraphPanel.FREQ_PLOT) freqGraphPanel.setYLogScale(log);
		if (graph_type != GraphPanel.MMM_PLOT) MMMGraphPanel.setYLogScale(log);
		if (graph_type != GraphPanel.TOTALCOST_PLOT) TotalCostGraphPanel.setYLogScale(log);
		if (graph_type != GraphPanel.VAR_PLOT) VarGraphPanel.setYLogScale(log);
		if (graph_type != GraphPanel.MCC_PLOT) MccGraphPanel.setYLogScale(log);
		if (graph_type != GraphPanel.RTN_PLOT) RtnGraphPanel.setYLogScale(log);
	
	}

	protected void maximizeAll(int graph_type) {

		// this method is called by one graph, we notify to all others...
		
		if (graph_type != GraphPanel.COST_PLOT) CostGraphPanel.maximize();
		if (graph_type != GraphPanel.RATIO_PLOT) ratioGraphPanel.maximize();
		if (graph_type != GraphPanel.FREQ_PLOT) freqGraphPanel.maximize();
		if (graph_type != GraphPanel.MMM_PLOT) MMMGraphPanel.maximize();
		if (graph_type != GraphPanel.TOTALCOST_PLOT) TotalCostGraphPanel.maximize();
		if (graph_type != GraphPanel.VAR_PLOT) VarGraphPanel.maximize();
		if (graph_type != GraphPanel.RTN_PLOT) RtnGraphPanel.maximize();
		if (graph_type != GraphPanel.MCC_PLOT) MccGraphPanel.maximize();
	
	}

	protected void setGroupThresholdAll(int graph_type, int threshold) {
		
		// this method is called by one graph, we notify to all others...
		
		if (graph_type != GraphPanel.COST_PLOT) CostGraphPanel.setGroupThreshold(threshold);
		if (graph_type != GraphPanel.RATIO_PLOT) ratioGraphPanel.setGroupThreshold(threshold);
		if (graph_type != GraphPanel.FREQ_PLOT) freqGraphPanel.setGroupThreshold(threshold);
		if (graph_type != GraphPanel.MMM_PLOT) MMMGraphPanel.setGroupThreshold(threshold);
		if (graph_type != GraphPanel.TOTALCOST_PLOT) TotalCostGraphPanel.setGroupThreshold(threshold);
		if (graph_type != GraphPanel.VAR_PLOT) VarGraphPanel.setGroupThreshold(threshold);
		if (graph_type != GraphPanel.RTN_PLOT) RtnGraphPanel.setGroupThreshold(threshold);
		if (graph_type != GraphPanel.MCC_PLOT) MccGraphPanel.setGroupThreshold(threshold);
	
	}

	protected void setSmoothThresholdAll(int graph_type, int threshold) {
		
		// this method is called by one graph, we notify to all others...
		
		if (graph_type != GraphPanel.COST_PLOT) CostGraphPanel.setSmoothThreshold(threshold);
		if (graph_type != GraphPanel.RATIO_PLOT) ratioGraphPanel.setSmoothThreshold(threshold);
		if (graph_type != GraphPanel.FREQ_PLOT) freqGraphPanel.setSmoothThreshold(threshold);
		if (graph_type != GraphPanel.MMM_PLOT) MMMGraphPanel.setSmoothThreshold(threshold);
		if (graph_type != GraphPanel.TOTALCOST_PLOT) TotalCostGraphPanel.setSmoothThreshold(threshold);
		if (graph_type != GraphPanel.VAR_PLOT) VarGraphPanel.setSmoothThreshold(threshold);
		if (graph_type != GraphPanel.RTN_PLOT) RtnGraphPanel.setSmoothThreshold(threshold);
		if (graph_type != GraphPanel.MCC_PLOT) MccGraphPanel.setSmoothThreshold(threshold);
	
	}
	
	protected void setGroupCostAll(int graph_type, int cost_type) {
		
		// this method is called by one graph, we notify to all others...
		
		if (graph_type != GraphPanel.COST_PLOT) this.CostGraphPanel.setGroupCost(cost_type);
		if (graph_type != GraphPanel.RATIO_PLOT) this.ratioGraphPanel.setGroupCost(cost_type);
	
	}

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

		saveForm();
		Main.removeWindow(this);
		this.dispose();
		
	}//GEN-LAST:event_formWindowClosing

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
		Main.newWindow();
	}//GEN-LAST:event_jMenuItem1ActionPerformed

	private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
		formWindowClosing(null);
	}//GEN-LAST:event_jMenuItem2ActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		
		openFile();
		
	}//GEN-LAST:event_jButton1ActionPerformed

	private void jTable1ValueChanged(javax.swing.event.ListSelectionEvent evt) {
		
		int viewIndex = jTable1.getSelectedRow();
		if (viewIndex >= 0) {
			
			int modelIndex = jTable1.convertRowIndexToModel(viewIndex);
			Routine r = ((RoutinesTableModel)jTable1.getModel()).getRoutine(modelIndex);
			
			if (this.rtn_info == r) return;
			//System.out.println("Selected row in routine table");
			
			String name = r.getName();
			if (r instanceof RoutineContext) {
				name += (" (" +((RoutineContext)r).getContextId() + "/" + ((RoutineContext)r).getOverallRoutine().getContextCount() + ")");
			}
			jLabel7.setText(name);
			
			// Update all graph (except routine graph)
			/*
			if (jCheckBoxMenuItem4.isSelected()) CostGraphPanel.setData(r);
			if (jCheckBoxMenuItem8.isSelected()) ratioGraphPanel.setData(r);
			if (jCheckBoxMenuItem10.isSelected()) freqGraphPanel.setData(r);
			if (jCheckBoxMenuItem5.isSelected()) MMMGraphPanel.setData(r);
			if (jCheckBoxMenuItem9.isSelected()) VarGraphPanel.setData(r);
			if (jCheckBoxMenuItem6.isSelected()) TotalCostGraphPanel.setData(r);
			if (jCheckBoxMenuItem7.isSelected()) MccGraphPanel.setData(r);
			*/
			
			perf.start(this, PerfomanceMonitor.ELABORATE);
			
			if (jCheckBoxMenuItem4.isSelected()) CostGraphPanel.setRoutine(r);
			if (jCheckBoxMenuItem8.isSelected()) ratioGraphPanel.setRoutine(r);
			if (jCheckBoxMenuItem10.isSelected()) freqGraphPanel.setRoutine(r);
			if (jCheckBoxMenuItem5.isSelected()) MMMGraphPanel.setRoutine(r);
			if (jCheckBoxMenuItem9.isSelected()) VarGraphPanel.setRoutine(r);
			if (jCheckBoxMenuItem6.isSelected()) TotalCostGraphPanel.setRoutine(r);
			if (jCheckBoxMenuItem7.isSelected()) MccGraphPanel.setRoutine(r);
			
			Iterator i = r.getRmsListIterator();
			while (i.hasNext()) {
				
				Rms te = (Rms) i.next();
				
				if (jCheckBoxMenuItem4.isSelected()) CostGraphPanel.addPoint(te);
				if (jCheckBoxMenuItem8.isSelected()) ratioGraphPanel.addPoint(te);
				if (jCheckBoxMenuItem10.isSelected()) freqGraphPanel.addPoint(te);
				if (jCheckBoxMenuItem5.isSelected()) MMMGraphPanel.addPoint(te);
				if (jCheckBoxMenuItem9.isSelected()) VarGraphPanel.addPoint(te);
				if (jCheckBoxMenuItem6.isSelected()) TotalCostGraphPanel.addPoint(te);
				if (jCheckBoxMenuItem7.isSelected()) MccGraphPanel.addPoint(te);
				
			}
			
			if (jCheckBoxMenuItem4.isSelected()) CostGraphPanel.maximize();
			if (jCheckBoxMenuItem8.isSelected()) ratioGraphPanel.maximize();
			if (jCheckBoxMenuItem10.isSelected()) freqGraphPanel.maximize();
			if (jCheckBoxMenuItem5.isSelected()) MMMGraphPanel.maximize();
			if (jCheckBoxMenuItem9.isSelected()) VarGraphPanel.maximize();
			if (jCheckBoxMenuItem6.isSelected()) TotalCostGraphPanel.maximize();
			if (jCheckBoxMenuItem7.isSelected()) MccGraphPanel.maximize();
			
			// enable/disable entries in export menu related to routine
			if (r == null) jMenuItem11.setEnabled(false);
			else jMenuItem11.setEnabled(true);

			this.rtn_info = r;
			
			// Update routine profile panel
			((RmsTableModel)jTable2.getModel()).setData(r);
			
			// Update stack trace panel
			if (r instanceof RoutineContext) {
				
				((StackTraceListModel)jList1.getModel()).setData(((RoutineContext)r).getStackTrace());
				showStackTrace(true);
				
			} else {
				
				((StackTraceListModel)jList1.getModel()).setData(null);
				showStackTrace(false);
			
			}
			
			perf.stop(this, PerfomanceMonitor.ELABORATE);
			System.gc();
			//updateContextTree(r);
			
		} else {
			
			((RmsTableModel)jTable2.getModel()).setData(null);
			((StackTraceListModel)jList1.getModel()).setData(null);
			jLabel7.setText("");
			//jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "-", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N
			if (jCheckBoxMenuItem4.isSelected()) CostGraphPanel.clearData();
			if (jCheckBoxMenuItem8.isSelected()) ratioGraphPanel.clearData();
			if (jCheckBoxMenuItem11.isSelected()) freqGraphPanel.clearData();
			if (jCheckBoxMenuItem5.isSelected()) MMMGraphPanel.clearData();
			if (jCheckBoxMenuItem10.isSelected()) VarGraphPanel.clearData();
			if (jCheckBoxMenuItem6.isSelected()) TotalCostGraphPanel.clearData();
			if (jCheckBoxMenuItem7.isSelected()) MccGraphPanel.clearData();
			
			//updateContextTree(null);
			
			// Initially hide stack trace panel
			showStackTrace(false);
		
		}

		// Scroll routine table to visible; thanks to fiontan
		if (jTable1.getParent() instanceof javax.swing.JViewport) { 
			javax.swing.JViewport viewport = (javax.swing.JViewport)jTable1.getParent();
			java.awt.Rectangle rect = jTable1.getCellRect(viewIndex, 0, true);
			java.awt.Point pos = viewport.getViewPosition();
			rect.translate(-pos.x, -pos.y);
			viewport.scrollRectToVisible(rect);
		}
	}

	private void jTable2ValueChanged(javax.swing.event.ListSelectionEvent evt) {
		
		// Scroll routine profile panel to visible; thanks to fiontan
		int viewIndex = jTable2.getSelectedRow();
		if (jTable2.getParent() instanceof javax.swing.JViewport) { 
			javax.swing.JViewport viewport = (javax.swing.JViewport)jTable2.getParent();
			java.awt.Rectangle rect = jTable2.getCellRect(viewIndex, 0, true);
			java.awt.Point pos = viewport.getViewPosition();
			rect.translate(-pos.x, -pos.y);
			viewport.scrollRectToVisible(rect);
		}
	
	}

	private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
		
		// Routine filter button (corner routine table)

		if (report != null) {
			java.util.ArrayList<String> liblist = null;
			liblist = report.getLibList();
			(new RoutinesFilterDialog(this, true, liblist, routines_filter_criteria)).setVisible(true);
		}
	}//GEN-LAST:event_jButton5ActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		// search button
		findRoutineByName();
	}//GEN-LAST:event_jButton2ActionPerformed

	private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
		// search text field
		findRoutineByName();
	}//GEN-LAST:event_jTextField1ActionPerformed

	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
		// Routine profile filter button (corner routine profile panel)
		if (((RmsTableModel)jTable2.getModel()).getRowCount() > 0) {
			(new RmsFilterDialog(this, true, rms_filter_criteria)).setVisible(true);
		}
	}//GEN-LAST:event_jButton4ActionPerformed

	private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
		// Menu: File > Open file
		openFile();
	}//GEN-LAST:event_jMenuItem5ActionPerformed

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
		// Menu: File > New window
		Main.newWindow();
	}//GEN-LAST:event_jButton3ActionPerformed

	private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
		// Menu: Help > About
		(new AboutDialog(this, true)).setVisible(true);
	}//GEN-LAST:event_jMenuItem3ActionPerformed

	private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
		// Link plots button
		if (jToggleButton4.isSelected()) linked_plots = true;
		else linked_plots = false;
	}//GEN-LAST:event_jToggleButton4ActionPerformed

	private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
		// Repor merge button
		(new MergeReportsDialog(this, true)).setVisible(true);
	}//GEN-LAST:event_jButton6ActionPerformed

	private void enableSaveCommand() {
		jButton7.setEnabled(true);
		jMenuItem6.setEnabled(true);
	}

	private void disableSaveCommand() {
		jButton7.setEnabled(false);
		jMenuItem6.setEnabled(false);
	}

	private void jTable1TableChanged(javax.swing.event.TableModelEvent evt) {
		// Routine table change
		if (evt.getType() == javax.swing.event.TableModelEvent.UPDATE
				&& evt.getColumn() != javax.swing.event.TableModelEvent.ALL_COLUMNS) 
			enableSaveCommand();
	}

	private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
		// Save button
		try {
			report.save();
		} catch (Exception e) {
			javax.swing.JOptionPane.showMessageDialog(this, "Can't save report", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
			//System.out.println(e.getMessage());
			//e.printStackTrace();
		} finally {
			disableSaveCommand();
		}
	}//GEN-LAST:event_jButton7ActionPerformed

	private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
		// Menu: File > Save
		jButton7ActionPerformed(null);
	}//GEN-LAST:event_jMenuItem6ActionPerformed

	private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
		// Menu: Edit > Settings
		(new SettingsDialog(this, true)).setVisible(true);
	}//GEN-LAST:event_jMenuItem4ActionPerformed

	private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
		// Settings button
		(new SettingsDialog(this, true)).setVisible(true);
	}//GEN-LAST:event_jButton8ActionPerformed

	private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
		// Menu: File > Merge
		(new MergeReportsDialog(this, true)).setVisible(true);
	}//GEN-LAST:event_jMenuItem7ActionPerformed

	private void loadRecentFile(int entry) {
		
		ArrayList<File> r = Main.getRecentFiles();
		if (entry < 0 || entry >= r.size()) return;
	
		java.io.File f = Main.getRecentFiles().get(entry);
		try {
			
			saveForm();
			disableSaveCommand();
			
			loadReport(f);
			Main.addRecentFile(f);
		} catch (Exception e) {
			javax.swing.JOptionPane.showMessageDialog(this, "Couldn't open the selected file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
			Main.removeRecentFile(f);
		} finally {
			this.refreshRecentFiles();
		}
		
	}
	
	private void recentMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem1ActionPerformed
		// Menu: File > Open recent file > (first entry)
		loadRecentFile(0);
	}//GEN-LAST:event_recentMenuItem1ActionPerformed

	private void recentMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem2ActionPerformed
		// Menu: File > Open recent file > (second entry)
		loadRecentFile(1);
	}//GEN-LAST:event_recentMenuItem2ActionPerformed

	private void recentMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem3ActionPerformed
		// Menu: File > Open recent file > (third entry)
		loadRecentFile(2);
	}//GEN-LAST:event_recentMenuItem3ActionPerformed

	private void recentMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem4ActionPerformed
		// Menu: File > Open recent file > (fourth entry)
		loadRecentFile(3);
	}//GEN-LAST:event_recentMenuItem4ActionPerformed

	private void recentMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem5ActionPerformed
		// Menu: File > Open recent file > (fifth entry)
		loadRecentFile(4);
	}//GEN-LAST:event_recentMenuItem5ActionPerformed

	private void recentMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentMenuItem6ActionPerformed
		// Menu: File > Open recent file > (sixth entry)
		loadRecentFile(5);
	}//GEN-LAST:event_recentMenuItem6ActionPerformed

	private void jSplitPane1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jSplitPane1AncestorResized
		// Moved divider btw graphs and routine panels
		jSplitPane1.setDividerLocation(0.5);
	}//GEN-LAST:event_jSplitPane1AncestorResized

	private void jSplitPane2AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jSplitPane2AncestorResized
		// Moved divider btw routine table and routine profile panel
		jSplitPane2.setDividerLocation(0.75);
	}//GEN-LAST:event_jSplitPane2AncestorResized

	private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
		// Clicked on an entry inside stack trace panel
		if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
			int previousSelectedIndex = jTable1.getSelectedRow();
			Routine previousSelectedRtn = ((RoutinesTableModel)jTable1.getModel()).getRoutine(jTable1.convertRowIndexToModel(previousSelectedIndex));
			int index = jList1.getSelectedIndex();
			if (index < 0) return;
			//System.out.println("jList1 double-clicked: selected index: " + index);
			Routine r = ((StackTraceListModel)jList1.getModel()).getContext(index);
			int modelIndex = ((RoutinesTableModel)jTable1.getModel()).getIndex(r);
			if (modelIndex < 0) {
				//routine is collapsed
				ContextualizedRoutineInfo urtn = ((RoutineContext)r).getOverallRoutine();
				if (urtn.getCollapsed()) ((RoutinesTableModel)jTable1.getModel()).expandRoutine(urtn);
				modelIndex = ((RoutinesTableModel)jTable1.getModel()).getIndex(r);
				if (modelIndex < 0) {
					modelIndex = ((RoutinesTableModel)jTable1.getModel()).getIndex(previousSelectedRtn);
					int viewIndex = jTable1.convertRowIndexToView(modelIndex);
					jTable1.setRowSelectionInterval(viewIndex, viewIndex);
					JOptionPane.showMessageDialog(this, "The selected routine is blacklisted\nand cannot be displayed");
					return;
				}
			}
			int viewIndex = jTable1.convertRowIndexToView(modelIndex);
			if (viewIndex < 0) {
				resetRoutineTableFilter();
				viewIndex = jTable1.convertRowIndexToView(modelIndex);
				if (viewIndex < 0) {
					modelIndex = ((RoutinesTableModel)jTable1.getModel()).getIndex(previousSelectedRtn);
					viewIndex = jTable1.convertRowIndexToView(modelIndex);
					jTable1.setRowSelectionInterval(viewIndex, viewIndex);
					JOptionPane.showMessageDialog(this, "The selected routine is blacklisted\nand cannot be displayed");
					return;
				}
			}
			jTable1.setRowSelectionInterval(viewIndex, viewIndex);
		}
	}//GEN-LAST:event_jList1MouseClicked

	private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
		// Reload button
		try {
			File file = null;
			if (report == null) { // Reload last recent report
				ArrayList<File> r = Main.getRecentFiles();
				if (r.size() <= 0) return;
				file = r.get(0);
			} else { // Reload current report
				file = new File(this.report.getName());
			}
			loadReport(file);
			Main.addRecentFile(file);
			this.refreshRecentFiles();
		} catch (Exception e) {
			javax.swing.JOptionPane.showMessageDialog(this, 
					"Couldn't open the selected file", "Error",
					javax.swing.JOptionPane.ERROR_MESSAGE);
			//e.printStackTrace();
		}
		
	}//GEN-LAST:event_jButton9ActionPerformed

	private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
		setExtendedState(MAXIMIZED_BOTH);
	}//GEN-LAST:event_formWindowOpened

	private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
		
		// Menu: File > Export > Routine profile 
		
		if (this.rtn_info == null) return;
		
		Iterator it = rtn_info.getRmsListIterator();
		try {
			
			File tmp = new File(this.report.getName() + "-"
								+ this.rtn_info.getName() + ".rprof");
			
			JFileChooser chooser = new javax.swing.JFileChooser();
			String lastReportPath = Main.getLastReportPath();
			if (!lastReportPath.equals("")) 
				chooser.setCurrentDirectory(new File(lastReportPath));
			
			FileNameExtensionFilter filter = new FileNameExtensionFilter("Routine profile", "rprof");
			chooser.setFileFilter(filter);
			chooser.setAcceptAllFileFilterUsed(false);
			chooser.setSelectedFile(tmp);
			int choice = chooser.showSaveDialog(this.getParent());
			
			if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {
				
				tmp = chooser.getSelectedFile();
				tmp.createNewFile();
				PrintWriter out = new PrintWriter(new FileWriter(tmp));
				while (it.hasNext()) {

					Rms s = (Rms) it.next();
					out.print(s.getRms() + " " + (int) s.getMinCost() 
										+ " " + (int) s.getMaxCost() 
										+ " " + (long) s.getTotalCost()
										+ " " + (long)s.getSqrTotalCost()
										+ " " + (long)s.getOcc());
					out.format(" %.2f%n", rtn_info.getMcc(s.getRms()));

				}
				out.close();
			
			}
			
		} catch(java.io.IOException e) {
			
			JOptionPane.showMessageDialog(this, "Error during export :(",
					"Error", javax.swing.JOptionPane.ERROR_MESSAGE);
			
		}
		
	}//GEN-LAST:event_jMenuItem11ActionPerformed

	private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
		
		// Menu: File > Export > Program profile
		
		ArrayList<Routine> els = this.report.getRoutines();
		try {
			
			File tmp = new File(this.report.getName() + ".pprof");
			
			JFileChooser chooser = new javax.swing.JFileChooser();
			String lastReportPath = Main.getLastReportPath();
			if (!lastReportPath.equals("")) 
				chooser.setCurrentDirectory(new File(lastReportPath));
			
			FileNameExtensionFilter filter = new FileNameExtensionFilter("Program profile", "pprof");
			chooser.setFileFilter(filter);
			chooser.setAcceptAllFileFilterUsed(false);
			chooser.setSelectedFile(tmp);
			int choice = chooser.showSaveDialog(this.getParent());
			
			if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {
				
				tmp = chooser.getSelectedFile();
				tmp.createNewFile();
				PrintWriter out = new PrintWriter(new FileWriter(tmp));
		
				for (int i = 0; i < els.size(); i++) {
					Routine el = els.get(i);
					out.println(el.getID() + " " +
								(int) el.getSizeRmsList() + " " +
								(int) el.getTotalCost() + " " +
								(int) el.getTotalCalls() + " " +
								el.getName()
								);
				}
				out.close();
				
			}
			
		} catch(java.io.IOException e) {
			
			JOptionPane.showMessageDialog(this, "Error during export :(",
					"Error", javax.swing.JOptionPane.ERROR_MESSAGE);
		
		}
		
	}//GEN-LAST:event_jMenuItem12ActionPerformed

	private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
		
		// Menu: File > Export > Program statistics
		
		try {
			
			File tmp = new File(this.report.getName() + ".stats");
			
			JFileChooser chooser = new javax.swing.JFileChooser();
			String lastReportPath = Main.getLastReportPath();
			if (!lastReportPath.equals("")) 
				chooser.setCurrentDirectory(new File(lastReportPath));
			
			FileNameExtensionFilter filter = new FileNameExtensionFilter("Program statistics", "pprof");
			chooser.setFileFilter(filter);
			chooser.setAcceptAllFileFilterUsed(false);
			chooser.setSelectedFile(tmp);
			int choice = chooser.showSaveDialog(this.getParent());
			
			if (choice == javax.swing.JFileChooser.APPROVE_OPTION) {
				
				tmp = chooser.getSelectedFile();
				tmp.createNewFile();
				PrintWriter out = new PrintWriter(new FileWriter(tmp));
				
				long[] num_class_sms = report.getNumCallsClassSms();
				long[] tot_class_sms = report.getTotCallsClassSms();
				long[] max_class_sms = report.getMaxCallsClassSms();
				long most_called = report.getCallsHottestRoutine();
				int x = 0;
				double y1, y2, y3, y4, y5 = 0;
				double sum_at_least = 0;
				out.println("# SMS_CLASS_X PERC_TOTAL_CALLS PERC_AVG_CALLS PERC_MAX_CALLS PERC_NUMBER_OF_ROUTINE_DISTINCT PERC_NUMBER_OF_ROUTINE_AT_LEAST");
				for (int k = num_class_sms.length - 1; k >= 0; k--) {

					x = (int) Math.pow(2, k);
					if (num_class_sms[k] == 0) {
						if (sum_at_least > 0)
							out.format("%d 0 0 0 0 %.1f%n", x, y5);
						continue;
					}
					sum_at_least += num_class_sms[k];
					y1 = (100 * ((double) tot_class_sms[k] / (double) report.getTotalCalls()));
					y2 = (100 * ((double) ((double) tot_class_sms[k] / (double) num_class_sms[k]) / (double) most_called));
					y3 = (100 * ((double) max_class_sms[k] / (double) most_called));
					y4 = (100 * ((double) num_class_sms[k] / (double) report.getRoutineCount()));
					y5 = (100 * ((double) sum_at_least / (double) report.getRoutineCount()));

					out.format("%d %.1f %.1f %.1f %.1f %.1f%n", x, y1, y2, y3, y4, y5);
				}
				out.close();
			
			}
			
		} catch(java.io.IOException e) {
			
			javax.swing.JOptionPane.showMessageDialog(this, 
					"Error during export :(", "Error",
					javax.swing.JOptionPane.ERROR_MESSAGE);
		
		}
		
	}//GEN-LAST:event_jMenuItem13ActionPerformed

	private void jToggleButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton10ActionPerformed
		
		// Graph button
		if (jToggleButton10.isSelected()) {
			jPopupMenu1.show(jToggleButton10, 0, jToggleButton10.getHeight());
		} else {
			jPopupMenu1.setVisible(false);
		}
		
	}//GEN-LAST:event_jToggleButton10ActionPerformed

	private void jPopupMenu1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenu1PopupMenuWillBecomeInvisible
		
		jToggleButton10.setSelected(false);
		
	}//GEN-LAST:event_jPopupMenu1PopupMenuWillBecomeInvisible

	private void jCheckBoxMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem4ActionPerformed
		
		// Graph menu button: cost plot
		if (jCheckBoxMenuItem4.isSelected()) addGraph(CostGraphPanel);
		else removeGraph(CostGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem4ActionPerformed

	private void jCheckBoxMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem5ActionPerformed
		
		// Graph menu button: MMM plot
		if (jCheckBoxMenuItem5.isSelected()) addGraph(MMMGraphPanel);
		else removeGraph(MMMGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem5ActionPerformed

	private void jCheckBoxMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem6ActionPerformed
		
		// Graph menu button: total cost plot
		if (jCheckBoxMenuItem6.isSelected()) addGraph(TotalCostGraphPanel);
		else removeGraph(TotalCostGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem6ActionPerformed

	private void jCheckBoxMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem7ActionPerformed
		
		// Graph menu button: mcc plot
		if (jCheckBoxMenuItem7.isSelected()) addGraph(MccGraphPanel);
		else removeGraph(MccGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem7ActionPerformed

	private void jCheckBoxMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem8ActionPerformed
		
		// Graph menu button: ratio plot
		if (jCheckBoxMenuItem8.isSelected()) addGraph(ratioGraphPanel);
		else removeGraph(ratioGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem8ActionPerformed

	private void jCheckBoxMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem9ActionPerformed
		
		// Graph menu button: var plot
		if (jCheckBoxMenuItem9.isSelected()) addGraph(VarGraphPanel);
		else removeGraph(VarGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem9ActionPerformed

	private void jCheckBoxMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem10ActionPerformed
		
		// Graph menu button: freq plot
		if (jCheckBoxMenuItem10.isSelected()) addGraph(freqGraphPanel);
		else removeGraph(freqGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem10ActionPerformed

	private void jCheckBoxMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem11ActionPerformed
		
		// Graph menu button: program stats plot
		if (jCheckBoxMenuItem11.isSelected()) addGraph(RtnGraphPanel);
		else removeGraph(RtnGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem11ActionPerformed

	private void jCheckBoxMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem12ActionPerformed
		
		// Graph menu button: cost plot
		if (jCheckBoxMenuItem12.isSelected()) addGraph(CostGraphPanel);
		else removeGraph(CostGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem12ActionPerformed

	private void jCheckBoxMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem13ActionPerformed
		
		// Graph menu button: MMM plot
		if (jCheckBoxMenuItem13.isSelected()) addGraph(MMMGraphPanel);
		else removeGraph(MMMGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem13ActionPerformed

	private void jCheckBoxMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem14ActionPerformed
		
		// Graph menu button: total cost plot
		if (jCheckBoxMenuItem14.isSelected()) addGraph(TotalCostGraphPanel);
		else removeGraph(TotalCostGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem14ActionPerformed

	private void jCheckBoxMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem15ActionPerformed
		
		// Graph menu button: mcc plot
		if (jCheckBoxMenuItem15.isSelected()) addGraph(MccGraphPanel);
		else removeGraph(MccGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem15ActionPerformed

	private void jCheckBoxMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem16ActionPerformed
		
		// Graph menu button: ratio plot
		if (jCheckBoxMenuItem16.isSelected()) addGraph(ratioGraphPanel);
		else removeGraph(ratioGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem16ActionPerformed

	private void jCheckBoxMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem17ActionPerformed
		
		// Graph menu button: var plot
		if (jCheckBoxMenuItem17.isSelected()) addGraph(VarGraphPanel);
		else removeGraph(VarGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem17ActionPerformed

	private void jCheckBoxMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem18ActionPerformed
		
		// Graph menu button: freq plot
		if (jCheckBoxMenuItem18.isSelected()) addGraph(freqGraphPanel);
		else removeGraph(freqGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem18ActionPerformed

	private void jCheckBoxMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem19ActionPerformed
		
		// Graph menu button: program stats plot
		if (jCheckBoxMenuItem19.isSelected()) addGraph(RtnGraphPanel);
		else removeGraph(RtnGraphPanel);
		
	}//GEN-LAST:event_jCheckBoxMenuItem19ActionPerformed

	private void resetRoutineTableFilter() {
		
		// reset filter over routine table
		routines_filter_criteria = new String[4];
		routines_filter_criteria[0] = null;
		routines_filter_criteria[1] = null;
		routines_filter_criteria[2] = null;
		routines_filter_criteria[3] = "5";
		refreshRoutinesTableFilter();
		
	}

	protected void refreshRoutinesTableFilter() {
		setRoutinesTableFilter(routines_filter_criteria);
	}

	protected void setRoutinesTableFilter(String[] criteria) {
		
		routines_filter_criteria = criteria;
		java.util.ArrayList<String> blacklist = Main.getBlackList();
		
		List<RowFilter<TableModel, Integer>> filters = new ArrayList<RowFilter<TableModel, Integer>>(4);
		
		// Filtering based on blacklist
		if (Main.getBlackListEnabled() && blacklist.size() > 0) {
			
			List<RowFilter<TableModel,Integer>> blacklist_filters = new ArrayList<RowFilter<TableModel,Integer>>();
			for (int i = 0; i < blacklist.size(); i++) {
				
				RowFilter<TableModel, Integer> blacklist_filter = null;
				try {
					blacklist_filter = RowFilter.regexFilter(blacklist.get(i).replace(".", "\\."), 0);
				} catch (java.util.regex.PatternSyntaxException e) {
					return;
				}
				blacklist_filters.add(RowFilter.notFilter(blacklist_filter));
			}
			
			RowFilter<TableModel, Integer> f = RowFilter.andFilter(blacklist_filters);
			filters.add(f);
		}
		
		// Filtering based on % time
		if (criteria[0] != null) {
			
			List<RowFilter<TableModel,Integer>> timeperc_filters = new ArrayList<RowFilter<TableModel,Integer>>(2);
			RowFilter<TableModel, Integer> timeperc_equal_filter = null;
			RowFilter<TableModel, Integer> timeperc_greater_filter = null;
			try {
				timeperc_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[0])), 4);
				timeperc_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[0])), 4);
			} catch (java.util.regex.PatternSyntaxException e) {
				return;
			}
			timeperc_filters.add(timeperc_equal_filter);
			timeperc_filters.add(timeperc_greater_filter);
			RowFilter<TableModel, Integer> f = javax.swing.RowFilter.orFilter(timeperc_filters);
			filters.add(f);
		}
		
		// Filtering based on library name
		if (criteria[1] != null) {
			
			List<RowFilter<TableModel,Integer>> lib_filters = new ArrayList<RowFilter<TableModel,Integer>>(1);
			RowFilter<TableModel, Integer> lib_filter = null;
			try {
				lib_filter = javax.swing.RowFilter.regexFilter(criteria[1], 1);
			} catch (java.util.regex.PatternSyntaxException e) {
				return;
			}
			lib_filters.add(lib_filter);
			RowFilter<TableModel, Integer> f4 = RowFilter.andFilter(lib_filters);
			filters.add(f4);
		}
		
		// Filtering based on % of calls
		if (criteria[2] != null) {
			
			List<RowFilter<TableModel,Integer>> callsperc_filters = new ArrayList<RowFilter<TableModel,Integer>>(2);
			javax.swing.RowFilter<TableModel, Integer> callsperc_equal_filter = null;
			javax.swing.RowFilter<TableModel, Integer> callsperc_greater_filter = null;
			try {
				
				callsperc_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[2])), 7);
				callsperc_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[2])), 7);
			
			} catch (java.util.regex.PatternSyntaxException e) {
				return;
			}
			callsperc_filters.add(callsperc_equal_filter);
			callsperc_filters.add(callsperc_greater_filter);
			RowFilter<TableModel, Integer> f5 = RowFilter.orFilter(callsperc_filters);
			filters.add(f5);
		}
		
		// Filtering based on # rms
		if (criteria[3] != null) {
			
			List<RowFilter<TableModel,Integer>> avgratio_filters = new ArrayList<RowFilter<TableModel,Integer>>(2);
			RowFilter<TableModel, Integer> avgratio_equal_filter = null;
			RowFilter<TableModel, Integer> avgratio_greater_filter = null;
			try {
				
				avgratio_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[3])), 3);
				avgratio_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[3])), 3);
			
			} catch (java.util.regex.PatternSyntaxException e) {
				return;
			}
			avgratio_filters.add(avgratio_equal_filter);
			avgratio_filters.add(avgratio_greater_filter);
			RowFilter<TableModel, Integer> f6 = RowFilter.orFilter(avgratio_filters);
			filters.add(f6);
		}

		routines_table_sorter.setRowFilter(RowFilter.andFilter(filters));
	}

	protected String[] getRmsTableFilter() {
		return rms_filter_criteria;
	}

	private void refresPlotFilter() {
		if (CostGraphPanel != null) CostGraphPanel.refreshFilter();
		if (ratioGraphPanel != null) ratioGraphPanel.refreshFilter();
		if (freqGraphPanel != null) freqGraphPanel.refreshFilter();
		if (MMMGraphPanel != null) MMMGraphPanel.refreshFilter();
		if (TotalCostGraphPanel != null) TotalCostGraphPanel.refreshFilter();
		if (VarGraphPanel != null) VarGraphPanel.refreshFilter();
		if (RtnGraphPanel != null) RtnGraphPanel.refreshFilter();
		if (MccGraphPanel != null) MccGraphPanel.refreshFilter();
	}

	protected void setRmsTableFilter(String[] criteria) {
		
		this.rms_filter_criteria = criteria;
		refresPlotFilter();
		if (criteria == null) sms_table_sorter.setRowFilter(null); // no filters
		
		ArrayList<RowFilter<TableModel, Integer>> filters = new ArrayList<RowFilter<TableModel, Integer>>(3);
		if (criteria[0] != null) {
		
			List<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>> time_filters = new java.util.ArrayList<javax.swing.RowFilter<javax.swing.table.TableModel,Integer>>(2);
			RowFilter<javax.swing.table.TableModel, Integer> time_equal_filter = null;
			RowFilter<javax.swing.table.TableModel, Integer> time_greater_filter = null;
			try {
				time_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[0])), 3);
				time_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[0])), 3);
			} catch (java.util.regex.PatternSyntaxException e) {
				return;
			}
			time_filters.add(time_equal_filter);
			time_filters.add(time_greater_filter);
			RowFilter<TableModel, Integer> f = RowFilter.orFilter(time_filters);
			filters.add(f);
		
		}
		if (criteria[1] != null) {
			
			List<javax.swing.RowFilter<TableModel,Integer>> ratio_filters = new ArrayList<RowFilter<TableModel,Integer>>(2);
			RowFilter<TableModel, Integer> rms_equal_filter = null;
			RowFilter<TableModel, Integer> rms_greater_filter = null;
			try {
				rms_equal_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[1])), 0);
				rms_greater_filter = javax.swing.RowFilter.numberFilter(javax.swing.RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[1])), 0);
			} catch (java.util.regex.PatternSyntaxException e) {
				return;
			}
			ratio_filters.add(rms_equal_filter);
			ratio_filters.add(rms_greater_filter);
			RowFilter<TableModel, Integer> f = RowFilter.orFilter(ratio_filters);
			filters.add(f);
		}
		if (criteria[2] != null) {
			List<RowFilter<TableModel,Integer>> freq_filters = new ArrayList<RowFilter<TableModel,Integer>>(2);
			RowFilter<TableModel, Integer> freq_equal_filter = null;
			RowFilter<TableModel, Integer> freq_greater_filter = null;
			try {
				freq_equal_filter = RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, new Double(Double.parseDouble(criteria[2])), 4);
				freq_greater_filter = RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, new Double(Double.parseDouble(criteria[2])), 4);
			} catch (java.util.regex.PatternSyntaxException e) {
				return;
			}
			freq_filters.add(freq_equal_filter);
			freq_filters.add(freq_greater_filter);
			RowFilter<TableModel, Integer> f = RowFilter.orFilter(freq_filters);
			filters.add(f);
		}
		sms_table_sorter.setRowFilter(javax.swing.RowFilter.andFilter(filters));
	}

	private void findRoutineByName() {
		String query = jTextField1.getText();
		if (jTable1.getRowCount() > 0 && !query.equals("")) {
			int i = jTable1.getSelectedRow();
			if (i < 0) i = 0;
			int size = jTable1.getRowCount();
			i++;
			if (i >= size) i = 0;
			int start = i;
			while (true) {
				Routine rtn = ((RoutinesTableModel)jTable1.getModel()).getRoutine(jTable1.convertRowIndexToModel(i));
				if (rtn.getName().contains(query)) {
					jTable1.setRowSelectionInterval(i,i);
					if (jTable1.getParent() instanceof javax.swing.JViewport) { // Scroll to visible; thanks to fiontan
						javax.swing.JViewport viewport = (javax.swing.JViewport)jTable1.getParent();
						java.awt.Rectangle rect = jTable1.getCellRect(i, 0, true);
						java.awt.Point pos = viewport.getViewPosition();
						rect.translate(-pos.x, -pos.y);
						viewport.scrollRectToVisible(rect);
					}
					return;
				}
				i++;
				if (i >= size) i = 0;
				if (i == start) {
					//not found
					javax.swing.JOptionPane.showMessageDialog(this, "text not found");
					return;
				}
			}
		}
	}
	
	private void initGraph() {
		
		// Init graphs:
		CostGraphPanel = new GraphPanel(GraphPanel.COST_PLOT, this);
		ratioGraphPanel = new GraphPanel(GraphPanel.RATIO_PLOT, this);
		freqGraphPanel = new GraphPanel(GraphPanel.FREQ_PLOT, this);
		MMMGraphPanel = new GraphPanel(GraphPanel.MMM_PLOT, this);
		TotalCostGraphPanel = new GraphPanel(GraphPanel.TOTALCOST_PLOT, this);
		VarGraphPanel = new GraphPanel(GraphPanel.VAR_PLOT, this);
		RtnGraphPanel = new GraphPanel(GraphPanel.RTN_PLOT, this);
		MccGraphPanel = new GraphPanel(GraphPanel.MCC_PLOT, this);
		
		// Set perfomance monitor
		CostGraphPanel.setPerfomanceMonitor(perf);
		ratioGraphPanel.setPerfomanceMonitor(perf);
		freqGraphPanel.setPerfomanceMonitor(perf);
		MMMGraphPanel.setPerfomanceMonitor(perf);
		TotalCostGraphPanel.setPerfomanceMonitor(perf);
		VarGraphPanel.setPerfomanceMonitor(perf);
		RtnGraphPanel.setPerfomanceMonitor(perf);
		MccGraphPanel.setPerfomanceMonitor(perf);
		
		ArrayList<Integer> graph_order = Main.getGraphOrder();
		// Reset graph order (addGraph will set this later)
		Main.setGraphOrder(new ArrayList<Integer>());
		for (int i = 0; i < graph_order.size(); i++) {
		
			int graph_type = graph_order.get(i);
			GraphPanel g = null;
			
			switch(graph_type) {
				
				case GraphPanel.COST_PLOT:
					g = CostGraphPanel;
					break;
					
				case GraphPanel.RATIO_PLOT:
					g = ratioGraphPanel;
					break;
					
				case GraphPanel.FREQ_PLOT:
					g = freqGraphPanel;
					break;
					
				case GraphPanel.MMM_PLOT:
					g = MMMGraphPanel;
					break;
					
				case GraphPanel.TOTALCOST_PLOT:
					g = TotalCostGraphPanel;
					break;
			
				case GraphPanel.VAR_PLOT:
					g = VarGraphPanel;
					break;
					
				case GraphPanel.RTN_PLOT:
					g = RtnGraphPanel;
					break;
					
				case GraphPanel.MCC_PLOT:
					g = MccGraphPanel;
					break;
					
				default:
					System.out.println("Invalid graph type");
					throw new RuntimeException("Invalid graph type");
				
			}
			
			addGraph(g);
		
		}
		
	
	}
	
	private void addGraph(GraphPanel g) {
		
		if (g == null) return;
		
		switch(g.getGraphType()) {
			
			case GraphPanel.COST_PLOT:
				jCheckBoxMenuItem4.setSelected(true);
				jCheckBoxMenuItem12.setSelected(true);
				break;
				
			case GraphPanel.MMM_PLOT:
				jCheckBoxMenuItem5.setSelected(true);
				jCheckBoxMenuItem13.setSelected(true);
				break;
				
			case GraphPanel.TOTALCOST_PLOT:
				jCheckBoxMenuItem6.setSelected(true);
				jCheckBoxMenuItem14.setSelected(true);
				break;
			
			case GraphPanel.MCC_PLOT:
				jCheckBoxMenuItem7.setSelected(true);
				jCheckBoxMenuItem15.setSelected(true);
				break;
				
			case GraphPanel.RATIO_PLOT:
				jCheckBoxMenuItem8.setSelected(true);
				jCheckBoxMenuItem16.setSelected(true);
				break;
				
			case GraphPanel.VAR_PLOT:
				jCheckBoxMenuItem9.setSelected(true);
				jCheckBoxMenuItem17.setSelected(true);
				break;
				
			case GraphPanel.FREQ_PLOT:
				jCheckBoxMenuItem10.setSelected(true);
				jCheckBoxMenuItem18.setSelected(true);
				break;
				
			case GraphPanel.RTN_PLOT:
				jCheckBoxMenuItem11.setSelected(true);
				jCheckBoxMenuItem19.setSelected(true);
				break;
				
		}
		
		graph_visible++;
		
		ArrayList<Integer> go = Main.getGraphOrder();
		
		if (append_graph) {
		
			jPanel9.add(g);
			go.add(g.getGraphType());	
		
		} else {
			
			Component[] l = jPanel9.getComponents();
			int i = 0;
			for(i = 0; i < l.length; i++) {
				
				if (!(l[i] instanceof GraphPanel)) continue; 
				GraphPanel cg = (GraphPanel) l[i];
				if (cg.getGraphPriority() > g.getGraphPriority()) break;
				
			}
			
			if (i >= l.length) jPanel9.add(g);
			else jPanel9.add(g, i);
			
			// Update graph order
			if (i >= go.size()) go.add(g.getGraphType());
			else go.add(i, g.getGraphType());
		
		}
		
		
		g.setVisible(true);
		g.setData(this.rtn_info);
		Main.setGraphOrder(go);
		adjustGraphLayout();

	}

	private void removeGraph(GraphPanel g) {
		
		if (g == null) return;
		
		switch(g.getGraphType()) {
			
			case GraphPanel.COST_PLOT:
				jPanel9.remove(g);
				jCheckBoxMenuItem4.setSelected(false);
				jCheckBoxMenuItem12.setSelected(false);
				break;
				
			case GraphPanel.MMM_PLOT:
				jCheckBoxMenuItem5.setSelected(false);
				jCheckBoxMenuItem13.setSelected(false);
				break;
				
			case GraphPanel.TOTALCOST_PLOT:
				jCheckBoxMenuItem6.setSelected(false);
				jCheckBoxMenuItem14.setSelected(false);
				break;
			
			case GraphPanel.MCC_PLOT:
				jCheckBoxMenuItem7.setSelected(false);
				jCheckBoxMenuItem15.setSelected(false);
				break;
				
			case GraphPanel.RATIO_PLOT:
				jCheckBoxMenuItem6.setSelected(false);
				jCheckBoxMenuItem16.setSelected(false);
				break;
				
			case GraphPanel.VAR_PLOT:
				jCheckBoxMenuItem9.setSelected(false);
				jCheckBoxMenuItem17.setSelected(false);
				break;
				
			case GraphPanel.FREQ_PLOT:
				jCheckBoxMenuItem10.setSelected(false);
				jCheckBoxMenuItem18.setSelected(false);
				break;
				
			case GraphPanel.RTN_PLOT:
				jCheckBoxMenuItem11.setSelected(false);
				jCheckBoxMenuItem19.setSelected(false);
				break;
				
		}
		
		// This does not work...
		//jPanel9.remove(g);
		// So:
		Component[] l = jPanel9.getComponents();
		ArrayList<Integer> graph_order = new ArrayList<Integer>();
		for (int i = 0; i < l.length; i++) {
			
			if (l[i] instanceof GraphPanel)
				if (g.getGraphType() == ((GraphPanel)l[i]).getGraphType())
					jPanel9.remove(i);
				else
					graph_order.add(((GraphPanel)l[i]).getGraphType());
		
		}
		
		graph_visible--;
		adjustGraphLayout();
		g.setVisible(false);
		Main.setGraphOrder(graph_order);
		
	}
	
	private void adjustGraphLayout() {
		
		if (graph_visible == 4) {
			if (fake == null) fake = new JPanel();
			jPanel9.add(fake);
		} else if (graph_visible == 7) {
			if (fake == null) fake = new JPanel();
			if (fake2 == null) fake2 = new JPanel();
			jPanel9.add(fake);
			jPanel9.add(fake2);
		} else {
			if (fake != null) jPanel9.remove(fake);
			if (fake2 != null) jPanel9.remove(fake2);
			fake = null;
			fake2 = null;
		}
		
		if (graph_visible <= 3)
			jPanel9.setLayout(new java.awt.GridLayout(1, 3));
		else if (graph_visible <= 6)
			jPanel9.setLayout(new java.awt.GridLayout(2, 3));
		else if (graph_visible <= 9)
			jPanel9.setLayout(new java.awt.GridLayout(3, 3));
		
		jPanel9.revalidate();
		
	}

	// For now we decide to disable context tree panel 
	/*
	private void expandContextTree() {
		for (int i = 0; i < jTree1.getRowCount(); i++) {
			jTree1.expandRow(i);
		}
	}

	private void addBranchToTree(DefaultMutableTreeNode root, ArrayList<RoutineContext> branch) {
		if (root.getChildCount() == 0) {
			DefaultMutableTreeNode currentNode = root;
			for (int i = branch.size() - 1; i >= 0; i--) {
				DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(branch.get(i));
				currentNode.add(newNode);
				currentNode = newNode;
			}
		}
		else {
			DefaultMutableTreeNode currentNode = root;
			int i = branch.size() - 1;
			for (; i >= 0; i--) {
				boolean pathFound = false;
				for (int j = 0; j < currentNode.getChildCount(); j++) {
					DefaultMutableTreeNode child = (DefaultMutableTreeNode)currentNode.getChildAt(j);
					if (child.getUserObject().equals(branch.get(i))) {
						currentNode = child;
						pathFound = true;
						break;
					}
				}
				if (!pathFound) break;
			}
			for (; i >= 0; i--) {
				DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(branch.get(i));
				currentNode.add(newNode);
				currentNode = newNode;
			}
		}
	}

	private void updateContextTree(Routine rtn) {
		DefaultTreeModel treeModel = (DefaultTreeModel)jTree1.getModel();
		if (rtn instanceof ContextualizedRoutineInfo){
			DefaultMutableTreeNode root = new DefaultMutableTreeNode("context trees:");
			ContextualizedRoutineInfo urtn = (ContextualizedRoutineInfo)rtn;
			for (int i = 0; i < urtn.getContextCount(); i++) {
				RoutineContext crtn = urtn.getContexts().get(i);
				ArrayList<RoutineContext> branch = new ArrayList<RoutineContext>();
				while (crtn != null) {
					branch.add(crtn);
					crtn = crtn.getParent();
				}
				addBranchToTree(root, branch);
			}
			treeModel.setRoot(root);
			expandContextTree();
		} else treeModel.setRoot(null);
	}
	*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem10;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem11;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem12;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem13;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem14;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem15;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem16;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem17;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem18;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem19;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem5;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem6;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem7;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem8;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton10;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem recentMenuItem1;
    private javax.swing.JMenuItem recentMenuItem2;
    private javax.swing.JMenuItem recentMenuItem3;
    private javax.swing.JMenuItem recentMenuItem4;
    private javax.swing.JMenuItem recentMenuItem5;
    private javax.swing.JMenuItem recentMenuItem6;
    // End of variables declaration//GEN-END:variables
	
	// Graphs
	private GraphPanel CostGraphPanel, ratioGraphPanel, 
						freqGraphPanel, MMMGraphPanel,
						TotalCostGraphPanel, VarGraphPanel,
						RtnGraphPanel, MccGraphPanel;
	private javax.swing.table.TableRowSorter<javax.swing.table.TableModel> routines_table_sorter;
	private javax.swing.table.TableRowSorter<javax.swing.table.TableModel> sms_table_sorter;
	
	private String[] routines_filter_criteria = null;
	private String[] rms_filter_criteria = null;
	private AprofReport report;
	private boolean linked_plots = true;
	private javax.swing.JMenuItem[] recentMenuItems = new javax.swing.JMenuItem[6];

}
