== aprof-plot == 

aprof-plot is a java tool for visualizing reports generated by aprof.

=== Download ===
{{{
svn checkout http://aprof.googlecode.com/svn/trunk/aprofplot aprofplot
}}}
JCommon and JFreeChart are required by aprofplot; they are included in the aprofplot code repository (under `aprofplot/lib`).
=== Compile ===
{{{
cd aprofplot
ant
}}}
This should build a jar file.
=== Run ===
You can run the built jar in this way:
{{{
cd aprofplot
ant run
}}}
=== Report file format (vs. 1) ===
Report file data are specified one item per line. Each line starts with a tag:

----
* v: report version number*

Syntax: `v version`, where `version` is the version number of the file report.

If the version line is missing, the default version number is zero.

----
* c: comment line*

Syntax: `c comment`, where `comment` is any text fragment.

----
* f: command line of the analized program*

Syntax: `f command-line`

----
* a: executable file name of the analized program*

Syntax: `a application-name`

----
* m: performance metric*

Syntax: `m metric`, where `metric` is the metric type of performance measurements. It can be any of the following:

  * `bb-count`: count of executed basic blocks;
  * `time-usec`: elapsed time in microseconds.

If missing, the default metric is `bb-count`.

----
* r: routine info*

Syntax: `r "routine-name" "image-name" routine-id`, where:

  * `"routine-name"`: string specifying the (possibly mangled) name of the routine
  * `"image-name"`: string specifying the pathname of the image containing the routine
  * `routine-id`: distinct numerical id associated to the routine (32 bit unsigned integer)

Example:

`r "mmap" 1641023000 "/lib/i386-linux-gnu/ld-2.13.so" 30`

----
* u: routine demangled name*

Syntax: `u routine-id "demangled-name"`, where:

  * `routine-id`: id of the routine (32 bit unsigned integer)
  * `demangled-name`: string specifying demangled name of the routine

Example:

`u 431 "ogdf::VariableEmbeddingInserter::doCall"`

----
* d: routine full demangled name*

Syntax: `d routine-id "full-demangled-name"`, where:

  * `routine-id`: id of the routine (32 bit unsigned integer)
  * `"full-demangled-name"`: string specifying full demangled name of the routine, including function arguments

Example:

`d 431 "ogdf::VariableEmbeddingInserter::doCall(ogdf::PlanRep&, ogdf::List<ogdf::EdgeElement*> const&, bool, ogdf::EdgeArray<int> const*, ogdf::EdgeArray<bool> const*, ogdf::EdgeArray<unsigned int> const*)"`

----
* p: routine performance point*

Syntax: `p routine-id sms min max sum sqr-sum occ`, where:

  * `routine-id`: id of the routine (32 bit unsigned integer)
  * `sms`: seen memory size of the point (32 bit unsigned integer)
  * `min`: minimum performance measurement (64 bit unsigned integer)
  * `max`: maximum performance measurement (64 bit unsigned integer)
  * `sum`: sum of performance measurements (64 bit unsigned integer)
  * `sqr-sum`: sum of squares of performance measurements (64 bit unsigned integer)
  * `occ`: number of routine calls with the given sms (64 bit unsigned integer)

Example:

`p 7 23 15 37 270 5712 10` 

means that the routine with id 7 was called 10 times on sms 23, requiring a minimum of 15 cost units, a maximum of 37 cost units, a total cost of 200 units and sum of squares 5712.

----
* x: distinct calling context info*

Each `x`-line corresponds to a node of the calling context tree (CCT).

Syntax: `x routine-id context-id parent-context-id`, where:

  * `routine-id`: routine id (32 bit unsigned integer)
  * `context-id`: unique id of CCT node (32 bit unsigned integer)
  * `parent-context-id`: id of parent context in the CCT, or -1 if the context has no parent (node is the root of the CCT).

Example:

`x 24 352 350`

means that node 352 of the CCT is a context of routine 24 and its parent node is 350.

----
* q: calling context performance point*

Syntax: `q context-id sms min max sum sqr-sum occ`, where:

  * `context-id`: id of the calling context (32 bit unsigned integer)
  * `sms`: seen memory size of the point (32 bit unsigned integer)
  * `min`: minimum performance measurement (64 bit unsigned integer)
  * `max`: maximum performance measurement (64 bit unsigned integer)
  * `sum`: sum of performance measurements (64 bit unsigned integer)
  * `sqr-sum`: sum of squares of performance measurements (64 bit unsigned integer)
  * `occ`: number of context activations with the given sms (64 bit unsigned integer)

Example:

`p 624 23 15 37 270 5712 10` 

means that the calling context 624 was activated 10 times on sms 23, requiring a minimum of 15 cost units, a maximum of 37 cost units, a total cost of 200 units and sum of squares 5712.

=== Examples ===
*INSERT SCREENSHOTS*