== Aprofplot == 

aprofplot is a java tool for visualizing reports generated by aprof.

=== Download ===
{{{
svn checkout http://aprof.googlecode.com/svn/trunk/aprofplot aprofplot
}}}
JCommon and JFreeChart are required by aprofplot; they are included in the aprofplot code repository (under `aprofplot/lib`).
=== Compile ===
{{{
cd aprofplot
ant
}}}
This should build a jar file.
=== Run ===
You can run the built jar in this way:
{{{
cd aprofplot
ant run
}}}
=== Report file format ===
Report file data are specified one item per line. Each line starts with a tag:

* v: version number of report file format*

Syntax: `v version`, where `version` is a version number (0, 1, etc.).

_Must be first line of the report_. If missing, the default version number is 0.

* c: comment line*

Syntax: `c comment`, where `comment` is any text fragment.

* f: command line of the analized program*

Syntax: `f command-line`

* a: executable file name of the analized program*

Syntax: `a application-name`

* m: performance metric*

Syntax: `m metric`, where `metric` is the metric type of performance measurements. It can be one of the following:

  * `bb-count`: count of executed basic blocks;
  * `time-usec`: elapsed time in microseconds.

If missing, the default metric is `bb-count`.

* r: routine info*

Syntax: `r "routine-name" address "image-name" routine-id`, where:

  * `"routine-name"`: string specifying the name of the routine
  * `address`: memory address of the routine
  * `"image-name"`: string specifying the pathname of the image containing the routine
  * `routine-id`: distinct numerical id associated to the routine

Example:

`r "mmap" 1641023000 "/lib/i386-linux-gnu/ld-2.13.so" 30`

* p: routine performance point*

Syntax: `p routine-id sms min max sum sqr-sum occ`, where:

  * `routine-id`: id of the routine
  * `sms`: seen memory size of the point
  * `min`: minimum performance measurement
  * `max`: maximum performance measurement
  * `sum`: sum of performance measurements (for average)
  * `sqr-sum`: sum of squares of performance measurements (for variance)
  * `occ`: number of times the routine was called

Example:

`p foo 23 15 37 270 5712 10` 

means that the routine `foo` was called 10 times on sms 23, requiring a minimum of 15 cost units, a maximum of 37 cost units, a total cost of 200 and sum of squares 5712.



=== Examples ===
*INSERT SCREENSHOTS*