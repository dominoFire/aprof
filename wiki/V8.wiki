= Debugging performance of V8 =

{{{
#include <v8.h>
#include <string>
#include <map>

using namespace v8;
using namespace std;

void ParseOptions(int argc,
                  char* argv[],
                  map<string, string>& options,
                  string* file) {
  for (int i = 1; i < argc; i++) {
      
    string arg = argv[i];
    size_t index = arg.find('=', 0);
    if (index == string::npos) {
        *file = arg;
    } else {
        string key = arg.substr(0, index);
        string value = arg.substr(index+1);
        options[key] = value;
    }
  }
}

int sc_size = 0;
char * source_code = NULL;

Handle<String> ReadFile(const string& name) {
    FILE* file = fopen(name.c_str(), "rb");
    if (file == NULL) return Handle<String>();

    fseek(file, 0, SEEK_END);
    int size = ftell(file);
    rewind(file);

    char* chars = new char[size + 1];
    chars[size] = '\0';
    for (int i = 0; i < size;) {
    int read = static_cast<int>(fread(&chars[i], 1, size - i, file));
        i += read;
    }
    fclose(file);
    Handle<String> result = String::New(chars, size);
    //delete[] chars;
    source_code = chars;
    sc_size = size + 1;
    return result;
}

int main(int argc, char* argv[]) {

  map<string, string> options;
  string file;
  ParseOptions(argc, argv, options, &file);
  if (file.empty()) {
    fprintf(stderr, "No script was specified.\n");
    return 1;
  }
  HandleScope scope;
  Handle<String> source = ReadFile(file);
  if (source.IsEmpty()) {
    fprintf(stderr, "Error reading '%s'.\n", file.c_str());
    return 1;
  }

  // Create a stack-allocated handle scope.
  HandleScope handle_scope;

  Persistent<Context> context = Context::New();
  
  // Enter the created context for compiling and
  // running the hello world script. 
  Context::Scope context_scope(context);

  // Compile the source code.
  Handle<Script> script = Script::Compile(source);
  
  // Run the script to get the result.
  Handle<Value> result = script->Run();
  
  // Dispose the persistent context.
  context.Dispose();

  // Convert the result to an ASCII string and print it.
  String::AsciiValue ascii(result);
  printf("%s\n", *ascii);
  
  return 0;
}
}}}