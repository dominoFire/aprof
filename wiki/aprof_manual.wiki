# aprof user manual

= aprof: an input-sensitive perfomance profiler =

aprof is a [http://valgrind.org/ Valgrind] tool. You can find a more [http://valgrind.org/docs/manual/manual.html general user manual] about this binary instrumentation framework on its official site.

== Overview ==

`aprof` automatically measures how the performance of individual routines scales as a function of the input size, yielding clues to their growth rate. The output of the profiler is, for each executed routine of the program, a set of tuples that aggregate performance costs by input size.

== Usage ==

See the [BasicUsage#Profile_a_program basic usage page]

== aprof command-line options ==

`--memory-resolution=<k> [default: 4]`

  To reduce the space needed by the shadow memory, `aprof` allows users to configure the resolution of distinct observable memory objects, trading space for accuracy. This can potentially impact the number of distinct RMS values observed by `aprof`, and therefore the number of collected performance tuples. We denote by k the size in bytes of the smallest observable objects, which we assume to be aligned to addresses multiple of k. For k = 1, we have the finest resolution, shadowing the addresses of all accessed individual memory bytes. For k = 2, we trace accesses to 2-bytes words aligned at 16-bit boundaries, halving the universe of timestamps. The larger k, the smaller the RMS accuracy for routines working on small objects (e.g., strings of characters) and the smaller the size of the shadow memory. 
  Possible valid values are: 1, 2, 4, 8, 16. 

`--merge-report-threads=yes|no [default: no]`

  Merge reports of all threads for the current process. This option is available only on GNU/Linux.

`--merge-report-runs=yes|no [default: no]`

  Merge reports of the current program with reports of previous program runs. Reports must be in the current working directory. This option implies `--merge-report-threads=yes` and it is available only on GNU/Linux.

== aprof specific client requests ==

In the stable version of `aprof`, client requests are used only for external function entry/exit point tracing. See [AprofOnARM_PPC this page] for more details. Two client requests are parsed by `aprof`:

  # `VALGRIND_DO_CLIENT_REQUEST(<dummy_var>, 0, VG_USERREQ_TOOL_BASE('V', 'A'), <function_identifier>, <function_status>, 0, 0, 0);`
  # `VALGRIND_DO_CLIENT_REQUEST(<dummy_var>, 0, VG_USERREQ_TOOL_BASE('V', 'A'), <function_identifier>, <function_status>, 0, 0, 0);`	

where:
  * `<dummy_var>` is an int variable (not used)
  * `<function_identifier>` is an identifier of the function (e.g., the routine address)
  * `<function_status>`: one if entry point; two if exit point

== Report file format ==

See the [ReportFileFormat report file format page].